{"file_contents":{"GCLOUD_DEPLOYMENT_GUIDE.md":{"content":"# Google Cloud Deployment Guide for MyAiMediaMgr\n\n## Prerequisites Checklist\n- [ ] Google Cloud account with billing enabled\n- [ ] `gcloud` CLI installed locally\n- [ ] Docker installed (for local testing)\n- [ ] Node.js 20+ installed\n- [ ] PostgreSQL database (Neon or Cloud SQL)\n\n## Step 1: Google Cloud Project Setup\n\n### 1.1 Create Project\n```bash\n# Create new project\ngcloud projects create myaimediamgr-prod --name=\"MyAiMediaMgr Production\"\n\n# Set as active project\ngcloud config set project myaimediamgr-prod\n\n# Link billing account (replace with your billing account ID)\ngcloud billing projects link myaimediamgr-prod --billing-account=YOUR_BILLING_ACCOUNT_ID\n```\n\n### 1.2 Enable Required APIs\n```bash\n# Enable all necessary APIs\ngcloud services enable \\\n  run.googleapis.com \\\n  cloudbuild.googleapis.com \\\n  secretmanager.googleapis.com \\\n  aiplatform.googleapis.com \\\n  storage-api.googleapis.com \\\n  storage-component.googleapis.com \\\n  iam.googleapis.com \\\n  cloudresourcemanager.googleapis.com \\\n  compute.googleapis.com\n```\n\n## Step 2: IAM Roles and Service Account Setup\n\n### 2.1 Create Service Account\n```bash\n# Create service account for the application\ngcloud iam service-accounts create myaimediamgr-app \\\n  --display-name=\"MyAiMediaMgr Application Service Account\"\n\n# Get the service account email\nexport SERVICE_ACCOUNT=myaimediamgr-app@myaimediamgr-prod.iam.gserviceaccount.com\n```\n\n### 2.2 Assign Required Roles\n```bash\n# Vertex AI roles for Gemini, Imagen, and Veo\ngcloud projects add-iam-policy-binding myaimediamgr-prod \\\n  --member=\"serviceAccount:${SERVICE_ACCOUNT}\" \\\n  --role=\"roles/aiplatform.user\"\n\n# Cloud Storage roles\ngcloud projects add-iam-policy-binding myaimediamgr-prod \\\n  --member=\"serviceAccount:${SERVICE_ACCOUNT}\" \\\n  --role=\"roles/storage.objectAdmin\"\n\n# Secret Manager roles\ngcloud projects add-iam-policy-binding myaimediamgr-prod \\\n  --member=\"serviceAccount:${SERVICE_ACCOUNT}\" \\\n  --role=\"roles/secretmanager.secretAccessor\"\n\n# Cloud Run invoker (for public access)\ngcloud projects add-iam-policy-binding myaimediamgr-prod \\\n  --member=\"allUsers\" \\\n  --role=\"roles/run.invoker\"\n```\n\n### 2.3 Create Storage Bucket\n```bash\n# Create bucket for AI-generated content\ngsutil mb -p myaimediamgr-prod -c standard -l us-central1 gs://myaimediamgr-content/\n\n# Set public access for content delivery\ngsutil iam ch allUsers:objectViewer gs://myaimediamgr-content\n```\n\n## Step 3: Configure Secrets\n\n### 3.1 Create Secrets in Secret Manager\n```bash\n# Database URL (replace with your actual database URL)\necho -n \"postgresql://user:password@host/database?sslmode=require\" | \\\n  gcloud secrets create DATABASE_URL --data-file=-\n\n# Session secret (generate a strong random string)\necho -n \"$(openssl rand -base64 32)\" | \\\n  gcloud secrets create SESSION_SECRET --data-file=-\n\n# Replit environment variables (required for OAuth)\necho -n \"your-repl-id\" | \\\n  gcloud secrets create REPL_ID --data-file=-\n\necho -n \"your-app-domain.replit.app\" | \\\n  gcloud secrets create REPLIT_DOMAINS --data-file=-\n\n# Grant service account access to secrets\nfor SECRET in DATABASE_URL SESSION_SECRET REPL_ID REPLIT_DOMAINS; do\n  gcloud secrets add-iam-policy-binding $SECRET \\\n    --member=\"serviceAccount:${SERVICE_ACCOUNT}\" \\\n    --role=\"roles/secretmanager.secretAccessor\"\ndone\n```\n\n## Step 4: Prepare Application for Deployment\n\n### 4.1 Create Dockerfile\n```dockerfile\n# Multi-stage build for optimization\nFROM node:20-alpine AS builder\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\nCOPY tsconfig.json ./\nCOPY vite.config.ts ./\nCOPY tailwind.config.ts ./\nCOPY postcss.config.js ./\nCOPY components.json ./\nCOPY drizzle.config.ts ./\n\n# Install dependencies\nRUN npm ci\n\n# Copy source code\nCOPY client ./client\nCOPY server ./server\nCOPY shared ./shared\n\n# Build the application\nRUN npm run build\n\n# Production stage\nFROM node:20-alpine\n\nWORKDIR /app\n\n# Install production dependencies only\nCOPY package*.json ./\nRUN npm ci --omit=dev && npm cache clean --force\n\n# Copy built application\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/server ./server\nCOPY --from=builder /app/shared ./shared\n\n# Set environment variables\nENV NODE_ENV=production\nENV PORT=8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node -e \"require('http').get('http://localhost:8080/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})\"\n\n# Start the application\nCMD [\"node\", \"dist/server/index.js\"]\n```\n\n### 4.2 Create .gcloudignore\n```\nnode_modules/\n.git/\n.gitignore\n*.md\n.env*\n.local/\ntmp/\n*.log\n.DS_Store\ncoverage/\n.vscode/\n.idea/\n*.zip\nattached_assets/\n```\n\n### 4.3 Create cloudbuild.yaml\n```yaml\nsteps:\n  # Build the container image\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['build', '-t', 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA', '.']\n  \n  # Push the container image to Container Registry\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['push', 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA']\n  \n  # Deploy container image to Cloud Run\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: gcloud\n    args:\n      - 'run'\n      - 'deploy'\n      - 'myaimediamgr'\n      - '--image'\n      - 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA'\n      - '--region'\n      - 'us-central1'\n      - '--platform'\n      - 'managed'\n      - '--allow-unauthenticated'\n      - '--service-account'\n      - 'myaimediamgr-app@$PROJECT_ID.iam.gserviceaccount.com'\n      - '--set-env-vars'\n      - 'GCLOUD_PROJECT_ID=$PROJECT_ID,GCLOUD_LOCATION=us-central1,GCLOUD_STORAGE_BUCKET=myaimediamgr-content,NODE_ENV=production,ISSUER_URL=https://replit.com/oidc'\n      - '--set-secrets'\n      - 'DATABASE_URL=DATABASE_URL:latest,SESSION_SECRET=SESSION_SECRET:latest,REPL_ID=REPL_ID:latest,REPLIT_DOMAINS=REPLIT_DOMAINS:latest'\n      - '--memory'\n      - '2Gi'\n      - '--cpu'\n      - '2'\n      - '--timeout'\n      - '300'\n      - '--max-instances'\n      - '100'\n      - '--min-instances'\n      - '0'\n\nimages:\n  - 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA'\n\ntimeout: '1200s'\n```\n\n## Step 5: Add Production Configuration\n\n### 5.1 Update package.json scripts\n```json\n{\n  \"scripts\": {\n    \"build\": \"npm run build:client && npm run build:server\",\n    \"build:client\": \"vite build --outDir dist/client\",\n    \"build:server\": \"tsc -p tsconfig.server.json\",\n    \"start\": \"node dist/server/index.js\",\n    \"db:push\": \"drizzle-kit push\",\n    \"db:generate\": \"drizzle-kit generate\"\n  }\n}\n```\n\n### 5.2 Create tsconfig.server.json\n```json\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"rootDir\": \".\",\n    \"composite\": false,\n    \"noEmit\": false\n  },\n  \"include\": [\"server/**/*\", \"shared/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\", \"client\"]\n}\n```\n\n### 5.3 Add health check endpoint to server/routes.ts\n```typescript\n// Add this to your routes\napp.get('/health', (req, res) => {\n  res.status(200).json({ status: 'healthy', timestamp: new Date().toISOString() });\n});\n```\n\n### 5.4 Create .env.example\n```env\nNODE_ENV=production\nPORT=8080\nDATABASE_URL=postgresql://user:pass@host/db?sslmode=require\nSESSION_SECRET=your-session-secret\nGCLOUD_PROJECT_ID=myaimediamgr-prod\nGCLOUD_LOCATION=us-central1\nGCLOUD_STORAGE_BUCKET=myaimediamgr-content\nREPL_ID=your-repl-id\nREPLIT_DOMAINS=your-domain.replit.app\nISSUER_URL=https://replit.com/oidc\n```\n\n## Step 6: Deploy to Cloud Run\n\n### 6.1 Initial Deployment\n```bash\n# Build and deploy using Cloud Build\ngcloud builds submit --config=cloudbuild.yaml\n\n# Alternative: Direct deployment\ngcloud run deploy myaimediamgr \\\n  --source . \\\n  --region us-central1 \\\n  --platform managed \\\n  --allow-unauthenticated \\\n  --service-account myaimediamgr-app@myaimediamgr-prod.iam.gserviceaccount.com \\\n  --set-env-vars GCLOUD_PROJECT_ID=myaimediamgr-prod,GCLOUD_LOCATION=us-central1,GCLOUD_STORAGE_BUCKET=myaimediamgr-content,NODE_ENV=production,ISSUER_URL=https://replit.com/oidc \\\n  --set-secrets DATABASE_URL=DATABASE_URL:latest,SESSION_SECRET=SESSION_SECRET:latest,REPL_ID=REPL_ID:latest,REPLIT_DOMAINS=REPLIT_DOMAINS:latest \\\n  --memory 2Gi \\\n  --cpu 2 \\\n  --timeout 300 \\\n  --max-instances 100\n```\n\n### 6.2 Verify Deployment\n```bash\n# Get service URL\ngcloud run services describe myaimediamgr --region us-central1 --format 'value(status.url)'\n\n# Check logs\ngcloud logging read \"resource.type=cloud_run_revision AND resource.labels.service_name=myaimediamgr\" --limit 50\n```\n\n## Step 7: Post-Deployment Configuration\n\n### 7.1 Set up Custom Domain (Optional)\n```bash\n# Verify domain ownership\ngcloud domains verify yourdomain.com\n\n# Map domain to Cloud Run service\ngcloud run domain-mappings create --service myaimediamgr --domain yourdomain.com --region us-central1\n```\n\n### 7.2 Configure Monitoring\n```bash\n# Create uptime check\ngcloud monitoring uptime-check-configs create myaimediamgr-health \\\n  --display-name=\"MyAiMediaMgr Health Check\" \\\n  --monitored-resource=\"type=uptime_url,labels={project_id=myaimediamgr-prod,host=your-service-url.run.app}\" \\\n  --http-check-path=\"/health\" \\\n  --check-frequency=300\n```\n\n## Troubleshooting Guide\n\n### Common Issues and Solutions\n\n#### 1. Build Fails\n- **Issue**: TypeScript compilation errors\n- **Solution**: Run `npm run build` locally first to catch errors\n- **Fix**: Ensure all TypeScript errors are resolved before deployment\n\n#### 2. Deployment Fails - Insufficient Permissions\n- **Issue**: \"Permission denied\" errors\n- **Solution**: Ensure all IAM roles are correctly assigned:\n```bash\ngcloud projects get-iam-policy myaimediamgr-prod --flatten=\"bindings[].members\" --format='table(bindings.role)' --filter=\"bindings.members:myaimediamgr-app@\"\n```\n\n#### 3. Runtime Errors - Missing Environment Variables\n- **Issue**: Application crashes on startup\n- **Solution**: Verify all secrets are created and accessible:\n```bash\ngcloud secrets list\ngcloud run services describe myaimediamgr --region us-central1 --format export | grep -A 20 \"env:\"\n```\n\n#### 4. Vertex AI API Errors\n- **Issue**: \"API not enabled\" or permission errors\n- **Solution**: Verify API enablement and quota:\n```bash\ngcloud services list --enabled | grep -E \"aiplatform|storage\"\ngcloud compute project-info describe --format=\"value(quotas[].metric)\" | grep -i vertex\n```\n\n#### 5. Database Connection Issues\n- **Issue**: Cannot connect to PostgreSQL\n- **Solution**: \n  - Ensure DATABASE_URL includes SSL mode: `?sslmode=require`\n  - Whitelist Cloud Run outbound IPs if using external database\n  - For Neon database, ensure connection pooling is enabled\n\n#### 6. OAuth Authentication Issues\n- **Issue**: Replit OAuth not working\n- **Solution**:\n  - Update REPLIT_DOMAINS secret with your Cloud Run URL\n  - Ensure ISSUER_URL is set correctly\n  - Update OAuth callback URLs in your Replit settings\n\n## Pre-Deployment Checklist\n\nBefore deploying, ensure:\n\n- [ ] All environment variables are set in Secret Manager\n- [ ] Database migrations are run: `npm run db:push`\n- [ ] Local build succeeds: `npm run build`\n- [ ] Docker image builds locally: `docker build -t myaimediamgr .`\n- [ ] All required APIs are enabled\n- [ ] Service account has all necessary roles\n- [ ] Storage bucket is created and accessible\n- [ ] Health check endpoint returns 200 OK\n- [ ] All TypeScript errors are resolved\n- [ ] Package.json has correct build scripts\n\n## Cost Optimization Tips\n\n1. **Set minimum instances to 0** for development environments\n2. **Use Cloud CDN** for static assets\n3. **Configure autoscaling** based on actual traffic patterns\n4. **Set appropriate memory limits** (2Gi is usually sufficient)\n5. **Use regional resources** in the same region as Cloud Run\n6. **Implement caching** for AI-generated content\n\n## Security Best Practices\n\n1. **Never commit secrets** to version control\n2. **Use Secret Manager** for all sensitive data\n3. **Enable VPC Service Controls** for production\n4. **Implement rate limiting** on API endpoints\n5. **Use Cloud Armor** for DDoS protection\n6. **Enable audit logging** for compliance\n7. **Regularly update dependencies** for security patches\n8. **Use least privilege principle** for IAM roles\n\n## Vertex AI Model Access\n\n### Request Access to Models\n1. Navigate to Vertex AI in Google Cloud Console\n2. Go to \"Model Garden\"\n3. Request access for:\n   - **Gemini 2.5 Flash** (gemini-2.5-flash-002)\n   - **Gemini 2.5 Pro** (gemini-2.5-pro-002)\n   - **Imagen 4** (imagen-4.0-generate-001)\n   - **Veo 3 Fast** (veo-3.0-fast-generate-001)\n4. Wait for approval (usually 24-48 hours)\n\n### Pricing Information\n- **Gemini 2.5 Flash**: ~$0.00001875 per 1K characters\n- **Gemini 2.5 Pro**: ~$0.0025 per 1K characters\n- **Imagen 4**: ~$0.025 per image\n- **Veo 3 Fast**: ~$0.10 per 8-second video\n\n## Support Resources\n\n- [Cloud Run Documentation](https://cloud.google.com/run/docs)\n- [Vertex AI Documentation](https://cloud.google.com/vertex-ai/docs)\n- [IAM Best Practices](https://cloud.google.com/iam/docs/best-practices)\n- [Cloud Build Documentation](https://cloud.google.com/build/docs)\n- [Secret Manager Documentation](https://cloud.google.com/secret-manager/docs)\n\n---\n\n## Quick Start Commands Summary\n\n```bash\n# Complete deployment in one script\nPROJECT_ID=myaimediamgr-prod\ngcloud config set project $PROJECT_ID\ngcloud services enable run.googleapis.com cloudbuild.googleapis.com aiplatform.googleapis.com storage-api.googleapis.com secretmanager.googleapis.com\ngcloud iam service-accounts create myaimediamgr-app\ngcloud builds submit --config=cloudbuild.yaml\n```\n\nThis guide ensures your deployment will succeed on the first try by covering all necessary configurations, permissions, and common pitfalls. Follow each step carefully and use the troubleshooting guide if you encounter any issues.","size_bytes":13677},"RAILWAY_DEPLOYMENT.md":{"content":"# Railway Deployment Guide for MyAiMediaMgr\n\n## Prerequisites\n- Railway account (https://railway.app)\n- GitHub repository with the code\n- Stripe account with API keys\n- Google Cloud account (optional for AI features)\n\n## Deployment Steps\n\n### 1. Connect to Railway\n1. Log in to Railway dashboard\n2. Click \"New Project\"\n3. Select \"Deploy from GitHub repo\"\n4. Connect your GitHub repository\n\n### 2. Configure Environment Variables\nIn Railway dashboard, add these required environment variables:\n\n#### Required Variables:\n```env\n# Database (Railway will auto-generate these when you add PostgreSQL)\nDATABASE_URL=<auto-generated>\nPGDATABASE=<auto-generated>\nPGHOST=<auto-generated>\nPGPASSWORD=<auto-generated>\nPGPORT=<auto-generated>\nPGUSER=<auto-generated>\n\n# Authentication\nSESSION_SECRET=<generate-a-32-char-random-string>\nREPLIT_DOMAINS=yourdomain.railway.app\nISSUER_URL=https://replit.com/oidc\nREPL_ID=your-app-id\n\n# Stripe Payments\nSTRIPE_SECRET_KEY=sk_live_your_stripe_secret_key\nVITE_STRIPE_PUBLIC_KEY=pk_live_your_stripe_public_key\n```\n\n#### Optional Variables (for AI features):\n```env\nGCLOUD_PROJECT_ID=your-project-id\nGEMINI_API_KEY=your-gemini-api-key\n```\n\n### 3. Add PostgreSQL Database\n1. In Railway project, click \"New\"\n2. Select \"Database\" > \"Add PostgreSQL\"\n3. Railway will automatically connect it to your app\n\n### 4. Initialize Database\nAfter deployment, run the database migration:\n1. Go to Railway dashboard\n2. Open the service shell\n3. Run: `npm run db:push`\n\n### 5. Configure Domain (Optional)\n1. Go to Settings in Railway\n2. Add a custom domain or use the generated Railway domain\n3. Update REPLIT_DOMAINS environment variable with your domain\n\n## Admin Access\nThe application includes a built-in admin system:\n- **Admin Login URL**: `https://yourdomain.railway.app/admin/login`\n- **Admin Email**: `spencerandtheteagues@gmail.com`\n- **Admin Password**: `TheMoonKey8!`\n\nAdmin capabilities:\n- Bypass all paywalls\n- Infinite credits\n- User management\n- Credit adjustments\n- View system statistics\n\n## Build Configuration\nThe app uses these commands (already configured in railway.json):\n- **Build**: `npm install && npm run build`\n- **Start**: `npm run start`\n\n## Health Checks\nRailway will automatically monitor:\n- Application health at `/`\n- Database connectivity\n- Service uptime\n\n## Troubleshooting\n\n### Database Connection Issues\n- Ensure DATABASE_URL is properly set\n- Check PostgreSQL service is running\n- Verify database migrations ran successfully\n\n### Build Failures\n- Check Node.js version compatibility (v18+)\n- Verify all dependencies are in package.json\n- Check build logs in Railway dashboard\n\n### Authentication Issues\n- Verify SESSION_SECRET is set\n- Check REPLIT_DOMAINS matches your domain\n- Ensure cookies are enabled for sessions\n\n### Payment Issues\n- Verify Stripe keys are correct\n- Check Stripe webhook configuration\n- Ensure production keys are used (not test keys)\n\n## Production Optimizations\nThe app is optimized for Railway with:\n- Efficient build caching\n- Database connection pooling\n- Automatic restart on failure\n- Health check monitoring\n- Production environment variables\n\n## Monitoring\nRailway provides:\n- Real-time logs\n- Metrics dashboard\n- Deployment history\n- Resource usage tracking\n\n## Support\nFor deployment issues:\n1. Check Railway logs for errors\n2. Verify all environment variables are set\n3. Ensure database is properly initialized\n4. Contact Railway support if needed","size_bytes":3433},"cloudbuild.yaml":{"content":"steps:\n  # Build the container image\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['build', '-t', 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA', '.']\n  \n  # Push the container image to Container Registry\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['push', 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA']\n  \n  # Deploy container image to Cloud Run\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: gcloud\n    args:\n      - 'run'\n      - 'deploy'\n      - 'myaimediamgr'\n      - '--image'\n      - 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA'\n      - '--region'\n      - 'us-central1'\n      - '--platform'\n      - 'managed'\n      - '--port'\n      - '8080'\n      - '--allow-unauthenticated'\n      - '--set-env-vars'\n      - 'NODE_ENV=production'\n      - '--memory'\n      - '2Gi'\n      - '--cpu'\n      - '2'\n      - '--max-instances'\n      - '10'\n      - '--min-instances'\n      - '1'\n\nimages:\n  - 'gcr.io/$PROJECT_ID/myaimediamgr:$COMMIT_SHA'\n\ntimeout: '1200s'","size_bytes":987},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nMyAiMediaMgr is an AI-powered social media management platform designed specifically for small businesses. The application enables users to create, schedule, approve, and publish content across multiple social media platforms (Instagram, Facebook, X/Twitter, TikTok, LinkedIn) from a single interface. The platform leverages AI assistance for content generation and includes sophisticated approval workflows, analytics tracking, and performance monitoring to streamline social media management operations.\n\n## Recent Updates (August 23, 2025)\n\n### Admin System Implementation\n- Added secure admin login system with hardcoded credentials\n- Created comprehensive admin dashboard for user management\n- Admin capabilities include:\n  - Bypass all Stripe paywalls\n  - Infinite credits (999,999,999)\n  - User credit management (add/remove)\n  - User deletion capabilities\n  - System statistics overview\n  - Full platform control\n\n### Admin Access\n- **Admin Login URL**: `/admin/login`\n- **Admin Email**: `spencerandtheteagues@gmail.com`\n- **Admin Password**: `TheMoonKey8!`\n- Admin users have `isAdmin: true` flag in database\n- Admin sessions bypass OAuth authentication\n\n### Railway Deployment Optimization\n- Created Railway configuration file (`railway.json`)\n- Optimized build and start commands for production\n- Added comprehensive deployment documentation\n- Configured health checks and monitoring\n- Set up automatic restart policies\n- Prepared environment variable templates\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built using React with TypeScript, utilizing Vite as the build tool and development server. The architecture follows a component-based design with:\n- **Routing**: Wouter for client-side routing with page-based navigation\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/UI components built on Radix UI primitives with Tailwind CSS for styling\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Component Structure**: Organized into layout components (header, sidebar), content-specific components, and reusable UI components\n\n### Backend Architecture\nThe server-side is implemented as an Express.js application with TypeScript, featuring:\n- **API Design**: RESTful API endpoints organized in `/api` routes\n- **Data Layer**: In-memory storage implementation with interfaces designed for easy database migration\n- **Middleware**: Request logging, JSON parsing, and error handling middleware\n- **Development Setup**: Vite integration for hot module replacement and development tooling\n\n### Database Design\nThe application uses Drizzle ORM with PostgreSQL dialect, structured around five core entities:\n- **Users**: User account information and business details\n- **Platforms**: Connected social media platform configurations\n- **Posts**: Content posts with status tracking, scheduling, and engagement data\n- **AI Suggestions**: Generated content recommendations and metadata\n- **Analytics**: Performance metrics and engagement tracking data\n\n### Content Management System\nThe platform implements a sophisticated content lifecycle:\n- **Creation**: AI-assisted content generation with platform-specific adaptations\n- **Approval Workflow**: Multi-stage review process with approval/rejection capabilities\n- **Scheduling**: Calendar-based scheduling with platform-specific timing optimization\n- **Publishing**: Automated posting to connected social media platforms\n- **Analytics**: Post-publication performance tracking and reporting\n\n### AI Integration Architecture\nThe system incorporates AI capabilities for:\n- **Content Generation**: AI-powered post creation with customizable tone and style\n- **Platform Optimization**: Automatic content adaptation for different social media platforms\n- **Performance Prediction**: Engagement forecasting and optimization suggestions\n- **Hashtag Generation**: Automated relevant hashtag suggestions\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with modern hooks and concurrent features\n- **Express.js**: Backend web application framework\n- **TypeScript**: Type safety across both frontend and backend\n- **Vite**: Build tool and development server with hot module replacement\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL support\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **PostgreSQL**: Primary database system (configured via DATABASE_URL)\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Shadcn/UI**: Comprehensive component library built on Radix UI\n- **Radix UI**: Accessible, unstyled UI primitives for complex components\n- **Lucide React**: Icon library for consistent iconography\n\n### State Management and Data Fetching\n- **TanStack Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema definition\n\n### Development and Build Tools\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for vendor prefixes\n- **TSX**: TypeScript execution for development server\n\n### Session and Storage\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **nanoid**: Unique ID generation for various entities\n\n### Replit-Specific Integrations\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Development tooling integration","size_bytes":5691},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Social platform colors\n        instagram: \"var(--instagram)\",\n        facebook: \"var(--facebook)\",\n        twitter: \"var(--twitter)\",\n        tiktok: \"var(--tiktok)\",\n        linkedin: \"var(--linkedin)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2970},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/admin-auth.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"./storage\";\nimport crypto from \"crypto\";\n\n// Admin credentials - hardcoded for special admin user\nconst ADMIN_EMAIL = \"spencerandtheteagues@gmail.com\";\nconst ADMIN_PASSWORD = \"TheMoonKey8!\";\n\n// Hash password using SHA256\nfunction hashPassword(password: string): string {\n  return crypto.createHash('sha256').update(password).digest('hex');\n}\n\nexport function registerAdminRoutes(app: Express) {\n  // Admin login route - bypasses OAuth\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      // Validate admin credentials\n      if (email !== ADMIN_EMAIL || password !== ADMIN_PASSWORD) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      // Get or create admin user\n      let adminUser = await storage.getUserByEmail(ADMIN_EMAIL);\n      \n      if (!adminUser) {\n        // Create admin user with infinite credits - use upsertUser for full field support\n        adminUser = await storage.upsertUser({\n          id: \"admin-user-1\",\n          email: ADMIN_EMAIL,\n          firstName: \"Admin\",\n          lastName: \"User\",\n          businessName: \"Platform Administrator\",\n          credits: 999999999, // Infinite credits\n          isAdmin: true,\n          adminPassword: hashPassword(ADMIN_PASSWORD),\n          subscriptionStatus: \"enterprise\", // Highest tier\n          subscriptionId: \"enterprise\",\n        });\n      } else {\n        // Update existing user to be admin if not already\n        if (!adminUser.isAdmin) {\n          await storage.updateUser(adminUser.id, {\n            isAdmin: true,\n            adminPassword: hashPassword(ADMIN_PASSWORD),\n            credits: 999999999,\n            subscriptionStatus: \"enterprise\",\n            subscriptionId: \"enterprise\",\n          });\n          adminUser = await storage.getUserByEmail(ADMIN_EMAIL);\n        }\n      }\n\n      // Create session for admin\n      (req.session as any).userId = adminUser!.id;\n      (req.session as any).isAdmin = true;\n      \n      // Set user in request for authentication\n      (req as any).user = {\n        claims: {\n          sub: adminUser!.id,\n          email: adminUser!.email,\n        },\n      };\n\n      // Save session\n      req.session.save((err) => {\n        if (err) {\n          console.error(\"Session save error:\", err);\n          return res.status(500).json({ message: \"Failed to create session\" });\n        }\n        \n        res.json({\n          message: \"Admin login successful\",\n          user: {\n            ...adminUser,\n            adminPassword: undefined, // Don't send password hash to client\n          },\n        });\n      });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Admin check middleware\n  app.get(\"/api/admin/check\", async (req: any, res) => {\n    try {\n      const userId = req.session?.userId || req.user?.claims?.sub;\n      \n      if (!userId) {\n        return res.json({ isAdmin: false });\n      }\n\n      const user = await storage.getUser(userId);\n      res.json({ \n        isAdmin: user?.isAdmin || false,\n        user: user ? { ...user, adminPassword: undefined } : null\n      });\n    } catch (error) {\n      res.json({ isAdmin: false });\n    }\n  });\n\n  // Admin-only route to manage users\n  app.get(\"/api/admin/users\", async (req: any, res) => {\n    try {\n      const userId = req.session?.userId || req.user?.claims?.sub;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const adminUser = await storage.getUser(userId);\n      if (!adminUser?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get all users for admin dashboard\n      const users = await storage.getAllUsers();\n      \n      // Remove sensitive data\n      const sanitizedUsers = users.map(user => ({\n        ...user,\n        adminPassword: undefined,\n      }));\n\n      res.json(sanitizedUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Admin route to update user credits\n  app.post(\"/api/admin/users/:userId/credits\", async (req: any, res) => {\n    try {\n      const adminUserId = req.session?.userId || req.user?.claims?.sub;\n      \n      if (!adminUserId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const adminUser = await storage.getUser(adminUserId);\n      if (!adminUser?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const { credits, description } = req.body;\n\n      await storage.updateUserCredits(\n        userId,\n        credits,\n        description || \"Admin credit adjustment\",\n        \"admin\"\n      );\n\n      const updatedUser = await storage.getUser(userId);\n      res.json({ \n        message: \"Credits updated successfully\",\n        user: { ...updatedUser, adminPassword: undefined }\n      });\n    } catch (error) {\n      console.error(\"Error updating credits:\", error);\n      res.status(500).json({ message: \"Failed to update credits\" });\n    }\n  });\n\n  // Admin route to delete user\n  app.delete(\"/api/admin/users/:userId\", async (req: any, res) => {\n    try {\n      const adminUserId = req.session?.userId || req.user?.claims?.sub;\n      \n      if (!adminUserId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const adminUser = await storage.getUser(adminUserId);\n      if (!adminUser?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      \n      // Prevent admin from deleting themselves\n      if (userId === adminUserId) {\n        return res.status(400).json({ message: \"Cannot delete your own admin account\" });\n      }\n\n      await storage.deleteUser(userId);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n}\n\n// Middleware to check if user is admin\nexport async function isAdmin(req: any, res: any, next: any) {\n  try {\n    const userId = req.session?.userId || req.user?.claims?.sub;\n    \n    if (!userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Authorization check failed\" });\n  }\n}","size_bytes":6763},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/gcloud-ai.ts":{"content":"import { VertexAI, HarmCategory, HarmBlockThreshold } from '@google-cloud/vertexai';\nimport { Storage } from '@google-cloud/storage';\nimport { v4 as uuidv4 } from 'uuid';\nimport sharp from 'sharp';\nimport ffmpeg from 'fluent-ffmpeg';\nimport ffmpegPath from '@ffmpeg-installer/ffmpeg';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { promises as fsPromises } from 'fs';\n\nffmpeg.setFfmpegPath(ffmpegPath.path);\n\n// Check if Google Cloud configuration is available\nconst isGoogleCloudConfigured = !!(process.env.GCLOUD_PROJECT_ID && process.env.GCLOUD_PROJECT_ID !== '');\n\n// Initialize Vertex AI only if configured\nlet vertexAI: VertexAI | null = null;\nlet storage: Storage | null = null;\nlet bucket: any = null;\nlet geminiFlashModel: any = null;\nlet geminiProModel: any = null;\nlet imagen4Model: any = null;\nlet veo3FastModel: any = null;\n\nconst bucketName = process.env.GCLOUD_STORAGE_BUCKET || 'myaimediamgr-content';\n\nif (isGoogleCloudConfigured) {\n  try {\n    // Initialize Vertex AI for Gemini models\n    vertexAI = new VertexAI({\n      project: process.env.GCLOUD_PROJECT_ID!,\n      location: process.env.GCLOUD_LOCATION || 'us-central1',\n    });\n\n\n    // Initialize Cloud Storage\n    storage = new Storage({\n      projectId: process.env.GCLOUD_PROJECT_ID,\n      keyFilename: process.env.GCLOUD_KEY_FILE,\n    });\n\n    bucket = storage.bucket(bucketName);\n\n    // Initialize Gemini 2.5 Flash model\n    geminiFlashModel = vertexAI.getGenerativeModel({\n      model: 'gemini-2.5-flash-002',\n      generationConfig: {\n        maxOutputTokens: 8192,\n        temperature: 0.9,\n        topP: 0.95,\n        topK: 40,\n      },\n      safetySettings: [\n        {\n          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n      ],\n    });\n\n    // Initialize Gemini 2.5 Pro model\n    geminiProModel = vertexAI.getGenerativeModel({\n      model: 'gemini-2.5-pro-002',\n      generationConfig: {\n        maxOutputTokens: 8192,\n        temperature: 0.7,\n        topP: 0.95,\n        topK: 40,\n      },\n    });\n\n    // Initialize Imagen 4 model\n    imagen4Model = vertexAI.getGenerativeModel({\n      model: 'imagen-4.0-generate-001',\n    });\n\n    // Initialize Veo 3 Fast model\n    veo3FastModel = vertexAI.getGenerativeModel({\n      model: 'veo-3.0-fast-generate-001',\n    });\n\n    console.log('Google Cloud AI services initialized successfully');\n  } catch (error) {\n    console.error('Failed to initialize Google Cloud AI services:', error);\n    console.log('Running in development mode without Google Cloud AI');\n  }\n} else {\n  console.log('Google Cloud configuration not found. Running in development mode.');\n  console.log('To enable AI features, set GCLOUD_PROJECT_ID in environment variables.');\n}\n\n// Content generation interfaces\nexport interface ContentGenerationRequest {\n  businessName: string;\n  productName?: string;\n  targetAudience: string;\n  brandTone: string;\n  keyMessages: string[];\n  callToAction: string;\n  platform: string;\n  isAdvertisement?: boolean;\n  additionalContext?: string;\n}\n\nexport interface ImageGenerationRequest {\n  prompt: string;\n  visualStyle: string;\n  colorScheme?: string;\n  aspectRatio?: string;\n  businessContext?: string;\n}\n\nexport interface VideoGenerationRequest {\n  prompt: string;\n  duration?: number;\n  visualStyle: string;\n  includeText?: string;\n  businessContext?: string;\n}\n\nexport interface CampaignPost {\n  content: string;\n  imagePrompt: string;\n  imageUrl?: string;\n  videoUrl?: string;\n  scheduledFor: Date;\n  dayNumber: number;\n  postNumber: number;\n}\n\n/**\n * Generate text content using Gemini 2.5 Flash\n */\nexport async function generateTextContent(request: ContentGenerationRequest): Promise<string> {\n  // Check if Google Cloud is configured\n  if (!isGoogleCloudConfigured || !geminiFlashModel) {\n    // Return mock content for development mode\n    const platformLimits: Record<string, number> = {\n      'twitter': 280,\n      'instagram': 2200,\n      'facebook': 5000,\n      'linkedin': 3000,\n      'tiktok': 2200,\n    };\n    \n    const mockContent = `🎯 ${request.isAdvertisement !== false ? '[AD]' : ''} ${request.businessName} ${request.productName ? `- ${request.productName}` : ''}\n\n${request.keyMessages[0] || 'Discover amazing products and services!'}\n\n✨ ${request.brandTone} content for ${request.targetAudience}\n\n${request.callToAction}\n\n#${request.businessName.replace(/\\s+/g, '')} #${request.platform}`;\n    \n    const limit = platformLimits[request.platform.toLowerCase()] || 2200;\n    return mockContent.substring(0, limit);\n  }\n\n  const systemPrompt = `You are an expert social media content creator specializing in ${request.platform} content.\n  Create engaging ${request.isAdvertisement !== false ? 'advertisement' : 'organic'} content for ${request.businessName}.\n  \n  Target Audience: ${request.targetAudience}\n  Brand Tone: ${request.brandTone}\n  Key Messages: ${request.keyMessages.join(', ')}\n  Call to Action: ${request.callToAction}\n  ${request.productName ? `Product: ${request.productName}` : ''}\n  ${request.additionalContext ? `Additional Context: ${request.additionalContext}` : ''}\n  \n  Platform-specific requirements:\n  - Instagram: Maximum 2,200 characters, use relevant hashtags, engaging and visual language\n  - Facebook: Conversational tone, can be longer form, include engagement prompts\n  - Twitter/X: Maximum 280 characters, punchy and concise, 1-2 hashtags max\n  - LinkedIn: Professional tone, value-driven content, industry insights\n  - TikTok: Trendy, casual, youth-oriented language, trending hashtags\n  \n  Generate a single post that is optimized for ${request.platform}.\n  ${request.isAdvertisement !== false ? 'Structure it as a compelling advertisement that drives action.' : ''}`;\n\n  try {\n    const result = await geminiFlashModel.generateContent({\n      contents: [{ role: 'user', parts: [{ text: systemPrompt }] }],\n    });\n    const response = await result.response;\n    const text = response.candidates?.[0]?.content?.parts?.[0]?.text;\n    return text || 'Failed to generate content';\n  } catch (error) {\n    console.error('Error generating text content:', error);\n    throw new Error('Failed to generate text content');\n  }\n}\n\n/**\n * Generate image using Imagen 4\n */\nexport async function generateImage(request: ImageGenerationRequest): Promise<string> {\n  // Check if Google Cloud is configured\n  if (!isGoogleCloudConfigured || !vertexAI) {\n    // Return placeholder image URL for development mode\n    const placeholderDescription = `[Development Mode] Image: ${request.prompt} | Style: ${request.visualStyle}`;\n    return `https://via.placeholder.com/1080x1080/9333ea/ffffff?text=${encodeURIComponent(placeholderDescription.substring(0, 50))}`;\n  }\n\n  const enhancedPrompt = `${request.prompt}\n  Visual Style: ${request.visualStyle}\n  ${request.colorScheme ? `Color Scheme: ${request.colorScheme}` : ''}\n  ${request.businessContext ? `Business Context: ${request.businessContext}` : ''}\n  Professional quality, high resolution, suitable for social media advertising`;\n\n  try {\n    // Using Vertex AI's Imagen 4 API\n    const imagePromptData = {\n      prompt: enhancedPrompt,\n      aspectRatio: request.aspectRatio || '1:1',\n      negativePrompt: 'blurry, low quality, distorted, ugly, pixelated',\n      numberOfImages: 1,\n    };\n\n    const result = await imagen4Model.generateContent({\n      contents: [{ \n        role: 'user', \n        parts: [{ \n          text: JSON.stringify(imagePromptData)\n        }] \n      }],\n      generationConfig: {\n        maxOutputTokens: 2048,\n        temperature: 0.8,\n        topP: 0.95,\n      },\n    });\n\n    // Process and upload image to Cloud Storage\n    const response = await result.response;\n    const imageData = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;\n    \n    if (!imageData) {\n      throw new Error('No image data received from Imagen');\n    }\n\n    const imageBuffer = Buffer.from(imageData, 'base64');\n    const fileName = `images/${uuidv4()}.png`;\n    \n    // Optimize image for web\n    const optimizedBuffer = await sharp(imageBuffer)\n      .resize(1080, 1080, { fit: 'cover' })\n      .png({ quality: 90 })\n      .toBuffer();\n\n    // Upload to Cloud Storage\n    const file = bucket.file(fileName);\n    await file.save(optimizedBuffer, {\n      metadata: {\n        contentType: 'image/png',\n      },\n    });\n\n    await file.makePublic();\n    return `https://storage.googleapis.com/${bucketName}/${fileName}`;\n  } catch (error) {\n    console.error('Error generating image:', error);\n    // Fallback to a placeholder image generation prompt via Gemini\n    return await generatePlaceholderImage(request);\n  }\n}\n\n/**\n * Generate placeholder image description when Imagen is unavailable\n */\nasync function generatePlaceholderImage(request: ImageGenerationRequest): Promise<string> {\n  // Check if Google Cloud is configured\n  if (!isGoogleCloudConfigured || !geminiFlashModel) {\n    // Return simple placeholder for development mode\n    return `https://via.placeholder.com/1080x1080/9333ea/ffffff?text=${encodeURIComponent(request.prompt.substring(0, 50))}`;\n  }\n\n  const prompt = `Create a detailed image description for: ${request.prompt}\n  Style: ${request.visualStyle}\n  This will be used as a placeholder for social media content.`;\n\n  const result = await geminiFlashModel.generateContent({\n    contents: [{ role: 'user', parts: [{ text: prompt }] }],\n  });\n  const response = await result.response;\n  const text = response.candidates?.[0]?.content?.parts?.[0]?.text || 'Placeholder image';\n  \n  // Return a placeholder URL with the description\n  return `placeholder://image?description=${encodeURIComponent(text.substring(0, 100))}`;\n}\n\n/**\n * Generate video using Veo 3 Fast\n */\nexport async function generateVideo(request: VideoGenerationRequest): Promise<string> {\n  // Check if Google Cloud is configured\n  if (!isGoogleCloudConfigured || !vertexAI) {\n    // Return placeholder video URL for development mode\n    return `https://placeholder.video/development-mode?prompt=${encodeURIComponent(request.prompt.substring(0, 50))}&style=${request.visualStyle}`;\n  }\n\n  const enhancedPrompt = `${request.prompt}\n  Visual Style: ${request.visualStyle}\n  Duration: ${request.duration || 15} seconds\n  ${request.includeText ? `Text Overlay: ${request.includeText}` : ''}\n  ${request.businessContext ? `Business Context: ${request.businessContext}` : ''}\n  Optimized for social media, vertical format preferred`;\n\n  try {\n    // Using Vertex AI's Veo 3 Fast API\n    const videoPromptData = {\n      prompt: enhancedPrompt,\n      duration: request.duration || 8,\n      aspectRatio: '9:16', // Vertical for social media\n      fps: 30,\n      videoCodec: 'h264',\n    };\n\n    const result = await veo3FastModel.generateContent({\n      contents: [{ \n        role: 'user', \n        parts: [{ \n          text: JSON.stringify(videoPromptData)\n        }] \n      }],\n      generationConfig: {\n        maxOutputTokens: 2048,\n        temperature: 0.8,\n        topP: 0.95,\n      },\n    });\n\n    const response = await result.response;\n    const videoData = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;\n    \n    if (!videoData) {\n      throw new Error('No video data received from Veo');\n    }\n\n    const videoBuffer = Buffer.from(videoData, 'base64');\n    const fileName = `videos/${uuidv4()}.mp4`;\n    \n    // Save temporarily for processing\n    const tempPath = `/tmp/${uuidv4()}.mp4`;\n    await fsPromises.writeFile(tempPath, videoBuffer);\n    \n    // Optimize video for social media\n    const outputPath = `/tmp/${uuidv4()}_optimized.mp4`;\n    await new Promise((resolve, reject) => {\n      ffmpeg(tempPath)\n        .outputOptions([\n          '-c:v libx264',\n          '-preset fast',\n          '-crf 22',\n          '-c:a aac',\n          '-b:a 128k',\n          '-movflags +faststart',\n        ])\n        .output(outputPath)\n        .on('end', resolve)\n        .on('error', reject)\n        .run();\n    });\n\n    const optimizedBuffer = await fsPromises.readFile(outputPath);\n    \n    // Upload to Cloud Storage\n    const file = bucket.file(fileName);\n    await file.save(optimizedBuffer, {\n      metadata: {\n        contentType: 'video/mp4',\n      },\n    });\n\n    await file.makePublic();\n    \n    // Clean up temp files\n    await fsPromises.unlink(tempPath);\n    await fsPromises.unlink(outputPath);\n    \n    return `https://storage.googleapis.com/${bucketName}/${fileName}`;\n  } catch (error) {\n    console.error('Error generating video:', error);\n    // Return a placeholder video URL\n    return `placeholder://video?description=${encodeURIComponent(request.prompt.substring(0, 100))}`;\n  }\n}\n\n/**\n * Generate a complete campaign with 14 posts (2 per day for 7 days)\n */\nexport async function generateCampaign(\n  request: ContentGenerationRequest & ImageGenerationRequest,\n  startDate: Date\n): Promise<CampaignPost[]> {\n  const posts: CampaignPost[] = [];\n  const totalPosts = 14;\n  const postsPerDay = 2;\n  \n  // Generate diverse content themes for the campaign\n  let themes: string[] = [];\n  \n  if (!isGoogleCloudConfigured || !geminiProModel) {\n    // Generate mock themes for development mode\n    themes = [\n      'Launch Announcement', 'Product Features', 'Customer Benefits', 'Limited Time Offer',\n      'Behind the Scenes', 'Customer Testimonials', 'How It Works', 'Special Promotion',\n      'Why Choose Us', 'Success Stories', 'Expert Tips', 'Community Spotlight',\n      'Flash Sale', 'Final Call to Action'\n    ];\n  } else {\n    const campaignThemesPrompt = `Create 14 unique content themes for a 7-day ${request.platform} campaign for ${request.businessName}.\n    Each theme should be different but aligned with these parameters:\n    - Product: ${request.productName || 'General business'}\n    - Target Audience: ${request.targetAudience}\n    - Campaign Goals: ${request.keyMessages.join(', ')}\n    - Brand Tone: ${request.brandTone}\n    \n    Provide 14 distinct themes, one per line, that create a cohesive campaign narrative.`;\n    \n    const themesResult = await geminiProModel.generateContent({\n      contents: [{ role: 'user', parts: [{ text: campaignThemesPrompt }] }],\n    });\n    const themesResponse = themesResult.response;\n    const themesText = themesResponse.candidates?.[0]?.content?.parts?.[0]?.text || '';\n    themes = themesText.split('\\n').filter((t: string) => t.trim()).slice(0, 14);\n  }\n  \n  // Generate posts for each day\n  for (let day = 0; day < 7; day++) {\n    for (let postInDay = 0; postInDay < postsPerDay; postInDay++) {\n      const postIndex = day * postsPerDay + postInDay;\n      const theme = themes[postIndex] || `Day ${day + 1} - Post ${postInDay + 1}`;\n      \n      // Calculate scheduled time (9 AM and 6 PM)\n      const scheduledDate = new Date(startDate);\n      scheduledDate.setDate(scheduledDate.getDate() + day);\n      scheduledDate.setHours(postInDay === 0 ? 9 : 18, 0, 0, 0);\n      \n      // Generate content for this post\n      const contentRequest = {\n        ...request,\n        additionalContext: `Theme for this post: ${theme}. This is post ${postIndex + 1} of 14 in the campaign.`,\n      };\n      \n      const [textContent, imagePrompt] = await Promise.all([\n        generateTextContent(contentRequest),\n        generateImagePrompt({\n          ...request,\n          theme,\n          postNumber: postIndex + 1,\n          platform: request.platform,\n        }),\n      ]);\n      \n      posts.push({\n        content: textContent,\n        imagePrompt,\n        scheduledFor: scheduledDate,\n        dayNumber: day + 1,\n        postNumber: postIndex + 1,\n      });\n    }\n  }\n  \n  return posts;\n}\n\n/**\n * Generate an image prompt for a campaign post\n */\nasync function generateImagePrompt(\n  request: ImageGenerationRequest & { theme: string; postNumber: number; platform?: string }\n): Promise<string> {\n  // Check if Google Cloud is configured\n  if (!isGoogleCloudConfigured || !geminiFlashModel) {\n    // Return mock image prompt for development mode\n    return `Professional ${request.visualStyle} image for ${request.theme} - Post ${request.postNumber}. ${request.colorScheme || 'Vibrant colors'}. High-quality social media advertisement.`;\n  }\n\n  const prompt = `Create a detailed image generation prompt for social media post ${request.postNumber}.\n  Theme: ${request.theme}\n  Visual Style: ${request.visualStyle}\n  ${request.colorScheme ? `Color Scheme: ${request.colorScheme}` : ''}\n  ${request.businessContext ? `Business: ${request.businessContext}` : ''}\n  \n  The prompt should be specific, visually descriptive, and suitable for creating an engaging social media image.\n  Focus on composition, lighting, and elements that will grab attention on ${request.platform || 'social media'}.`;\n  \n  const result = await geminiFlashModel.generateContent({\n    contents: [{ role: 'user', parts: [{ text: prompt }] }],\n  });\n  const response = result.response;\n  const text = response.candidates?.[0]?.content?.parts?.[0]?.text;\n  return text || 'Generate a professional, eye-catching image for social media advertising';\n}\n\n/**\n * Generate images for all posts in a campaign\n */\nexport async function generateCampaignImages(posts: CampaignPost[]): Promise<void> {\n  const batchSize = 3; // Process 3 images at a time to avoid rate limits\n  \n  for (let i = 0; i < posts.length; i += batchSize) {\n    const batch = posts.slice(i, i + batchSize);\n    const imagePromises = batch.map(post => \n      generateImage({\n        prompt: post.imagePrompt,\n        visualStyle: 'modern, professional, eye-catching',\n        aspectRatio: '1:1',\n      })\n    );\n    \n    const imageUrls = await Promise.all(imagePromises);\n    \n    // Update posts with image URLs\n    batch.forEach((post, index) => {\n      post.imageUrl = imageUrls[index];\n    });\n    \n    // Add a small delay between batches to respect rate limits\n    if (i + batchSize < posts.length) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n}\n\n/**\n * Initialize Google Cloud Storage bucket\n */\nexport async function initializeStorage(): Promise<void> {\n  // Check if Google Cloud is configured\n  if (!isGoogleCloudConfigured || !bucket || !storage) {\n    console.log('Google Cloud Storage not configured - skipping initialization');\n    return;\n  }\n\n  try {\n    const [exists] = await bucket.exists();\n    if (!exists) {\n      const bucketName = process.env.GCLOUD_STORAGE_BUCKET || 'myaimediamgr-content';\n      await storage.createBucket(bucketName, {\n        location: process.env.GCLOUD_LOCATION || 'us-central1',\n        storageClass: 'STANDARD',\n      });\n      console.log(`Created bucket ${bucketName}`);\n    }\n  } catch (error) {\n    console.error('Error initializing storage:', error);\n  }\n}","size_bytes":19155},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nconst isDevelopment = !process.env.REPLIT_DOMAINS;\n\n// Mock user for development\nconst mockUser = {\n  claims: {\n    sub: 'demo-user-1',\n    email: 'demo@example.com',\n    first_name: 'Demo',\n    last_name: 'User',\n    profile_image_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop',\n    exp: Math.floor(Date.now() / 1000) + 86400 // 24 hours from now\n  },\n  access_token: 'mock-access-token',\n  refresh_token: 'mock-refresh-token',\n  expires_at: Math.floor(Date.now() / 1000) + 86400\n};\n\nconst getOidcConfig = isDevelopment \n  ? undefined\n  : memoize(\n      async () => {\n        return await client.discovery(\n          new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n          process.env.REPL_ID!\n        );\n      },\n      { maxAge: 3600 * 1000 }\n    );\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport function getSession() {\n  if (isDevelopment) {\n    return session({\n      secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        httpOnly: true,\n        secure: false,\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 1 week\n      }\n    });\n  }\n\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  if (isDevelopment) {\n    console.warn(\"Running in development mode - OAuth authentication simplified\");\n    \n    // Mock login for development\n    app.get(\"/api/login\", async (req, res) => {\n      // Create/update user in database\n      await upsertUser(mockUser.claims);\n      \n      req.login(mockUser as Express.User, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        res.redirect(\"/\");\n      });\n    });\n\n    app.get(\"/api/callback\", (req, res) => {\n      res.redirect(\"/\");\n    });\n\n    app.get(\"/api/logout\", (req, res) => {\n      req.logout(() => {\n        res.redirect(\"/\");\n      });\n    });\n  } else {\n    // Production OAuth setup\n    const config = await getOidcConfig!();\n\n    const verify: VerifyFunction = async (\n      tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n      verified: passport.AuthenticateCallback\n    ) => {\n      const user = {};\n      updateUserSession(user, tokens);\n      await upsertUser(tokens.claims());\n      verified(null, user);\n    };\n\n    for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n      const strategy = new Strategy(\n        {\n          name: `replitauth:${domain}`,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n    }\n\n    app.get(\"/api/login\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        prompt: \"login consent\",\n        scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n      })(req, res, next);\n    });\n\n    app.get(\"/api/callback\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/api/login\",\n      })(req, res, next);\n    });\n\n    app.get(\"/api/logout\", (req, res) => {\n      req.logout(() => {\n        res.redirect(\n          client.buildEndSessionUrl(config, {\n            client_id: process.env.REPL_ID!,\n            post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n          }).href\n        );\n      });\n    });\n  }\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (isDevelopment) {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    return next();\n  }\n\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig!();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5960},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPostSchema, insertAiSuggestionSchema, insertCampaignSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport * as gcloudAI from \"./gcloud-ai\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { registerStripeRoutes } from \"./stripe-routes\";\nimport { registerAdminRoutes } from \"./admin-auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n  \n  // Register admin routes\n  registerAdminRoutes(app);\n  \n  // Register Stripe payment routes\n  registerStripeRoutes(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || 'demo-user-1';\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Get current user (fallback for old API)\n  app.get(\"/api/user\", async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Get subscription plans\n  app.get(\"/api/subscription-plans\", async (req, res) => {\n    try {\n      const plans = await storage.getSubscriptionPlans();\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get subscription plans\" });\n    }\n  });\n\n  // Subscribe to a plan\n  app.post(\"/api/subscribe/:planId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || 'demo-user-1';\n      const { planId } = req.params;\n      const plan = await storage.getSubscriptionPlan(planId);\n      \n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      // Update user subscription\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create subscription record\n      const endDate = new Date();\n      endDate.setMonth(endDate.getMonth() + 1);\n      \n      await storage.createUserSubscription({\n        userId,\n        planId,\n        status: \"active\",\n        billingCycle: \"monthly\",\n        startDate: new Date(),\n        endDate,\n        nextBillingDate: endDate,\n        autoRenew: true,\n        cancelledAt: null,\n      });\n\n      // Update user with new subscription and add credits\n      await storage.updateUserCredits(\n        userId,\n        plan.creditsPerMonth,\n        `Subscription to ${plan.displayName} plan`,\n        \"subscription\"\n      );\n\n      res.json({ message: \"Subscription successful\", plan });\n    } catch (error) {\n      console.error(\"Subscription error:\", error);\n      res.status(500).json({ message: \"Failed to subscribe to plan\" });\n    }\n  });\n\n  // Get user's credit transactions\n  app.get(\"/api/credits/transactions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || 'demo-user-1';\n      const transactions = await storage.getCreditTransactionsByUserId(userId);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get credit transactions\" });\n    }\n  });\n\n  // Get user's usage tracking\n  app.get(\"/api/usage\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || 'demo-user-1';\n      const usage = await storage.getUsageByUserId(userId);\n      res.json(usage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get usage data\" });\n    }\n  });\n\n  // Get user's connected platforms\n  app.get(\"/api/platforms\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const platforms = await storage.getUserPlatforms(userId);\n      res.json(platforms);\n    } catch (error) {\n      console.error(\"Error fetching platforms:\", error);\n      res.status(500).json({ message: \"Failed to get platforms\" });\n    }\n  });\n\n  // Connect a platform\n  app.post(\"/api/platforms/:platformId/connect\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const { platformId } = req.params;\n      const { accessToken, refreshToken, scope, platformUserId, platformUsername } = req.body;\n      \n      const platform = await storage.connectPlatform(userId, {\n        platformId,\n        accessToken,\n        refreshToken,\n        scope,\n        platformUserId,\n        platformUsername,\n      });\n      \n      res.json(platform);\n    } catch (error) {\n      console.error(\"Error connecting platform:\", error);\n      res.status(500).json({ message: \"Failed to connect platform\" });\n    }\n  });\n\n  // Disconnect a platform\n  app.delete(\"/api/platforms/:platformId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const { platformId } = req.params;\n      \n      await storage.disconnectPlatform(userId, platformId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error disconnecting platform:\", error);\n      res.status(500).json({ message: \"Failed to disconnect platform\" });\n    }\n  });\n\n  // OAuth callback handler (for production OAuth flows)\n  app.get(\"/api/auth/:platform/callback\", async (req, res) => {\n    try {\n      const { platform } = req.params;\n      const { code, state } = req.query;\n      \n      // In production, this would exchange the code for access tokens\n      // For now, redirect back to connect page with success\n      res.redirect(`/connect-platforms?connected=${platform}`);\n    } catch (error) {\n      console.error(\"OAuth callback error:\", error);\n      res.redirect(\"/connect-platforms?error=oauth_failed\");\n    }\n  });\n\n  // Get user's posts\n  app.get(\"/api/posts\", async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const { status } = req.query;\n      let posts;\n      \n      if (status && typeof status === \"string\") {\n        posts = await storage.getPostsByStatus(userId, status);\n      } else {\n        posts = await storage.getPostsByUserId(userId);\n      }\n      \n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get posts\" });\n    }\n  });\n\n  // Get campaigns\n  app.get(\"/api/campaigns\", async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const campaigns = await storage.getCampaignsByUserId(userId);\n      res.json(campaigns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get campaigns\" });\n    }\n  });\n\n  // Get campaign by ID\n  app.get(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const campaign = await storage.getCampaign(req.params.id);\n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get campaign\" });\n    }\n  });\n\n  // Get posts for a campaign\n  app.get(\"/api/campaigns/:id/posts\", async (req, res) => {\n    try {\n      const posts = await storage.getPostsByCampaignId(req.params.id);\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get campaign posts\" });\n    }\n  });\n\n  // Create campaign\n  app.post(\"/api/campaigns\", async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const campaignData = insertCampaignSchema.parse({\n        ...req.body,\n        userId,\n        startDate: req.body.startDate,\n        endDate: req.body.endDate || new Date(new Date(req.body.startDate).getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      });\n      \n      const campaign = await storage.createCampaign(campaignData);\n      res.status(201).json(campaign);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid campaign data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create campaign\" });\n    }\n  });\n\n  // Update campaign\n  app.patch(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const campaign = await storage.updateCampaign(req.params.id, req.body);\n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update campaign\" });\n    }\n  });\n\n  // Generate campaign content\n  app.post(\"/api/campaigns/:id/generate\", async (req, res) => {\n    try {\n      const campaign = await storage.getCampaign(req.params.id);\n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      // Update campaign status to generating\n      await storage.updateCampaign(campaign.id, { status: \"generating\" });\n\n      // Generate campaign posts asynchronously\n      (async () => {\n        try {\n          const startDate = new Date(campaign.startDate);\n          const posts = await gcloudAI.generateCampaign(\n            {\n              businessName: campaign.businessName,\n              productName: campaign.productName || undefined,\n              targetAudience: campaign.targetAudience,\n              brandTone: campaign.brandTone,\n              keyMessages: campaign.keyMessages || [],\n              callToAction: campaign.callToAction,\n              platform: campaign.platform,\n              prompt: `Create engaging ${campaign.platform} content for ${campaign.businessName}`,\n              visualStyle: campaign.visualStyle,\n              colorScheme: campaign.colorScheme || undefined,\n            },\n            startDate\n          );\n\n          // Generate images for posts\n          await gcloudAI.generateCampaignImages(posts);\n\n          // Create posts in storage\n          for (const post of posts) {\n            await storage.createPost({\n              userId: campaign.userId,\n              campaignId: campaign.id,\n              content: post.content,\n              imageUrl: post.imageUrl,\n              imagePrompt: post.imagePrompt,\n              platforms: [campaign.platform],\n              status: \"pending\",\n              scheduledFor: post.scheduledFor,\n              aiGenerated: true,\n            });\n          }\n\n          // Update campaign status to review\n          await storage.updateCampaign(campaign.id, { \n            status: \"review\",\n            generationProgress: 100,\n          });\n        } catch (error) {\n          console.error(\"Failed to generate campaign:\", error);\n          await storage.updateCampaign(campaign.id, { \n            status: \"draft\",\n            generationProgress: 0,\n          });\n        }\n      })();\n\n      res.json({ message: \"Campaign generation started\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate campaign\" });\n    }\n  });\n\n  // Create new post\n  app.post(\"/api/posts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || \"demo-user-1\";\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Calculate credit cost\n      let creditCost = 1; // Base cost for text post\n      if (req.body.aiGenerated) {\n        creditCost += 4; // Additional cost for AI generation\n      }\n      if (req.body.imageUrl && req.body.imagePrompt) {\n        creditCost += 45; // Cost for image generation (50 - 5 already counted)\n      }\n      if (req.body.videoUrl && req.body.videoPrompt) {\n        creditCost += 495; // Cost for video generation (500 - 5 already counted)\n      }\n\n      // Check if user has enough credits\n      if (user.credits < creditCost) {\n        return res.status(402).json({ \n          message: \"Insufficient credits\", \n          required: creditCost, \n          available: user.credits \n        });\n      }\n\n      const postData = insertPostSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const post = await storage.createPost(postData);\n      res.status(201).json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid post data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  // Update post\n  app.patch(\"/api/posts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const post = await storage.updatePost(id, updates);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      \n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update post\" });\n    }\n  });\n\n  // Delete post\n  app.delete(\"/api/posts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deletePost(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      \n      res.json({ message: \"Post deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete post\" });\n    }\n  });\n\n  // Generate AI content suggestions\n  app.post(\"/api/ai/suggestions\", async (req, res) => {\n    try {\n      const { prompt } = req.body;\n      \n      if (!prompt || typeof prompt !== \"string\") {\n        return res.status(400).json({ message: \"Prompt is required\" });\n      }\n\n      // Mock AI suggestions based on prompt\n      const suggestions = generateAISuggestions(prompt);\n      \n      const aiSuggestion = await storage.createAiSuggestion({\n        userId: \"demo-user-1\",\n        prompt,\n        suggestions,\n        selected: false,\n      });\n\n      res.json(aiSuggestion);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate AI suggestions\" });\n    }\n  });\n\n  // Generate AI content with enhanced parameters (supports text, image, and video via Vertex AI)\n  app.post(\"/api/ai/generate\", async (req, res) => {\n    try {\n      const {\n        businessName,\n        productName,\n        targetAudience,\n        brandTone,\n        keyMessages,\n        callToAction,\n        platform,\n        isAdvertisement,\n        additionalContext,\n        mediaType,\n        generateImage,\n        generateVideo,\n        visualStyle,\n        colorScheme,\n        imagePrompt: userImagePrompt,\n        videoPrompt,\n        videoDuration,\n        videoTextOverlay,\n      } = req.body;\n\n      // Import AI generation functions from Google Cloud AI\n      const { generateTextContent, generateImage: generateAIImage, generateVideo: generateAIVideo } = await import('./gcloud-ai.js');\n      \n      // Always generate text content\n      const content = await generateTextContent({\n        businessName,\n        productName,\n        targetAudience,\n        brandTone,\n        keyMessages: keyMessages || [],\n        callToAction,\n        platform,\n        isAdvertisement,\n        additionalContext,\n      });\n\n      let imageUrl = null;\n      let videoUrl = null;\n      let generatedImagePrompt = null;\n\n      // Generate media based on mediaType\n      if (mediaType === \"image\" || generateImage) {\n        // Generate image using Imagen4\n        const imageDescriptionPrompt = userImagePrompt || \n          `Create a ${visualStyle || 'modern'} image for ${businessName} ${productName ? `featuring ${productName}` : ''}. \n           Target audience: ${targetAudience || 'general audience'}. \n           ${isAdvertisement ? 'Advertisement style' : 'Organic social media style'}. \n           ${additionalContext || ''}`;\n        \n        generatedImagePrompt = imageDescriptionPrompt;\n        \n        imageUrl = await generateAIImage({\n          prompt: imageDescriptionPrompt,\n          visualStyle: visualStyle || 'modern',\n          colorScheme,\n          businessContext: `${businessName} - ${productName || 'business'}`,\n          aspectRatio: platform === 'Instagram' ? '1:1' : '16:9',\n        });\n      } else if (mediaType === \"video\" || generateVideo) {\n        // Generate video using Veo3 Fast\n        const videoDescriptionPrompt = videoPrompt || userImagePrompt || \n          `Create a ${videoDuration || 15}-second ${visualStyle || 'modern'} video for ${businessName} ${productName ? `showcasing ${productName}` : ''}. \n           Target audience: ${targetAudience || 'general audience'}. \n           ${isAdvertisement ? 'Advertisement format' : 'Organic social media format'}. \n           ${videoTextOverlay ? `Include text overlay: ${videoTextOverlay}` : ''}\n           ${additionalContext || ''}`;\n        \n        videoUrl = await generateAIVideo({\n          prompt: videoDescriptionPrompt,\n          duration: videoDuration || 15,\n          visualStyle: visualStyle || 'modern',\n          includeText: videoTextOverlay,\n          businessContext: `${businessName} - ${productName || 'business'}`,\n        });\n      }\n      \n      res.json({ \n        content, \n        imageUrl, \n        videoUrl,\n        imagePrompt: generatedImagePrompt,\n        mediaType: mediaType || 'text',\n      });\n    } catch (error) {\n      console.error('AI generation error:', error);\n      res.status(500).json({ message: \"Failed to generate AI content\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Get dashboard analytics\n  app.get(\"/api/analytics/dashboard\", async (req, res) => {\n    try {\n      // Return mock analytics data for dashboard\n      const dashboardData = {\n        totalPosts: 47,\n        totalEngagement: 2800,\n        pendingApproval: 3,\n        scheduledPosts: 12,\n        metrics: {\n          totalReach: 15200,\n          engagement: 2800,\n          newFollowers: 1200,\n          clickRate: 4.2,\n        },\n        platformPerformance: [\n          { platform: \"Instagram\", followers: 2100, engagement: 1234, change: 15 },\n          { platform: \"Facebook\", followers: 1800, engagement: 892, change: 8 },\n          { platform: \"X (Twitter)\", followers: 956, engagement: 445, change: -3 },\n          { platform: \"LinkedIn\", followers: 534, engagement: 227, change: 22 },\n        ],\n        engagementOverTime: [\n          { date: \"Jan 1\", value: 60 },\n          { date: \"Jan 5\", value: 80 },\n          { date: \"Jan 10\", value: 45 },\n          { date: \"Jan 15\", value: 95 },\n          { date: \"Jan 20\", value: 70 },\n          { date: \"Jan 25\", value: 110 },\n          { date: \"Today\", value: 85 },\n        ],\n        topPerformingPosts: [\n          {\n            id: \"1\",\n            platform: \"Instagram\",\n            content: \"Morning coffee specials are here! ☕\",\n            publishedAt: \"3 days ago\",\n            engagement: { likes: 324, comments: 45, shares: 12 },\n            engagementRate: 94,\n          },\n          {\n            id: \"2\",\n            platform: \"Facebook\",\n            content: \"Behind the scenes: How we roast our beans\",\n            publishedAt: \"1 week ago\",\n            engagement: { likes: 198, comments: 23, shares: 8 },\n            engagementRate: 87,\n          },\n        ],\n      };\n\n      res.json(dashboardData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Mock AI suggestion generator\nfunction generateAISuggestions(prompt: string): string[] {\n  const suggestions = [\n    \"☕ Start your Monday with our signature blend! What's your go-to morning coffee order? #MondayMotivation #CoffeeLovers\",\n    \"Fresh pastries, warm atmosphere, and the perfect cup of coffee - that's what makes mornings special at our café ✨\",\n    \"Behind the scenes: Our baristas craft each latte with love and precision. Come taste the difference! ☕❤️\",\n    \"🥐 Tuesday treats are here! Enjoy our freshly baked croissants with your favorite coffee blend. #TuesdayTreats #FreshBaked\",\n    \"What's your perfect coffee pairing? Tell us in the comments! ☕🥧 #CoffeePairing #CustomerChoice\",\n    \"Weekend vibes at the café! ☕ Join us for a relaxing coffee break and catch up with friends. #WeekendVibes #CafeLife\",\n  ];\n\n  // Return 3 random suggestions\n  const shuffled = suggestions.sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, 3);\n}\n","size_bytes":20905},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type UpsertUser,\n  type Platform, type InsertPlatform, \n  type Post, type InsertPost, \n  type AiSuggestion, type InsertAiSuggestion, \n  type Analytics, type InsertAnalytics, \n  type Campaign, type InsertCampaign,\n  type SubscriptionPlan, type InsertSubscriptionPlan,\n  type UserSubscription, type InsertUserSubscription,\n  type CreditTransaction, type InsertCreditTransaction,\n  type UsageTracking, type InsertUsageTracking\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateUserCredits(userId: string, creditChange: number, description: string, type: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Platforms\n  getPlatformsByUserId(userId: string): Promise<Platform[]>;\n  getUserPlatforms(userId: string): Promise<Platform[]>;\n  createPlatform(platform: InsertPlatform): Promise<Platform>;\n  updatePlatform(id: string, updates: Partial<Platform>): Promise<Platform | undefined>;\n  connectPlatform(userId: string, connectionData: {\n    platformId: string;\n    accessToken?: string;\n    refreshToken?: string;\n    scope?: string;\n    platformUserId?: string;\n    platformUsername?: string;\n  }): Promise<Platform>;\n  disconnectPlatform(userId: string, platformId: string): Promise<boolean>;\n  \n  // Campaigns\n  getCampaignsByUserId(userId: string): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined>;\n  deleteCampaign(id: string): Promise<boolean>;\n  \n  // Posts\n  getPostsByUserId(userId: string): Promise<Post[]>;\n  getPostsByStatus(userId: string, status: string): Promise<Post[]>;\n  getPostsByCampaignId(campaignId: string): Promise<Post[]>;\n  getPost(id: string): Promise<Post | undefined>;\n  createPost(post: InsertPost): Promise<Post>;\n  updatePost(id: string, updates: Partial<Post>): Promise<Post | undefined>;\n  deletePost(id: string): Promise<boolean>;\n  \n  // AI Suggestions\n  getAiSuggestionsByUserId(userId: string): Promise<AiSuggestion[]>;\n  createAiSuggestion(suggestion: InsertAiSuggestion): Promise<AiSuggestion>;\n  \n  // Analytics\n  getAnalyticsByUserId(userId: string): Promise<Analytics[]>;\n  getAnalyticsByUserAndDateRange(userId: string, startDate: Date, endDate: Date): Promise<Analytics[]>;\n  createAnalytics(analytics: InsertAnalytics): Promise<Analytics>;\n  \n  // Subscription Plans\n  getSubscriptionPlans(): Promise<SubscriptionPlan[]>;\n  getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined>;\n  \n  // User Subscriptions\n  getUserSubscription(userId: string): Promise<UserSubscription | undefined>;\n  createUserSubscription(subscription: InsertUserSubscription): Promise<UserSubscription>;\n  updateUserSubscription(id: string, updates: Partial<UserSubscription>): Promise<UserSubscription | undefined>;\n  \n  // Credit Transactions\n  getCreditTransactionsByUserId(userId: string): Promise<CreditTransaction[]>;\n  createCreditTransaction(transaction: InsertCreditTransaction): Promise<CreditTransaction>;\n  \n  // Usage Tracking\n  getUsageByUserId(userId: string): Promise<UsageTracking[]>;\n  createUsageTracking(usage: InsertUsageTracking): Promise<UsageTracking>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private platforms: Map<string, Platform>;\n  private campaigns: Map<string, Campaign>;\n  private posts: Map<string, Post>;\n  private aiSuggestions: Map<string, AiSuggestion>;\n  private analytics: Map<string, Analytics>;\n  private subscriptionPlans: Map<string, SubscriptionPlan>;\n  private userSubscriptions: Map<string, UserSubscription>;\n  private creditTransactions: Map<string, CreditTransaction>;\n  private usageTracking: Map<string, UsageTracking>;\n\n  constructor() {\n    this.users = new Map();\n    this.platforms = new Map();\n    this.campaigns = new Map();\n    this.posts = new Map();\n    this.aiSuggestions = new Map();\n    this.analytics = new Map();\n    this.subscriptionPlans = new Map();\n    this.userSubscriptions = new Map();\n    this.creditTransactions = new Map();\n    this.usageTracking = new Map();\n    \n    // Initialize with demo user and data\n    this.initializeDemoData();\n    this.initializeSubscriptionPlans();\n  }\n\n  private initializeDemoData() {\n    // Create demo user\n    const demoUser: User = {\n      id: \"demo-user-1\",\n      email: \"demo@example.com\",\n      firstName: \"Demo\",\n      lastName: \"User\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=40&h=40&fit=crop\",\n      businessName: \"Sarah's Corner Café\",\n      credits: 500, // Start with 500 free credits\n      subscriptionId: \"starter\",\n      subscriptionStatus: \"active\",\n      subscriptionEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      totalCreditsUsed: 0,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      trialEndsAt: null,\n      isAdmin: false,\n      adminPassword: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(demoUser.id, demoUser);\n\n    // Create connected platforms\n    const platforms: Platform[] = [\n      {\n        id: randomUUID(),\n        name: \"Instagram\",\n        icon: \"fab fa-instagram\",\n        color: \"#E1306C\",\n        scope: \"user_profile,user_media\",\n        isConnected: true,\n        userId: demoUser.id,\n        accountId: \"cafe_instagram\",\n        accessToken: \"ig_token_123\",\n        refreshToken: \"ig_refresh_123\",\n        tokenExpiry: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),\n        platformUserId: \"123456789\",\n        platformUsername: \"@cafesarah\",\n        connectionStatus: \"active\",\n        lastSyncAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Facebook\",\n        icon: \"fab fa-facebook\",\n        color: \"#1877F2\",\n        scope: \"pages_manage_posts,pages_read_engagement\",\n        isConnected: true,\n        userId: demoUser.id,\n        accountId: \"cafe_facebook\",\n        accessToken: \"fb_token_123\",\n        refreshToken: \"fb_refresh_123\",\n        tokenExpiry: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),\n        platformUserId: \"987654321\",\n        platformUsername: \"Sarah's Corner Café\",\n        connectionStatus: \"active\",\n        lastSyncAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"X (Twitter)\",\n        icon: \"fab fa-twitter\",\n        color: \"#1DA1F2\",\n        scope: \"tweet.read,tweet.write,users.read\",\n        isConnected: true,\n        userId: demoUser.id,\n        accountId: \"cafe_twitter\",\n        accessToken: \"twitter_token_123\",\n        refreshToken: \"twitter_refresh_123\",\n        tokenExpiry: new Date(Date.now() + 120 * 24 * 60 * 60 * 1000),\n        platformUserId: \"555666777\",\n        platformUsername: \"@CafeSarah\",\n        connectionStatus: \"active\",\n        lastSyncAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"TikTok\",\n        icon: \"fab fa-tiktok\",\n        color: \"#000000\",\n        scope: \"user.info.basic,video.upload,video.publish\",\n        isConnected: true,\n        userId: demoUser.id,\n        accountId: \"cafe_tiktok\",\n        accessToken: \"tiktok_token_123\",\n        refreshToken: \"tiktok_refresh_123\",\n        tokenExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        platformUserId: \"333444555\",\n        platformUsername: \"@cafesarah\",\n        connectionStatus: \"active\",\n        lastSyncAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"LinkedIn\",\n        icon: \"fab fa-linkedin\",\n        color: \"#0A66C2\",\n        scope: \"w_member_social,r_liteprofile\",\n        isConnected: true,\n        userId: demoUser.id,\n        accountId: \"cafe_linkedin\",\n        accessToken: \"linkedin_token_123\",\n        refreshToken: \"linkedin_refresh_123\",\n        tokenExpiry: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),\n        platformUserId: \"111222333\",\n        platformUsername: \"Sarah's Corner Café\",\n        connectionStatus: \"active\",\n        lastSyncAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    platforms.forEach(platform => this.platforms.set(platform.id, platform));\n\n    // Create sample posts\n    const posts: Post[] = [\n      {\n        id: randomUUID(),\n        userId: demoUser.id,\n        campaignId: null,\n        content: \"🥞 Weekend brunch is here! Join us for fluffy pancakes, fresh fruit, and the best coffee in town. Perfect way to start your Saturday! #WeekendBrunch #CafeLife #FreshEats\",\n        imageUrl: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?w=1080&h=1080&fit=crop\",\n        videoUrl: null,\n        imagePrompt: null,\n        videoPrompt: null,\n        platforms: [\"Facebook\", \"Instagram\"],\n        status: \"pending\",\n        scheduledFor: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now\n        publishedAt: null,\n        mediaUrls: [\"https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?w=1080&h=1080&fit=crop\"],\n        aiGenerated: true,\n        approvedBy: null,\n        rejectionReason: null,\n        engagementData: null,\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n        updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      },\n      {\n        id: randomUUID(),\n        userId: demoUser.id,\n        campaignId: null,\n        content: \"☕ Coffee Tip Tuesday: Did you know that grinding your coffee beans right before brewing preserves the oils and gives you the freshest flavor? Try it and taste the difference! #CoffeeTips #FreshBrew\",\n        imageUrl: \"https://images.unsplash.com/photo-1514432324607-a09d9b4aefdd?w=1080&h=1080&fit=crop\",\n        videoUrl: null,\n        imagePrompt: null,\n        videoPrompt: null,\n        platforms: [\"X (Twitter)\", \"LinkedIn\"],\n        status: \"pending\",\n        scheduledFor: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now\n        publishedAt: null,\n        mediaUrls: [\"https://images.unsplash.com/photo-1514432324607-a09d9b4aefdd?w=1080&h=1080&fit=crop\"],\n        aiGenerated: false,\n        approvedBy: null,\n        rejectionReason: null,\n        engagementData: null,\n        createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000), // 5 hours ago\n        updatedAt: new Date(Date.now() - 5 * 60 * 60 * 1000),\n      },\n      {\n        id: randomUUID(),\n        userId: demoUser.id,\n        campaignId: null,\n        content: \"✨ Watch our skilled barista create the perfect latte art! Each cup is crafted with love and precision. What's your favorite latte art design? 🎨☕ #LatteArt #BehindTheScenes #CoffeeArt\",\n        imageUrl: \"https://images.unsplash.com/photo-1511920170033-f8396924c348?w=1080&h=1080&fit=crop\",\n        videoUrl: null,\n        imagePrompt: null,\n        videoPrompt: null,\n        platforms: [\"Instagram\"],\n        status: \"pending\",\n        scheduledFor: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000), // 4 days from now\n        publishedAt: null,\n        mediaUrls: [\"https://example.com/latte-art-video.mp4\"],\n        aiGenerated: true,\n        approvedBy: null,\n        rejectionReason: null,\n        engagementData: null,\n        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n        updatedAt: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      },\n      {\n        id: randomUUID(),\n        userId: demoUser.id,\n        campaignId: null,\n        content: \"☕ Start your Monday with our signature blend! What's your go-to morning coffee order? #MondayMotivation #CoffeeLovers\",\n        imageUrl: \"https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=1080&h=1080&fit=crop\",\n        videoUrl: null,\n        imagePrompt: null,\n        videoPrompt: null,\n        platforms: [\"Instagram\", \"Facebook\", \"X (Twitter)\"],\n        status: \"published\",\n        scheduledFor: null,\n        publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n        mediaUrls: [\"https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=1080&h=1080&fit=crop\"],\n        aiGenerated: true,\n        approvedBy: null,\n        rejectionReason: null,\n        engagementData: {\n          likes: 324,\n          comments: 45,\n          shares: 12,\n          clicks: 89,\n          reach: 1580,\n        },\n        createdAt: new Date(Date.now() - 25 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      },\n    ];\n\n    posts.forEach(post => this.posts.set(post.id, post));\n  }\n\n  private initializeSubscriptionPlans() {\n    const plans: SubscriptionPlan[] = [\n      {\n        id: \"free\",\n        name: \"free\",\n        displayName: \"Free Trial\",\n        monthlyPrice: \"0.00\",\n        yearlyPrice: \"0.00\",\n        creditsPerMonth: 50,\n        features: [\n          \"50 credits per month\",\n          \"Basic AI content generation\",\n          \"2 social media platforms\",\n          \"Basic analytics\"\n        ],\n        maxPlatforms: 2,\n        analyticsAccess: true,\n        aiSuggestions: true,\n        prioritySupport: false,\n        teamMembers: 1,\n        videoGeneration: false,\n        createdAt: new Date(),\n      },\n      {\n        id: \"starter\",\n        name: \"starter\",\n        displayName: \"Starter\",\n        monthlyPrice: \"29.00\",\n        yearlyPrice: \"290.00\",\n        creditsPerMonth: 500,\n        features: [\n          \"500 credits per month\",\n          \"Advanced AI content generation\",\n          \"5 social media platforms\",\n          \"Detailed analytics\",\n          \"Image generation (10 per month)\",\n          \"Priority email support\"\n        ],\n        maxPlatforms: 5,\n        analyticsAccess: true,\n        aiSuggestions: true,\n        prioritySupport: true,\n        teamMembers: 1,\n        videoGeneration: false,\n        createdAt: new Date(),\n      },\n      {\n        id: \"professional\",\n        name: \"professional\",\n        displayName: \"Professional\",\n        monthlyPrice: \"99.00\",\n        yearlyPrice: \"990.00\",\n        creditsPerMonth: 2000,\n        features: [\n          \"2,000 credits per month\",\n          \"Premium AI content generation\",\n          \"Unlimited social media platforms\",\n          \"Advanced analytics & reporting\",\n          \"Image generation (50 per month)\",\n          \"Video generation (5 per month)\",\n          \"Priority phone & email support\",\n          \"3 team members\"\n        ],\n        maxPlatforms: 999,\n        analyticsAccess: true,\n        aiSuggestions: true,\n        prioritySupport: true,\n        teamMembers: 3,\n        videoGeneration: true,\n        createdAt: new Date(),\n      },\n      {\n        id: \"enterprise\",\n        name: \"enterprise\",\n        displayName: \"Enterprise\",\n        monthlyPrice: \"299.00\",\n        yearlyPrice: \"2990.00\",\n        creditsPerMonth: 10000,\n        features: [\n          \"10,000 credits per month\",\n          \"Enterprise AI features\",\n          \"Unlimited everything\",\n          \"Custom analytics dashboards\",\n          \"Unlimited image generation\",\n          \"Video generation (50 per month)\",\n          \"Dedicated account manager\",\n          \"24/7 priority support\",\n          \"Unlimited team members\",\n          \"API access\",\n          \"Custom integrations\"\n        ],\n        maxPlatforms: 999,\n        analyticsAccess: true,\n        aiSuggestions: true,\n        prioritySupport: true,\n        teamMembers: 999,\n        videoGeneration: true,\n        createdAt: new Date(),\n      },\n    ];\n\n    plans.forEach(plan => this.subscriptionPlans.set(plan.id, plan));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      id,\n      email: insertUser.email ?? null,\n      firstName: insertUser.firstName ?? null,\n      lastName: insertUser.lastName ?? null,\n      profileImageUrl: insertUser.profileImageUrl ?? null,\n      businessName: insertUser.businessName ?? null,\n      credits: insertUser.credits ?? 50,\n      subscriptionId: insertUser.subscriptionId ?? \"free\",\n      subscriptionStatus: insertUser.subscriptionStatus ?? \"free\",\n      subscriptionEndDate: insertUser.subscriptionEndDate ?? null,\n      totalCreditsUsed: 0,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      trialEndsAt: null,\n      isAdmin: false,\n      adminPassword: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async upsertUser(upsertUser: UpsertUser): Promise<User> {\n    // Check if user exists\n    const existingUser = upsertUser.id ? await this.getUser(upsertUser.id) : null;\n    \n    if (existingUser) {\n      // Update existing user\n      const updatedUser = {\n        ...existingUser,\n        ...upsertUser,\n        updatedAt: new Date(),\n      };\n      this.users.set(existingUser.id, updatedUser);\n      return updatedUser;\n    } else {\n      // Create new user\n      const id = upsertUser.id || randomUUID();\n      const newUser: User = {\n        id,\n        email: upsertUser.email ?? null,\n        firstName: upsertUser.firstName ?? null,\n        lastName: upsertUser.lastName ?? null,\n        profileImageUrl: upsertUser.profileImageUrl ?? null,\n        businessName: upsertUser.businessName ?? null,\n        credits: upsertUser.credits ?? 50,\n        subscriptionId: upsertUser.subscriptionId ?? \"free\",\n        subscriptionStatus: upsertUser.subscriptionStatus ?? \"free\",\n        subscriptionEndDate: upsertUser.subscriptionEndDate ?? null,\n        totalCreditsUsed: upsertUser.totalCreditsUsed ?? 0,\n        stripeCustomerId: upsertUser.stripeCustomerId ?? null,\n        stripeSubscriptionId: upsertUser.stripeSubscriptionId ?? null,\n        trialEndsAt: upsertUser.trialEndsAt ?? null,\n        isAdmin: upsertUser.isAdmin ?? false,\n        adminPassword: upsertUser.adminPassword ?? null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.users.set(id, newUser);\n      return newUser;\n    }\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserCredits(userId: string, creditChange: number, description: string, type: string): Promise<User | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    const newCredits = user.credits + creditChange;\n    const updatedUser = {\n      ...user,\n      credits: newCredits,\n      totalCreditsUsed: creditChange < 0 ? user.totalCreditsUsed + Math.abs(creditChange) : user.totalCreditsUsed,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n\n    // Create credit transaction\n    await this.createCreditTransaction({\n      userId,\n      amount: creditChange,\n      balance: newCredits,\n      type,\n      description,\n      metadata: null,\n    });\n\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  // Platforms\n  async getPlatformsByUserId(userId: string): Promise<Platform[]> {\n    return Array.from(this.platforms.values()).filter(platform => platform.userId === userId);\n  }\n\n  async createPlatform(insertPlatform: InsertPlatform): Promise<Platform> {\n    const id = randomUUID();\n    const platform: Platform = {\n      ...insertPlatform,\n      id,\n      isConnected: insertPlatform.isConnected ?? null,\n      userId: insertPlatform.userId ?? null,\n      accountId: insertPlatform.accountId ?? null,\n      accessToken: insertPlatform.accessToken ?? null,\n      refreshToken: null,\n      tokenExpiry: null,\n      scope: null,\n      platformUserId: null,\n      platformUsername: null,\n      connectionStatus: null,\n      lastSyncAt: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.platforms.set(id, platform);\n    return platform;\n  }\n\n  async updatePlatform(id: string, updates: Partial<Platform>): Promise<Platform | undefined> {\n    const platform = this.platforms.get(id);\n    if (!platform) return undefined;\n    \n    const updatedPlatform = { ...platform, ...updates };\n    this.platforms.set(id, updatedPlatform);\n    return updatedPlatform;\n  }\n\n  async getUserPlatforms(userId: string): Promise<Platform[]> {\n    return Array.from(this.platforms.values()).filter(platform => platform.userId === userId);\n  }\n\n  async connectPlatform(userId: string, connectionData: {\n    platformId: string;\n    accessToken?: string;\n    refreshToken?: string;\n    scope?: string;\n    platformUserId?: string;\n    platformUsername?: string;\n  }): Promise<Platform> {\n    const { platformId, accessToken, refreshToken, scope, platformUserId, platformUsername } = connectionData;\n    \n    // Find existing platform connection for this user and platform\n    const existingPlatform = Array.from(this.platforms.values())\n      .find(p => p.userId === userId && p.name === platformId);\n    \n    if (existingPlatform) {\n      // Update existing connection\n      const updatedPlatform = {\n        ...existingPlatform,\n        isConnected: true,\n        accessToken: accessToken || existingPlatform.accessToken,\n        refreshToken: refreshToken || null,\n        scope: scope || null,\n        platformUserId: platformUserId || null,\n        platformUsername: platformUsername || null,\n        tokenExpiry: null,\n        connectionStatus: \"active\",\n        lastSyncAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.platforms.set(existingPlatform.id, updatedPlatform);\n      return updatedPlatform;\n    } else {\n      // Create new platform connection\n      const platformMap: { [key: string]: { name: string; icon: string; color: string } } = {\n        instagram: { name: \"Instagram\", icon: \"fab fa-instagram\", color: \"#E1306C\" },\n        facebook: { name: \"Facebook\", icon: \"fab fa-facebook\", color: \"#1877F2\" },\n        twitter: { name: \"X (Twitter)\", icon: \"fab fa-twitter\", color: \"#1DA1F2\" },\n        linkedin: { name: \"LinkedIn\", icon: \"fab fa-linkedin\", color: \"#0A66C2\" },\n        tiktok: { name: \"TikTok\", icon: \"fab fa-tiktok\", color: \"#000000\" },\n      };\n      \n      const platformInfo = platformMap[platformId.toLowerCase()] || {\n        name: platformId,\n        icon: \"fab fa-social\",\n        color: \"#333333\"\n      };\n      \n      return await this.createPlatform({\n        name: platformInfo.name,\n        icon: platformInfo.icon,\n        color: platformInfo.color,\n        isConnected: true,\n        userId,\n        accountId: platformUserId || `${platformId}_${userId}`,\n        accessToken: accessToken || null,\n      });\n    }\n  }\n\n  async disconnectPlatform(userId: string, platformId: string): Promise<boolean> {\n    const platforms = Array.from(this.platforms.values())\n      .filter(p => p.userId === userId && (p.name === platformId || p.id === platformId));\n    \n    if (platforms.length === 0) return false;\n    \n    // Update platform to disconnected status\n    for (const platform of platforms) {\n      const updatedPlatform = {\n        ...platform,\n        isConnected: false,\n        accessToken: null,\n        refreshToken: null,\n        connectionStatus: \"disconnected\",\n        updatedAt: new Date(),\n      };\n      this.platforms.set(platform.id, updatedPlatform);\n    }\n    \n    return true;\n  }\n\n  // Campaigns\n  async getCampaignsByUserId(userId: string): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values())\n      .filter(campaign => campaign.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    return this.campaigns.get(id);\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const id = randomUUID();\n    const campaign: Campaign = {\n      ...insertCampaign,\n      id,\n      status: insertCampaign.status || \"draft\",\n      description: insertCampaign.description || null,\n      productName: insertCampaign.productName || null,\n      colorScheme: insertCampaign.colorScheme || null,\n      postsPerDay: insertCampaign.postsPerDay || 1,\n      keyMessages: (insertCampaign.keyMessages as string[]) ?? [],\n      generationProgress: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) return undefined;\n    \n    const updatedCampaign = { ...campaign, ...updates, updatedAt: new Date() };\n    this.campaigns.set(id, updatedCampaign);\n    return updatedCampaign;\n  }\n\n  async deleteCampaign(id: string): Promise<boolean> {\n    return this.campaigns.delete(id);\n  }\n\n  // Posts\n  async getPostsByUserId(userId: string): Promise<Post[]> {\n    return Array.from(this.posts.values())\n      .filter(post => post.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getPostsByStatus(userId: string, status: string): Promise<Post[]> {\n    return Array.from(this.posts.values())\n      .filter(post => post.userId === userId && post.status === status)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getPostsByCampaignId(campaignId: string): Promise<Post[]> {\n    return Array.from(this.posts.values())\n      .filter(post => post.campaignId === campaignId)\n      .sort((a, b) => {\n        // Sort by scheduledFor date if available, otherwise by createdAt\n        const dateA = a.scheduledFor ? new Date(a.scheduledFor) : new Date(a.createdAt!);\n        const dateB = b.scheduledFor ? new Date(b.scheduledFor) : new Date(b.createdAt!);\n        return dateA.getTime() - dateB.getTime();\n      });\n  }\n\n  async getPost(id: string): Promise<Post | undefined> {\n    return this.posts.get(id);\n  }\n\n  async createPost(insertPost: InsertPost): Promise<Post> {\n    const id = randomUUID();\n    const post: Post = {\n      ...insertPost,\n      id,\n      platforms: (insertPost.platforms as string[]) || [\"Instagram\"],\n      campaignId: insertPost.campaignId || null,\n      imageUrl: insertPost.imageUrl || null,\n      videoUrl: insertPost.videoUrl || null,\n      imagePrompt: insertPost.imagePrompt || null,\n      videoPrompt: insertPost.videoPrompt || null,\n      scheduledFor: insertPost.scheduledFor || null,\n      aiGenerated: insertPost.aiGenerated ?? null,\n      publishedAt: null,\n      mediaUrls: (insertPost.mediaUrls as string[]) ?? [],\n      approvedBy: null,\n      rejectionReason: null,\n      engagementData: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.posts.set(id, post);\n    return post;\n  }\n\n  async updatePost(id: string, updates: Partial<Post>): Promise<Post | undefined> {\n    const post = this.posts.get(id);\n    if (!post) return undefined;\n    \n    const updatedPost = { ...post, ...updates, updatedAt: new Date() };\n    this.posts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async deletePost(id: string): Promise<boolean> {\n    return this.posts.delete(id);\n  }\n\n  // AI Suggestions\n  async getAiSuggestionsByUserId(userId: string): Promise<AiSuggestion[]> {\n    return Array.from(this.aiSuggestions.values())\n      .filter(suggestion => suggestion.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createAiSuggestion(insertSuggestion: InsertAiSuggestion): Promise<AiSuggestion> {\n    const id = randomUUID();\n    const suggestion: AiSuggestion = {\n      id,\n      userId: insertSuggestion.userId,\n      prompt: insertSuggestion.prompt,\n      suggestions: insertSuggestion.suggestions as string[],\n      selected: insertSuggestion.selected ?? null,\n      createdAt: new Date(),\n    };\n    this.aiSuggestions.set(id, suggestion);\n    return suggestion;\n  }\n\n  // Analytics\n  async getAnalyticsByUserId(userId: string): Promise<Analytics[]> {\n    return Array.from(this.analytics.values())\n      .filter(analytics => analytics.userId === userId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async getAnalyticsByUserAndDateRange(userId: string, startDate: Date, endDate: Date): Promise<Analytics[]> {\n    return Array.from(this.analytics.values())\n      .filter(analytics => \n        analytics.userId === userId &&\n        new Date(analytics.date) >= startDate &&\n        new Date(analytics.date) <= endDate\n      )\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createAnalytics(insertAnalytics: InsertAnalytics): Promise<Analytics> {\n    const id = randomUUID();\n    const analytics: Analytics = {\n      ...insertAnalytics,\n      id,\n      createdAt: new Date(),\n    };\n    this.analytics.set(id, analytics);\n    return analytics;\n  }\n\n  // Subscription Plans\n  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    return Array.from(this.subscriptionPlans.values());\n  }\n\n  async getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined> {\n    return this.subscriptionPlans.get(id);\n  }\n\n  // User Subscriptions\n  async getUserSubscription(userId: string): Promise<UserSubscription | undefined> {\n    return Array.from(this.userSubscriptions.values())\n      .find(sub => sub.userId === userId && sub.status === \"active\");\n  }\n\n  async createUserSubscription(subscription: InsertUserSubscription): Promise<UserSubscription> {\n    const id = randomUUID();\n    const userSub: UserSubscription = {\n      ...subscription,\n      id,\n      startDate: subscription.startDate || new Date(),\n      autoRenew: subscription.autoRenew ?? true,\n      cancelledAt: subscription.cancelledAt ?? null,\n      nextBillingDate: subscription.nextBillingDate ?? null,\n      createdAt: new Date(),\n    };\n    this.userSubscriptions.set(id, userSub);\n    return userSub;\n  }\n\n  async updateUserSubscription(id: string, updates: Partial<UserSubscription>): Promise<UserSubscription | undefined> {\n    const subscription = this.userSubscriptions.get(id);\n    if (!subscription) return undefined;\n    \n    const updated = { ...subscription, ...updates };\n    this.userSubscriptions.set(id, updated);\n    return updated;\n  }\n\n  // Credit Transactions\n  async getCreditTransactionsByUserId(userId: string): Promise<CreditTransaction[]> {\n    return Array.from(this.creditTransactions.values())\n      .filter(t => t.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createCreditTransaction(transaction: InsertCreditTransaction): Promise<CreditTransaction> {\n    const id = randomUUID();\n    const creditTx: CreditTransaction = {\n      ...transaction,\n      id,\n      metadata: transaction.metadata || null,\n      createdAt: new Date(),\n    };\n    this.creditTransactions.set(id, creditTx);\n    return creditTx;\n  }\n\n  // Usage Tracking\n  async getUsageByUserId(userId: string): Promise<UsageTracking[]> {\n    return Array.from(this.usageTracking.values())\n      .filter(u => u.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createUsageTracking(usage: InsertUsageTracking): Promise<UsageTracking> {\n    const id = randomUUID();\n    const usageTrack: UsageTracking = {\n      ...usage,\n      id,\n      metadata: usage.metadata || null,\n      postId: usage.postId || null,\n      createdAt: new Date(),\n    };\n    this.usageTracking.set(id, usageTrack);\n    return usageTrack;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":32637},"server/stripe-routes.ts":{"content":"import type { Express } from \"express\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { isAuthenticated } from \"./replitAuth\";\n\n// Initialize Stripe\nconst stripe = process.env.STRIPE_SECRET_KEY ? \n  new Stripe(process.env.STRIPE_SECRET_KEY, {\n    apiVersion: \"2025-07-30.basil\",\n  }) : null;\n\nexport function registerStripeRoutes(app: Express) {\n  // Create subscription with Stripe\n  app.post(\"/api/create-subscription\", isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment processing not configured\" });\n    }\n\n    try {\n      const userId = req.user?.claims?.sub;\n      const { planId, billingCycle } = req.body;\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get plan details\n      const plan = await storage.getSubscriptionPlan(planId);\n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      // Create or retrieve Stripe customer\n      let stripeCustomerId = user.stripeCustomerId;\n      if (!stripeCustomerId) {\n        const customer = await stripe.customers.create({\n          email: user.email || undefined,\n          metadata: {\n            userId: userId,\n            businessName: user.businessName || ''\n          }\n        });\n        stripeCustomerId = customer.id;\n        // Update user with Stripe customer ID\n        const updatedUser = await storage.getUser(userId);\n        if (updatedUser) {\n          updatedUser.stripeCustomerId = stripeCustomerId;\n        }\n      }\n\n      const amount = billingCycle === 'monthly' ? \n        parseFloat(plan.monthlyPrice.toString()) : \n        parseFloat(plan.yearlyPrice.toString());\n\n      // Create subscription with trial for free plan\n      const trialDays = planId === 'free' ? 7 : 0;\n      \n      // Create price data inline\n      const subscription = await stripe.subscriptions.create({\n        customer: stripeCustomerId,\n        items: [{ \n          price_data: {\n            currency: 'usd',\n            product: plan.displayName,\n            unit_amount: Math.round(amount * 100),\n            recurring: {\n              interval: billingCycle === 'monthly' ? 'month' : 'year'\n            }\n          } as any\n        }],\n        payment_behavior: 'default_incomplete',\n        payment_settings: { \n          save_default_payment_method: 'on_subscription'\n        },\n        expand: ['latest_invoice.payment_intent'],\n        trial_period_days: trialDays,\n        metadata: {\n          userId,\n          planId,\n          billingCycle\n        }\n      });\n\n      const invoice = (subscription as any).latest_invoice as Stripe.Invoice;\n      const paymentIntent = (invoice as any)?.payment_intent as Stripe.PaymentIntent;\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: paymentIntent?.client_secret || '',\n      });\n    } catch (error: any) {\n      console.error(\"Stripe subscription error:\", error);\n      res.status(500).json({ \n        message: \"Error creating subscription\",\n        error: error.message \n      });\n    }\n  });\n\n  // Verify subscription after payment\n  app.post(\"/api/verify-subscription\", isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment processing not configured\" });\n    }\n\n    try {\n      const userId = req.user?.claims?.sub;\n      const { paymentIntent: paymentIntentId } = req.body;\n\n      // Retrieve payment intent to verify\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (paymentIntent.status !== 'succeeded') {\n        return res.status(400).json({ \n          success: false,\n          message: \"Payment not completed\" \n        });\n      }\n\n      // Get subscription from payment intent metadata\n      const invoiceId = (paymentIntent as any).invoice as string;\n      if (!invoiceId) {\n        return res.status(400).json({ \n          success: false,\n          message: \"No invoice found\" \n        });\n      }\n\n      const invoice = await stripe.invoices.retrieve(invoiceId);\n      const subscriptionId = (invoice as any).subscription as string;\n      \n      if (!subscriptionId) {\n        return res.status(400).json({ \n          success: false,\n          message: \"No subscription found\" \n        });\n      }\n\n      const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n      \n      // Update user with subscription details\n      const planId = subscription.metadata.planId;\n      const billingCycle = subscription.metadata.billingCycle;\n      const plan = await storage.getSubscriptionPlan(planId);\n      \n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      // Calculate end date\n      const endDate = new Date((subscription as any).current_period_end * 1000);\n      \n      // Update user subscription in database\n      const user = await storage.getUser(userId);\n      if (user) {\n        user.stripeSubscriptionId = subscription.id;\n        user.subscriptionId = planId;\n        user.subscriptionStatus = subscription.status === 'trialing' ? 'trial' : 'active';\n        user.subscriptionEndDate = endDate;\n        user.trialEndsAt = subscription.trial_end ? new Date(subscription.trial_end * 1000) : null;\n      }\n\n      // Create subscription record\n      await storage.createUserSubscription({\n        userId,\n        planId,\n        status: subscription.status === 'trialing' ? 'trial' : 'active',\n        billingCycle: billingCycle as 'monthly' | 'yearly',\n        startDate: new Date(subscription.start_date * 1000),\n        endDate,\n        nextBillingDate: endDate,\n        autoRenew: true,\n        cancelledAt: null,\n      });\n\n      // Add credits to user account\n      await storage.updateUserCredits(\n        userId,\n        plan.creditsPerMonth,\n        `${plan.displayName} subscription activated`,\n        \"subscription\"\n      );\n\n      res.json({\n        success: true,\n        subscription: {\n          planName: plan.displayName,\n          billingCycle,\n          credits: plan.creditsPerMonth,\n          nextBillingDate: endDate\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Subscription verification error:\", error);\n      res.status(500).json({ \n        success: false,\n        message: \"Failed to verify subscription\",\n        error: error.message \n      });\n    }\n  });\n\n  // Cancel subscription\n  app.post(\"/api/cancel-subscription\", isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment processing not configured\" });\n    }\n\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !user.stripeSubscriptionId) {\n        return res.status(404).json({ message: \"No active subscription found\" });\n      }\n\n      // Cancel at period end (user keeps access until end of billing period)\n      const subscription = await stripe.subscriptions.update(\n        user.stripeSubscriptionId,\n        { cancel_at_period_end: true }\n      );\n\n      // Update user status\n      if (user) {\n        user.subscriptionStatus = 'cancelled';\n      }\n\n      res.json({\n        message: \"Subscription cancelled successfully\",\n        endsAt: new Date((subscription as any).current_period_end * 1000)\n      });\n    } catch (error: any) {\n      console.error(\"Subscription cancellation error:\", error);\n      res.status(500).json({ \n        message: \"Failed to cancel subscription\",\n        error: error.message \n      });\n    }\n  });\n}","size_bytes":7672},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, json, jsonb, integer, real, date, decimal, index, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for OAuth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table with OAuth and credit system\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  businessName: text(\"business_name\"),\n  // Credit system fields\n  credits: integer(\"credits\").notNull().default(50), // Start with 50 free credits\n  subscriptionId: varchar(\"subscription_id\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"free\"), // free, trial, active, cancelled, expired\n  subscriptionEndDate: timestamp(\"subscription_end_date\"),\n  totalCreditsUsed: integer(\"total_credits_used\").notNull().default(0),\n  // Stripe fields\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  trialEndsAt: timestamp(\"trial_ends_at\"),\n  // Admin fields\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n  adminPassword: varchar(\"admin_password\"), // For admin-only login\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const platforms = pgTable(\"platforms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n  isConnected: boolean(\"is_connected\").default(false),\n  userId: varchar(\"user_id\").references(() => users.id),\n  accountId: text(\"account_id\"),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  tokenExpiry: timestamp(\"token_expiry\"),\n  scope: text(\"scope\"), // OAuth permissions granted\n  platformUserId: text(\"platform_user_id\"), // User ID on the platform\n  platformUsername: text(\"platform_username\"), // Username on the platform\n  connectionStatus: text(\"connection_status\").default(\"active\"), // active, expired, revoked, error\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  platform: text(\"platform\").notNull(),\n  businessName: text(\"business_name\").notNull(),\n  productName: text(\"product_name\"),\n  targetAudience: text(\"target_audience\").notNull(),\n  campaignGoals: text(\"campaign_goals\").notNull(),\n  brandTone: text(\"brand_tone\").notNull(),\n  keyMessages: json(\"key_messages\").$type<string[]>().default([]),\n  visualStyle: text(\"visual_style\").notNull(),\n  colorScheme: text(\"color_scheme\"),\n  callToAction: text(\"call_to_action\").notNull(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, generating, review, active, completed, paused\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  postsPerDay: integer(\"posts_per_day\").notNull().default(2),\n  generationProgress: integer(\"generation_progress\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  content: text(\"content\").notNull(),\n  imageUrl: text(\"image_url\"),\n  videoUrl: text(\"video_url\"),\n  imagePrompt: text(\"image_prompt\"),\n  videoPrompt: text(\"video_prompt\"),\n  platforms: json(\"platforms\").$type<string[]>().notNull(),\n  status: text(\"status\").notNull(), // draft, pending, approved, rejected, published, scheduled\n  scheduledFor: timestamp(\"scheduled_for\"),\n  publishedAt: timestamp(\"published_at\"),\n  mediaUrls: json(\"media_urls\").$type<string[]>().default([]),\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  rejectionReason: text(\"rejection_reason\"),\n  engagementData: json(\"engagement_data\").$type<{\n    likes: number;\n    comments: number;\n    shares: number;\n    clicks: number;\n    reach: number;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiSuggestions = pgTable(\"ai_suggestions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  prompt: text(\"prompt\").notNull(),\n  suggestions: json(\"suggestions\").$type<string[]>().notNull(),\n  selected: boolean(\"selected\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  platform: text(\"platform\").notNull(),\n  metric: text(\"metric\").notNull(), // engagement, reach, followers, clicks\n  value: integer(\"value\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Subscription Plans\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  displayName: varchar(\"display_name\").notNull(),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 10, scale: 2 }).notNull(),\n  yearlyPrice: decimal(\"yearly_price\", { precision: 10, scale: 2 }).notNull(),\n  creditsPerMonth: integer(\"credits_per_month\").notNull(),\n  features: json(\"features\").$type<string[]>().notNull(),\n  maxPlatforms: integer(\"max_platforms\").notNull(),\n  analyticsAccess: boolean(\"analytics_access\").notNull().default(false),\n  aiSuggestions: boolean(\"ai_suggestions\").notNull().default(false),\n  prioritySupport: boolean(\"priority_support\").notNull().default(false),\n  teamMembers: integer(\"team_members\").notNull().default(1),\n  videoGeneration: boolean(\"video_generation\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Subscriptions\nexport const userSubscriptions = pgTable(\"user_subscriptions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  planId: varchar(\"plan_id\").notNull().references(() => subscriptionPlans.id),\n  status: varchar(\"status\").notNull(), // active, cancelled, expired, trial\n  billingCycle: varchar(\"billing_cycle\").notNull(), // monthly, yearly\n  startDate: timestamp(\"start_date\").notNull().defaultNow(),\n  endDate: timestamp(\"end_date\").notNull(),\n  cancelledAt: timestamp(\"cancelled_at\"),\n  nextBillingDate: timestamp(\"next_billing_date\"),\n  autoRenew: boolean(\"auto_renew\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Credit Transactions\nexport const creditTransactions = pgTable(\"credit_transactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(), // positive for credits added, negative for credits used\n  balance: integer(\"balance\").notNull(), // balance after transaction\n  type: varchar(\"type\").notNull(), // purchase, subscription, usage, refund, bonus\n  description: text(\"description\").notNull(),\n  metadata: json(\"metadata\").$type<Record<string, any>>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Usage Tracking\nexport const usageTracking = pgTable(\"usage_tracking\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  featureType: varchar(\"feature_type\").notNull(), // text_generation, image_generation, video_generation, post_scheduling\n  creditsUsed: integer(\"credits_used\").notNull(),\n  metadata: json(\"metadata\").$type<Record<string, any>>(),\n  postId: varchar(\"post_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  businessName: true,\n  credits: true,\n  subscriptionId: true,\n  subscriptionStatus: true,\n  subscriptionEndDate: true,\n});\n\nexport const insertPlatformSchema = createInsertSchema(platforms).pick({\n  name: true,\n  icon: true,\n  color: true,\n  isConnected: true,\n  userId: true,\n  accountId: true,\n  accessToken: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).pick({\n  userId: true,\n  name: true,\n  description: true,\n  platform: true,\n  businessName: true,\n  productName: true,\n  targetAudience: true,\n  campaignGoals: true,\n  brandTone: true,\n  keyMessages: true,\n  visualStyle: true,\n  colorScheme: true,\n  callToAction: true,\n  status: true,\n  startDate: true,\n  endDate: true,\n  postsPerDay: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).pick({\n  userId: true,\n  campaignId: true,\n  content: true,\n  imageUrl: true,\n  videoUrl: true,\n  imagePrompt: true,\n  videoPrompt: true,\n  platforms: true,\n  status: true,\n  scheduledFor: true,\n  mediaUrls: true,\n  aiGenerated: true,\n});\n\nexport const insertAiSuggestionSchema = createInsertSchema(aiSuggestions).pick({\n  userId: true,\n  prompt: true,\n  suggestions: true,\n  selected: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).pick({\n  userId: true,\n  platform: true,\n  metric: true,\n  value: true,\n  date: true,\n});\n\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).pick({\n  id: true,\n  name: true,\n  displayName: true,\n  monthlyPrice: true,\n  yearlyPrice: true,\n  creditsPerMonth: true,\n  features: true,\n  maxPlatforms: true,\n  analyticsAccess: true,\n  aiSuggestions: true,\n  prioritySupport: true,\n  teamMembers: true,\n  videoGeneration: true,\n});\n\nexport const insertUserSubscriptionSchema = createInsertSchema(userSubscriptions).pick({\n  userId: true,\n  planId: true,\n  status: true,\n  billingCycle: true,\n  startDate: true,\n  endDate: true,\n  cancelledAt: true,\n  nextBillingDate: true,\n  autoRenew: true,\n});\n\nexport const insertCreditTransactionSchema = createInsertSchema(creditTransactions).pick({\n  userId: true,\n  amount: true,\n  balance: true,\n  type: true,\n  description: true,\n  metadata: true,\n});\n\nexport const insertUsageTrackingSchema = createInsertSchema(usageTracking).pick({\n  userId: true,\n  featureType: true,\n  creditsUsed: true,\n  metadata: true,\n  postId: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Platform = typeof platforms.$inferSelect;\nexport type InsertPlatform = z.infer<typeof insertPlatformSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Post = typeof posts.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type AiSuggestion = typeof aiSuggestions.$inferSelect;\nexport type InsertAiSuggestion = z.infer<typeof insertAiSuggestionSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\nexport type InsertSubscriptionPlan = z.infer<typeof insertSubscriptionPlanSchema>;\nexport type UserSubscription = typeof userSubscriptions.$inferSelect;\nexport type InsertUserSubscription = z.infer<typeof insertUserSubscriptionSchema>;\nexport type CreditTransaction = typeof creditTransactions.$inferSelect;\nexport type InsertCreditTransaction = z.infer<typeof insertCreditTransactionSchema>;\nexport type UsageTracking = typeof usageTracking.$inferSelect;\nexport type InsertUsageTracking = z.infer<typeof insertUsageTrackingSchema>;\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  posts: many(posts),\n  platforms: many(platforms),\n  campaigns: many(campaigns),\n  subscriptions: many(userSubscriptions),\n  creditTransactions: many(creditTransactions),\n  usageTracking: many(usageTracking),\n}));\n\nexport const userSubscriptionsRelations = relations(userSubscriptions, ({ one }) => ({\n  user: one(users, {\n    fields: [userSubscriptions.userId],\n    references: [users.id],\n  }),\n  plan: one(subscriptionPlans, {\n    fields: [userSubscriptions.planId],\n    references: [subscriptionPlans.id],\n  }),\n}));\n\nexport const creditTransactionsRelations = relations(creditTransactions, ({ one }) => ({\n  user: one(users, {\n    fields: [creditTransactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const usageTrackingRelations = relations(usageTracking, ({ one }) => ({\n  user: one(users, {\n    fields: [usageTracking.userId],\n    references: [users.id],\n  }),\n}));","size_bytes":13433},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport NotFound from \"./pages/not-found\";\nimport Dashboard from \"./pages/dashboard\";\nimport CreateContent from \"./pages/create-content\";\nimport Calendar from \"./pages/calendar\";\nimport Approval from \"./pages/approval\";\nimport Analytics from \"./pages/analytics\";\nimport Library from \"./pages/library\";\nimport Settings from \"./pages/settings\";\nimport Campaigns from \"./pages/campaigns\";\nimport Pricing from \"./pages/pricing\";\nimport Landing from \"./pages/landing\";\nimport Subscribe from \"./pages/subscribe\";\nimport SubscriptionSuccess from \"./pages/subscription-success\";\nimport AdminLogin from \"./pages/admin-login\";\nimport AdminDashboard from \"./pages/admin-dashboard\";\nimport ConnectPlatforms from \"./pages/connect-platforms\";\nimport Sidebar from \"./components/layout/sidebar\";\nimport Header from \"./components/layout/header\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Show landing page for non-authenticated users\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/pricing\" component={Pricing} />\n        <Route path=\"/admin/login\" component={AdminLogin} />\n        <Route path=\"/admin/dashboard\" component={AdminLogin} />\n        <Route component={Landing} />\n      </Switch>\n    );\n  }\n\n  // Show authenticated app\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/create\" component={CreateContent} />\n          <Route path=\"/calendar\" component={Calendar} />\n          <Route path=\"/approval\" component={Approval} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/library\" component={Library} />\n          <Route path=\"/campaigns\" component={Campaigns} />\n          <Route path=\"/pricing\" component={Pricing} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n          <Route path=\"/subscription-success\" component={SubscriptionSuccess} />\n          <Route path=\"/connect-platforms\" component={ConnectPlatforms} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3257},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Modern Dark Theme as Default */\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(263, 90%, 51%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 25%, 27%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(223, 47%, 11%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(263, 90%, 51%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(215, 27%, 17%);\n  --input: hsl(215, 27%, 17%);\n  --ring: hsl(263, 90%, 51%);\n  --chart-1: hsl(263, 90%, 51%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(42, 95%, 58%);\n  --chart-4: hsl(280, 60%, 50%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(224, 71%, 4%);\n  --sidebar-foreground: hsl(213, 31%, 91%);\n  --sidebar-primary: hsl(263, 90%, 51%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(224, 71%, 8%);\n  --sidebar-accent-foreground: hsl(263, 90%, 51%);\n  --sidebar-border: hsl(215, 27%, 17%);\n  --sidebar-ring: hsl(263, 90%, 51%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-sm: 0px 1px 2px 0px hsl(0, 0%, 0% / 0.05);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0% / 0.1), 0px 1px 2px 0px hsl(0, 0%, 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0% / 0.1), 0px 2px 4px -1px hsl(0, 0%, 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0% / 0.1), 0px 4px 6px -2px hsl(0, 0%, 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0% / 0.1), 0px 10px 10px -5px hsl(0, 0%, 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Custom colors for social platforms */\n  --instagram: hsl(309, 88%, 52%);\n  --facebook: hsl(217, 89%, 61%);\n  --twitter: hsl(203, 89%, 53%);\n  --tiktok: hsl(0, 0%, 0%);\n  --linkedin: hsl(201, 100%, 35%);\n  \n  /* Modern gradients */\n  --gradient-primary: linear-gradient(135deg, hsl(263, 90%, 51%), hsl(280, 80%, 60%));\n  --gradient-secondary: linear-gradient(135deg, hsl(224, 71%, 4%), hsl(223, 47%, 11%));\n  --gradient-accent: linear-gradient(135deg, hsl(280, 60%, 50%), hsl(300, 60%, 50%));\n}\n\n.dark {\n  /* Ultra Modern Dark Theme */\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 50%, 7%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(263, 90%, 51%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 25%, 27%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(223, 47%, 11%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(263, 70%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(263, 90%, 51%);\n  --sidebar: hsl(224, 71%, 4%);\n  --sidebar-foreground: hsl(213, 31%, 91%);\n  --sidebar-primary: hsl(263, 90%, 51%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(224, 71%, 8%);\n  --sidebar-accent-foreground: hsl(263, 90%, 51%);\n  --sidebar-border: hsl(217, 33%, 17%);\n  --sidebar-ring: hsl(263, 90%, 51%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n}\n\n@layer utilities {\n  .text-instagram {\n    color: var(--instagram);\n  }\n  \n  .text-facebook {\n    color: var(--facebook);\n  }\n  \n  .text-twitter {\n    color: var(--twitter);\n  }\n  \n  .text-tiktok {\n    color: var(--tiktok);\n  }\n  \n  .text-linkedin {\n    color: var(--linkedin);\n  }\n\n  .bg-instagram {\n    background-color: var(--instagram);\n  }\n  \n  .bg-facebook {\n    background-color: var(--facebook);\n  }\n  \n  .bg-twitter {\n    background-color: var(--twitter);\n  }\n  \n  .bg-tiktok {\n    background-color: var(--tiktok);\n  }\n  \n  .bg-linkedin {\n    background-color: var(--linkedin);\n  }\n\n  .hover-lift {\n    transition: transform 0.2s ease-in-out;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-2px);\n  }\n  \n  .chart-bar {\n    transition: height 0.3s ease-in-out;\n  }\n}\n","size_bytes":4787},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/ai-service.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AiSuggestion {\n  id: string;\n  content: string;\n  confidence: number;\n  platforms: string[];\n}\n\nexport interface AiContentRequest {\n  prompt: string;\n  platforms?: string[];\n  tone?: 'friendly' | 'professional' | 'casual' | 'enthusiastic';\n  contentType?: 'post' | 'caption' | 'story' | 'article';\n  keywords?: string[];\n  maxLength?: number;\n}\n\nexport interface AiAnalysisResult {\n  sentiment: 'positive' | 'neutral' | 'negative';\n  engagementPrediction: number;\n  suggestions: string[];\n  hashtags: string[];\n  bestTimeToPost?: string;\n}\n\nclass AiService {\n  /**\n   * Generate AI content suggestions based on a prompt\n   */\n  async generateContent(request: AiContentRequest): Promise<AiSuggestion[]> {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/ai/suggestions\", request);\n      const data = await response.json();\n      \n      return data.suggestions.map((content: string, index: number) => ({\n        id: `suggestion-${index}`,\n        content,\n        confidence: Math.random() * 0.3 + 0.7, // Mock confidence between 0.7-1.0\n        platforms: request.platforms || ['Instagram', 'Facebook'],\n      }));\n    } catch (error) {\n      console.error('Failed to generate AI content:', error);\n      throw new Error('Failed to generate content suggestions');\n    }\n  }\n\n  /**\n   * Analyze content for engagement potential and optimization\n   */\n  async analyzeContent(content: string, platforms: string[]): Promise<AiAnalysisResult> {\n    try {\n      // This would typically be a real AI analysis endpoint\n      // For now, we'll return mock analysis based on content characteristics\n      \n      const wordCount = content.split(' ').length;\n      // Check for common emoji ranges using simpler regex\n      const hasEmojis = /[\\u2600-\\u26FF]|[\\u2700-\\u27BF]/.test(content) || content.match(/:\\w+:/) !== null;\n      const hasHashtags = content.includes('#');\n      const hasQuestions = content.includes('?');\n      const hasCallToAction = /\\b(visit|check|try|buy|order|book|call|contact|follow|share|like|comment)\\b/i.test(content);\n      \n      // Calculate engagement prediction based on content features\n      let engagementScore = 0.5; // Base score\n      \n      if (wordCount >= 10 && wordCount <= 150) engagementScore += 0.1;\n      if (hasEmojis) engagementScore += 0.15;\n      if (hasHashtags) engagementScore += 0.1;\n      if (hasQuestions) engagementScore += 0.1;\n      if (hasCallToAction) engagementScore += 0.15;\n      \n      // Determine sentiment\n      const positiveWords = ['great', 'amazing', 'love', 'excited', 'happy', 'wonderful', 'fantastic'];\n      const negativeWords = ['bad', 'terrible', 'hate', 'disappointed', 'sad', 'awful'];\n      \n      const lowerContent = content.toLowerCase();\n      const positiveCount = positiveWords.filter(word => lowerContent.includes(word)).length;\n      const negativeCount = negativeWords.filter(word => lowerContent.includes(word)).length;\n      \n      let sentiment: 'positive' | 'neutral' | 'negative' = 'neutral';\n      if (positiveCount > negativeCount) sentiment = 'positive';\n      else if (negativeCount > positiveCount) sentiment = 'negative';\n      \n      // Generate suggestions based on analysis\n      const suggestions: string[] = [];\n      if (!hasEmojis) suggestions.push(\"Consider adding emojis to make your post more engaging\");\n      if (!hasHashtags) suggestions.push(\"Add relevant hashtags to increase discoverability\");\n      if (wordCount > 200) suggestions.push(\"Consider shortening your post for better engagement\");\n      if (!hasCallToAction) suggestions.push(\"Include a call-to-action to encourage interaction\");\n      if (!hasQuestions) suggestions.push(\"Ask a question to boost comments and engagement\");\n      \n      // Extract or suggest hashtags\n      const existingHashtags = content.match(/#\\w+/g) || [];\n      const suggestedHashtags = this.generateHashtags(content, platforms);\n      \n      return {\n        sentiment,\n        engagementPrediction: Math.min(Math.max(engagementScore, 0), 1),\n        suggestions,\n        hashtags: [...existingHashtags, ...suggestedHashtags].slice(0, 10),\n        bestTimeToPost: this.getBestPostingTime(platforms[0]),\n      };\n    } catch (error) {\n      console.error('Failed to analyze content:', error);\n      throw new Error('Failed to analyze content');\n    }\n  }\n\n  /**\n   * Generate relevant hashtags for content\n   */\n  private generateHashtags(content: string, platforms: string[]): string[] {\n    const commonHashtags = {\n      'Instagram': ['#instagood', '#photooftheday', '#love', '#instadaily', '#follow'],\n      'Facebook': ['#facebook', '#social', '#community', '#share', '#connect'],\n      'X (Twitter)': ['#twitter', '#trending', '#news', '#follow', '#retweet'],\n      'LinkedIn': ['#linkedin', '#professional', '#business', '#networking', '#career'],\n      'TikTok': ['#tiktok', '#viral', '#trending', '#fyp', '#foryou'],\n    };\n\n    // Extract keywords from content for context-aware hashtags\n    const words = content.toLowerCase().split(/\\s+/);\n    const contentHashtags: string[] = [];\n    \n    // Common business/content keywords to hashtag mappings\n    const keywordHashtags: { [key: string]: string[] } = {\n      'coffee': ['#coffee', '#coffeelover', '#cafe', '#espresso', '#latte'],\n      'food': ['#food', '#foodie', '#delicious', '#yummy', '#restaurant'],\n      'business': ['#business', '#entrepreneur', '#success', '#growth', '#startup'],\n      'happy': ['#happy', '#joy', '#positive', '#smile', '#good'],\n      'morning': ['#morning', '#goodmorning', '#fresh', '#start', '#day'],\n      'weekend': ['#weekend', '#relax', '#fun', '#enjoy', '#time'],\n    };\n\n    // Find relevant hashtags based on content\n    words.forEach(word => {\n      if (keywordHashtags[word]) {\n        contentHashtags.push(...keywordHashtags[word].slice(0, 2));\n      }\n    });\n\n    // Combine platform-specific and content-specific hashtags\n    const platformHashtags = platforms[0] ? commonHashtags[platforms[0] as keyof typeof commonHashtags] || [] : [];\n    \n    return Array.from(new Set([...contentHashtags, ...platformHashtags])).slice(0, 5);\n  }\n\n  /**\n   * Get optimal posting time for a platform\n   */\n  private getBestPostingTime(platform: string): string {\n    const optimalTimes: { [key: string]: string } = {\n      'Instagram': '11:00 AM - 1:00 PM or 7:00 PM - 9:00 PM',\n      'Facebook': '1:00 PM - 3:00 PM on weekdays',\n      'X (Twitter)': '9:00 AM - 10:00 AM or 7:00 PM - 9:00 PM',\n      'LinkedIn': '8:00 AM - 10:00 AM or 12:00 PM - 2:00 PM on weekdays',\n      'TikTok': '6:00 AM - 10:00 AM or 7:00 PM - 9:00 PM',\n    };\n\n    return optimalTimes[platform] || '12:00 PM - 2:00 PM';\n  }\n\n  /**\n   * Optimize content for specific platforms\n   */\n  async optimizeForPlatform(content: string, platform: string): Promise<string> {\n    const platformLimits: { [key: string]: number } = {\n      'X (Twitter)': 280,\n      'Instagram': 2200,\n      'Facebook': 8000,\n      'LinkedIn': 3000,\n      'TikTok': 2200,\n    };\n\n    const limit = platformLimits[platform];\n    if (!limit) return content;\n\n    // If content is within limit, return as-is\n    if (content.length <= limit) return content;\n\n    // Truncate and add ellipsis if too long\n    const truncated = content.substring(0, limit - 3);\n    const lastSpace = truncated.lastIndexOf(' ');\n    \n    return lastSpace > 0 ? truncated.substring(0, lastSpace) + '...' : truncated + '...';\n  }\n\n  /**\n   * Generate content ideas based on trending topics\n   */\n  async getTrendingTopics(platforms: string[]): Promise<string[]> {\n    // This would typically fetch real trending data\n    // For now, return mock trending topics\n    const mockTrends = [\n      'Sustainable business practices',\n      'Work-life balance tips',\n      'Local community support',\n      'Behind-the-scenes content',\n      'Customer success stories',\n      'Industry insights',\n      'Seasonal promotions',\n      'Employee spotlight',\n      'Product tutorials',\n      'Company milestones',\n    ];\n\n    return mockTrends.slice(0, 5);\n  }\n}\n\nexport const aiService = new AiService();\n","size_bytes":8125},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, CreditCard, Package, Settings, LogOut, \n  Plus, Minus, Trash2, Shield, Activity \n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface User {\n  id: string;\n  email: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  businessName: string | null;\n  credits: number;\n  subscriptionId: string | null;\n  subscriptionStatus: string | null;\n  isAdmin: boolean;\n  createdAt: string;\n}\n\nexport default function AdminDashboard() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [creditAmount, setCreditAmount] = useState<Record<string, number>>({});\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    checkAdminAccess();\n    fetchUsers();\n  }, []);\n\n  const checkAdminAccess = async () => {\n    try {\n      const response = await fetch(\"/api/admin/check\", {\n        credentials: \"include\",\n      });\n      const data = await response.json();\n      \n      if (!data.isAdmin) {\n        toast({\n          title: \"Access Denied\",\n          description: \"Admin privileges required\",\n          variant: \"destructive\",\n        });\n        navigate(\"/\");\n      } else {\n        setIsAdmin(true);\n      }\n    } catch (error) {\n      navigate(\"/\");\n    }\n  };\n\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch(\"/api/admin/users\", {\n        credentials: \"include\",\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setUsers(data);\n      } else {\n        throw new Error(\"Failed to fetch users\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load users\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUpdateCredits = async (userId: string, amount: number) => {\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/credits`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          credits: amount,\n          description: `Admin adjustment: ${amount > 0 ? '+' : ''}${amount} credits`,\n        }),\n        credentials: \"include\",\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Credits Updated\",\n          description: `Successfully updated user credits`,\n        });\n        fetchUsers();\n        setCreditAmount(prev => ({ ...prev, [userId]: 0 }));\n      } else {\n        throw new Error(\"Failed to update credits\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update credits\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteUser = async (userId: string) => {\n    try {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"User Deleted\",\n          description: \"User has been removed from the system\",\n        });\n        fetchUsers();\n      } else {\n        throw new Error(\"Failed to delete user\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (!isAdmin) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent\"></div>\n      </div>\n    );\n  }\n\n  const totalUsers = users.length;\n  const activeSubscriptions = users.filter(u => u.subscriptionStatus === 'active').length;\n  const totalCreditsInSystem = users.reduce((sum, u) => sum + u.credits, 0);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      {/* Admin Header */}\n      <div className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Shield className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              data-testid=\"button-admin-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalUsers}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Subscriptions</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{activeSubscriptions}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Credits</CardTitle>\n              <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalCreditsInSystem.toLocaleString()}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Management</CardTitle>\n            <CardDescription>Manage all users and their subscriptions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Business</TableHead>\n                    <TableHead>Plan</TableHead>\n                    <TableHead>Credits</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium flex items-center gap-2\">\n                            {user.email || \"No email\"}\n                            {user.isAdmin && (\n                              <Badge variant=\"default\" className=\"ml-2\">\n                                Admin\n                              </Badge>\n                            )}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {user.firstName} {user.lastName}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{user.businessName || \"—\"}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {user.subscriptionId || \"free\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-semibold\">{user.credits}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={user.subscriptionStatus === 'active' ? 'default' : 'secondary'}\n                        >\n                          {user.subscriptionStatus || 'free'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Credits\"\n                            className=\"w-20\"\n                            value={creditAmount[user.id] || ''}\n                            onChange={(e) => setCreditAmount(prev => ({\n                              ...prev,\n                              [user.id]: parseInt(e.target.value) || 0\n                            }))}\n                            data-testid={`input-credits-${user.id}`}\n                          />\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUpdateCredits(user.id, Math.abs(creditAmount[user.id] || 0))}\n                            disabled={!creditAmount[user.id]}\n                            data-testid={`button-add-credits-${user.id}`}\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUpdateCredits(user.id, -Math.abs(creditAmount[user.id] || 0))}\n                            disabled={!creditAmount[user.id]}\n                            data-testid={`button-remove-credits-${user.id}`}\n                          >\n                            <Minus className=\"h-3 w-3\" />\n                          </Button>\n                          {!user.isAdmin && (\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  data-testid={`button-delete-user-${user.id}`}\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete User?</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    This action cannot be undone. This will permanently delete the user\n                                    and all associated data.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() => handleDeleteUser(user.id)}\n                                  >\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12951},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertCircle, Lock } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminLogin() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n        credentials: \"include\",\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Admin Login Successful\",\n          description: \"Welcome back, administrator!\",\n        });\n        \n        // Redirect to admin dashboard\n        navigate(\"/admin/dashboard\");\n        \n        // Force a full page reload to update authentication state\n        setTimeout(() => {\n          window.location.href = \"/admin/dashboard\";\n        }, 100);\n      } else {\n        setError(data.message || \"Invalid admin credentials\");\n      }\n    } catch (error) {\n      setError(\"Failed to connect to server\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-950 dark:to-gray-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 p-3 rounded-full\">\n              <Lock className=\"h-6 w-6\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">Admin Login</CardTitle>\n          <CardDescription className=\"text-center\">\n            Access the administrator dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"admin@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                disabled={isLoading}\n                data-testid=\"input-admin-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter admin password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                disabled={isLoading}\n                data-testid=\"input-admin-password\"\n              />\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-admin-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Admin Login\"}\n            </Button>\n            \n            <div className=\"text-center text-sm text-gray-500 dark:text-gray-400 mt-4\">\n              <button\n                type=\"button\"\n                onClick={() => navigate(\"/\")}\n                className=\"hover:underline\"\n                data-testid=\"link-back-home\"\n              >\n                Back to Home\n              </button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4525},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, Heart, Users, MousePointer, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface AnalyticsData {\n  metrics: {\n    totalReach: number;\n    engagement: number;\n    newFollowers: number;\n    clickRate: number;\n  };\n  platformPerformance: Array<{\n    platform: string;\n    followers: number;\n    engagement: number;\n    change: number;\n  }>;\n  engagementOverTime: Array<{\n    date: string;\n    value: number;\n  }>;\n  topPerformingPosts: Array<{\n    id: string;\n    platform: string;\n    content: string;\n    publishedAt: string;\n    engagement: {\n      likes: number;\n      comments: number;\n      shares: number;\n    };\n    engagementRate: number;\n  }>;\n}\n\nexport default function Analytics() {\n  const { data: analyticsData, isLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-xl\" />\n            ))}\n          </div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {[...Array(2)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-muted rounded-xl\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const chartData = analyticsData?.engagementOverTime || [];\n  const maxValue = Math.max(...chartData.map(d => d.value));\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Analytics Overview */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Performance Analytics</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Track your social media performance across all platforms\n              </p>\n            </div>\n            <Select defaultValue=\"30\">\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7\">Last 7 days</SelectItem>\n                <SelectItem value=\"30\">Last 30 days</SelectItem>\n                <SelectItem value=\"90\">Last 90 days</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Key Performance Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Eye className=\"text-blue-600 dark:text-blue-400 w-8 h-8\" />\n              </div>\n              <p className=\"text-2xl font-bold text-foreground\">\n                {analyticsData?.metrics.totalReach.toLocaleString() || \"0\"}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Total Reach</p>\n              <div className=\"flex items-center justify-center mt-1\">\n                <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                <span className=\"text-xs text-green-600\">+18% from last period</span>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Heart className=\"text-green-600 dark:text-green-400 w-8 h-8\" />\n              </div>\n              <p className=\"text-2xl font-bold text-foreground\">\n                {analyticsData?.metrics.engagement.toLocaleString() || \"0\"}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Engagement</p>\n              <div className=\"flex items-center justify-center mt-1\">\n                <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                <span className=\"text-xs text-green-600\">+23% from last period</span>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Users className=\"text-purple-600 dark:text-purple-400 w-8 h-8\" />\n              </div>\n              <p className=\"text-2xl font-bold text-foreground\">\n                {analyticsData?.metrics.newFollowers.toLocaleString() || \"0\"}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">New Followers</p>\n              <div className=\"flex items-center justify-center mt-1\">\n                <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                <span className=\"text-xs text-green-600\">+12% from last period</span>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-amber-100 dark:bg-amber-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <MousePointer className=\"text-amber-600 dark:text-amber-400 w-8 h-8\" />\n              </div>\n              <p className=\"text-2xl font-bold text-foreground\">\n                {analyticsData?.metrics.clickRate}%\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Click Rate</p>\n              <div className=\"flex items-center justify-center mt-1\">\n                <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                <span className=\"text-xs text-red-600\">-2% from last period</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Engagement Chart & Platform Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Engagement Over Time</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-end justify-between space-x-2\">\n              {chartData.map((data, index) => (\n                <div key={index} className=\"flex flex-col items-center space-y-2\">\n                  <div\n                    className=\"bg-primary w-8 chart-bar transition-all duration-300 hover:opacity-80\"\n                    style={{ height: `${(data.value / maxValue) * 200}px` }}\n                  />\n                  <span className=\"text-xs text-muted-foreground\">{data.date}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Platform Performance</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {analyticsData?.platformPerformance.map((platform) => (\n              <div\n                key={platform.platform}\n                className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <i className={`fab fa-${platform.platform.toLowerCase().replace(' (twitter)', '').replace('x (twitter)', 'twitter')} text-xl ${\n                    platform.platform === \"Instagram\" ? \"text-pink-500\" :\n                    platform.platform === \"Facebook\" ? \"text-blue-600\" :\n                    platform.platform.includes(\"Twitter\") ? \"text-blue-400\" :\n                    platform.platform === \"LinkedIn\" ? \"text-blue-700\" : \"text-gray-500\"\n                  }`} />\n                  <div>\n                    <p className=\"font-medium text-foreground\">{platform.platform}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {platform.followers.toLocaleString()} followers\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-semibold text-foreground\">\n                    {platform.engagement.toLocaleString()}\n                  </p>\n                  <div className=\"flex items-center\">\n                    {platform.change > 0 ? (\n                      <TrendingUp className=\"w-3 h-3 text-green-600 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"w-3 h-3 text-red-600 mr-1\" />\n                    )}\n                    <span className={`text-sm ${platform.change > 0 ? \"text-green-600\" : \"text-red-600\"}`}>\n                      {platform.change > 0 ? \"+\" : \"\"}{platform.change}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Top Performing Posts */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Top Performing Posts</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {analyticsData?.topPerformingPosts.map((post) => (\n            <div key={post.id} className=\"flex items-start space-x-4 p-4 bg-muted rounded-lg\">\n              <div className=\"flex-shrink-0\">\n                <i className={`fab fa-${post.platform.toLowerCase().replace(' (twitter)', '').replace('x (twitter)', 'twitter')} text-xl ${\n                  post.platform === \"Instagram\" ? \"text-pink-500\" :\n                  post.platform === \"Facebook\" ? \"text-blue-600\" :\n                  post.platform.includes(\"Twitter\") ? \"text-blue-400\" :\n                  post.platform === \"LinkedIn\" ? \"text-blue-700\" : \"text-gray-500\"\n                }`} />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-foreground\">{post.content}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Posted {post.publishedAt}</p>\n                <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                  <span>\n                    <Heart className=\"w-3 h-3 inline mr-1\" />\n                    {post.engagement.likes} likes\n                  </span>\n                  <span>\n                    <i className=\"fas fa-comment w-3 h-3 inline mr-1\" />\n                    {post.engagement.comments} comments\n                  </span>\n                  <span>\n                    <i className=\"fas fa-share w-3 h-3 inline mr-1\" />\n                    {post.engagement.shares} shares\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-lg font-semibold text-green-600\">{post.engagementRate}%</p>\n                <p className=\"text-xs text-muted-foreground\">Engagement</p>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11063},"client/src/pages/approval.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { CheckCircle, XCircle, Clock, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport PostCard from \"@/components/content/post-card\";\nimport type { Post } from \"@shared/schema\";\n\nexport default function Approval() {\n  const [selectedPost, setSelectedPost] = useState<string | null>(null);\n  const [rejectReason, setRejectReason] = useState(\"\");\n  const [showRejectDialog, setShowRejectDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"pending\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: pendingPosts, isLoading: pendingLoading } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\", \"pending\"],\n  });\n\n  const { data: approvedPosts, isLoading: approvedLoading } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\", \"approved\"],\n  });\n\n  const { data: rejectedPosts, isLoading: rejectedLoading } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\", \"rejected\"],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      return apiRequest(\"PATCH\", `/api/posts/${postId}`, { \n        status: \"approved\",\n        approvedBy: \"demo-user-1\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Post Approved\",\n        description: \"The post has been approved and will be published as scheduled.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ postId, reason }: { postId: string; reason: string }) => {\n      return apiRequest(\"PATCH\", `/api/posts/${postId}`, { \n        status: \"rejected\",\n        rejectionReason: reason,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Post Rejected\",\n        description: \"The post has been rejected with feedback.\",\n      });\n      setShowRejectDialog(false);\n      setSelectedPost(null);\n      setRejectReason(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n  });\n\n  const handleApprove = (postId: string) => {\n    approveMutation.mutate(postId);\n  };\n\n  const handleReject = (postId: string) => {\n    setSelectedPost(postId);\n    setShowRejectDialog(true);\n  };\n\n  const confirmReject = () => {\n    if (selectedPost && rejectReason.trim()) {\n      rejectMutation.mutate({ \n        postId: selectedPost, \n        reason: rejectReason \n      });\n    }\n  };\n\n  const handleEdit = (postId: string) => {\n    toast({\n      title: \"Edit Post\",\n      description: \"Opening post editor...\",\n    });\n  };\n\n  const handlePreview = (postId: string) => {\n    toast({\n      title: \"Preview\",\n      description: \"Opening post preview...\",\n    });\n  };\n\n  const stats = {\n    pending: pendingPosts?.length || 0,\n    approved: approvedPosts?.length || 0,\n    rejected: rejectedPosts?.length || 0,\n  };\n\n  const renderPosts = (posts: Post[] | undefined, loading: boolean, showActions: boolean = true) => {\n    if (loading) {\n      return (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"aspect-square bg-muted rounded-t-lg\" />\n              <div className=\"p-4 space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-3/4\" />\n                <div className=\"h-4 bg-muted rounded w-1/2\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    if (!posts || posts.length === 0) {\n      return (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <AlertCircle className=\"w-12 h-12 text-muted-foreground mb-4\" />\n            <p className=\"text-lg font-medium text-muted-foreground\">\n              No posts in this category\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Content will appear here when available\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {posts.map((post) => (\n          <PostCard\n            key={post.id}\n            post={post}\n            showActions={showActions}\n            onApprove={post.status === \"pending\" ? handleApprove : undefined}\n            onReject={post.status === \"pending\" ? handleReject : undefined}\n            onEdit={handleEdit}\n            onPreview={handlePreview}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Approval Queue</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Review and approve content before it goes live\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          <Clock className=\"w-5 h-5 mr-2\" />\n          {stats.pending} Pending\n        </Badge>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Pending Review</p>\n                <p className=\"text-3xl font-bold text-foreground mt-2\">{stats.pending}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center\">\n                <Clock className=\"text-yellow-600 dark:text-yellow-400 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                <p className=\"text-3xl font-bold text-foreground mt-2\">{stats.approved}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"text-green-600 dark:text-green-400 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                <p className=\"text-3xl font-bold text-foreground mt-2\">{stats.rejected}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-100 dark:bg-red-900 rounded-lg flex items-center justify-center\">\n                <XCircle className=\"text-red-600 dark:text-red-400 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n          <TabsTrigger value=\"pending\">\n            Pending {stats.pending > 0 && `(${stats.pending})`}\n          </TabsTrigger>\n          <TabsTrigger value=\"approved\">\n            Approved {stats.approved > 0 && `(${stats.approved})`}\n          </TabsTrigger>\n          <TabsTrigger value=\"rejected\">\n            Rejected {stats.rejected > 0 && `(${stats.rejected})`}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\" className=\"mt-6\">\n          {renderPosts(pendingPosts, pendingLoading, true)}\n        </TabsContent>\n\n        <TabsContent value=\"approved\" className=\"mt-6\">\n          {renderPosts(approvedPosts, approvedLoading, false)}\n        </TabsContent>\n\n        <TabsContent value=\"rejected\" className=\"mt-6\">\n          {renderPosts(rejectedPosts, rejectedLoading, false)}\n        </TabsContent>\n      </Tabs>\n\n      {/* Reject Dialog */}\n      <Dialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Post</DialogTitle>\n            <DialogDescription>\n              Please provide feedback for why this post is being rejected.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <Label htmlFor=\"reason\">Rejection Reason</Label>\n            <Textarea\n              id=\"reason\"\n              value={rejectReason}\n              onChange={(e) => setRejectReason(e.target.value)}\n              placeholder=\"Enter the reason for rejection...\"\n              className=\"mt-2 h-32\"\n            />\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowRejectDialog(false);\n                setRejectReason(\"\");\n                setSelectedPost(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmReject}\n              disabled={!rejectReason.trim() || rejectMutation.isPending}\n            >\n              {rejectMutation.isPending ? \"Rejecting...\" : \"Reject Post\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":10075},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight, Plus, Edit, Trash2 } from \"lucide-react\";\nimport type { Post } from \"@shared/schema\";\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  \n  const { data: scheduledPosts } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\", \"scheduled\"],\n  });\n\n  const { data: publishedPosts } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\", \"published\"],\n  });\n\n  // Combine and filter posts for current month\n  const allPosts = [...(scheduledPosts || []), ...(publishedPosts || [])];\n  const postsThisMonth = allPosts.filter(post => {\n    const postDate = new Date(post.scheduledFor || post.publishedAt!);\n    return postDate.getMonth() === currentDate.getMonth() && \n           postDate.getFullYear() === currentDate.getFullYear();\n  });\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (direction === 'prev') {\n      newDate.setMonth(currentDate.getMonth() - 1);\n    } else {\n      newDate.setMonth(currentDate.getMonth() + 1);\n    }\n    setCurrentDate(newDate);\n  };\n\n  const getDaysInMonth = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add all days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(day);\n    }\n    \n    return days;\n  };\n\n  const getPostsForDay = (day: number) => {\n    return postsThisMonth.filter(post => {\n      const postDate = new Date(post.scheduledFor || post.publishedAt!);\n      return postDate.getDate() === day;\n    });\n  };\n\n  const getPlatformColor = (platform: string) => {\n    const colorMap: { [key: string]: string } = {\n      \"Instagram\": \"bg-pink-500\",\n      \"Facebook\": \"bg-blue-600\",\n      \"X (Twitter)\": \"bg-blue-400\",\n      \"TikTok\": \"bg-gray-800\",\n      \"LinkedIn\": \"bg-blue-700\",\n    };\n    return colorMap[platform] || \"bg-gray-500\";\n  };\n\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const days = getDaysInMonth(currentDate);\n  const today = new Date();\n  const isToday = (day: number) => {\n    return today.getDate() === day && \n           today.getMonth() === currentDate.getMonth() && \n           today.getFullYear() === currentDate.getFullYear();\n  };\n\n  const upcomingPosts = allPosts\n    .filter(post => post.scheduledFor && new Date(post.scheduledFor) > new Date())\n    .sort((a, b) => new Date(a.scheduledFor!).getTime() - new Date(b.scheduledFor!).getTime())\n    .slice(0, 3);\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Content Calendar</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                View and manage your scheduled posts\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => navigateMonth('prev')}>\n                  <ChevronLeft className=\"w-4 h-4\" />\n                </Button>\n                <span className=\"font-medium text-foreground min-w-[120px] text-center\">\n                  {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n                </span>\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => navigateMonth('next')}>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <Button>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Schedule Post\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"grid grid-cols-7 gap-px bg-border rounded-lg overflow-hidden\">\n            {/* Calendar header */}\n            {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n              <div key={day} className=\"bg-muted p-3 text-center text-sm font-medium text-muted-foreground\">\n                {day}\n              </div>\n            ))}\n            \n            {/* Calendar days */}\n            {days.map((day, index) => (\n              <div\n                key={index}\n                className={`bg-card p-3 h-24 text-sm relative ${\n                  day && isToday(day) ? \"bg-blue-50 dark:bg-blue-950\" : \"\"\n                }`}\n              >\n                {day && (\n                  <>\n                    <span className={`font-medium ${\n                      isToday(day) ? \"text-blue-600 dark:text-blue-400\" : \"text-foreground\"\n                    }`}>\n                      {day}\n                    </span>\n                    {isToday(day) && (\n                      <div className=\"text-xs text-blue-600 dark:text-blue-400 mt-1\">Today</div>\n                    )}\n                    <div className=\"mt-1 space-y-1\">\n                      {getPostsForDay(day).slice(0, 3).map((post) => (\n                        <div key={post.id} className=\"flex space-x-1\">\n                          {post.platforms.map((platform) => (\n                            <div\n                              key={platform}\n                              className={`w-2 h-2 rounded-full ${getPlatformColor(platform)}`}\n                            />\n                          ))}\n                        </div>\n                      ))}\n                      {getPostsForDay(day).length > 3 && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          +{getPostsForDay(day).length - 3} more\n                        </div>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Legend */}\n          <div className=\"mt-6 flex items-center space-x-6 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-600 rounded-full\" />\n              <span className=\"text-muted-foreground\">Facebook</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-pink-500 rounded-full\" />\n              <span className=\"text-muted-foreground\">Instagram</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-400 rounded-full\" />\n              <span className=\"text-muted-foreground\">X (Twitter)</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-700 rounded-full\" />\n              <span className=\"text-muted-foreground\">LinkedIn</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upcoming Posts */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Upcoming Posts</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {upcomingPosts.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No upcoming scheduled posts\n            </div>\n          ) : (\n            upcomingPosts.map((post) => (\n              <div key={post.id} className=\"flex items-center space-x-4 p-4 bg-muted rounded-lg\">\n                <div className=\"flex-shrink-0\">\n                  <i className={`fab fa-${post.platforms[0].toLowerCase().replace(' (twitter)', '').replace('x (twitter)', 'twitter')} text-xl ${\n                    post.platforms[0] === \"Instagram\" ? \"text-pink-500\" :\n                    post.platforms[0] === \"Facebook\" ? \"text-blue-600\" :\n                    post.platforms[0].includes(\"Twitter\") ? \"text-blue-400\" :\n                    post.platforms[0] === \"LinkedIn\" ? \"text-blue-700\" : \"text-gray-500\"\n                  }`} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-foreground\">\n                    {post.scheduledFor && new Date(post.scheduledFor).toLocaleDateString('en-US', {\n                      weekday: 'long',\n                      month: 'short',\n                      day: 'numeric',\n                      hour: 'numeric',\n                      minute: '2-digit',\n                    })}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {post.content.slice(0, 80)}...\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9648},"client/src/pages/campaigns.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"../lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { \n  PlusCircle, \n  Rocket, \n  Calendar as CalendarIcon, \n  Target, \n  Palette, \n  MessageSquare,\n  Loader2,\n  Play,\n  Pause,\n  CheckCircle,\n  XCircle,\n  Edit,\n  Eye,\n  Sparkles\n} from \"lucide-react\";\nimport type { Campaign, Post } from \"@shared/schema\";\nimport PostCard from \"@/components/content/post-card\";\n\nconst createCampaignSchema = z.object({\n  name: z.string().min(1, \"Campaign name is required\"),\n  description: z.string().optional(),\n  platform: z.string().min(1, \"Platform is required\"),\n  businessName: z.string().min(1, \"Business name is required\"),\n  productName: z.string().optional(),\n  targetAudience: z.string().min(1, \"Target audience is required\"),\n  campaignGoals: z.string().min(1, \"Campaign goals are required\"),\n  brandTone: z.string().min(1, \"Brand tone is required\"),\n  keyMessages: z.array(z.string()).default([]),\n  visualStyle: z.string().min(1, \"Visual style is required\"),\n  colorScheme: z.string().optional(),\n  callToAction: z.string().min(1, \"Call to action is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().optional(),\n});\n\ntype CreateCampaignForm = z.infer<typeof createCampaignSchema>;\n\nexport default function Campaigns() {\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(null);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [keyMessageInput, setKeyMessageInput] = useState(\"\");\n  \n  const form = useForm<CreateCampaignForm>({\n    resolver: zodResolver(createCampaignSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      platform: \"\",\n      businessName: \"\",\n      productName: \"\",\n      targetAudience: \"\",\n      campaignGoals: \"\",\n      brandTone: \"\",\n      keyMessages: [],\n      visualStyle: \"\",\n      colorScheme: \"\",\n      callToAction: \"\",\n      startDate: format(new Date(), \"yyyy-MM-dd\"),\n    },\n  });\n\n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: campaignPosts } = useQuery<Post[]>({\n    queryKey: [\"/api/campaigns\", selectedCampaign?.id, \"posts\"],\n    enabled: !!selectedCampaign,\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: CreateCampaignForm) => {\n      const response = await apiRequest(\"POST\", \"/api/campaigns\", {\n        ...data,\n        postsPerDay: 2,\n        status: \"draft\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Campaign created\",\n        description: \"Your campaign has been created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create campaign. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await apiRequest(\"POST\", `/api/campaigns/${campaignId}/generate`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", selectedCampaign?.id, \"posts\"] });\n      toast({\n        title: \"Generation started\",\n        description: \"AI is generating content for your campaign. This may take a few minutes.\",\n      });\n    },\n  });\n\n  const updateCampaignStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/campaigns/${id}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campaign updated\",\n        description: \"Campaign status has been updated.\",\n      });\n    },\n  });\n\n  const approvePostMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/posts/${postId}`, { \n        status: \"approved\" \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", selectedCampaign?.id, \"posts\"] });\n      toast({\n        title: \"Post approved\",\n        description: \"The post has been approved for publishing.\",\n      });\n    },\n  });\n\n  const handleAddKeyMessage = () => {\n    if (keyMessageInput.trim()) {\n      const currentMessages = form.getValues(\"keyMessages\");\n      form.setValue(\"keyMessages\", [...currentMessages, keyMessageInput.trim()]);\n      setKeyMessageInput(\"\");\n    }\n  };\n\n  const handleRemoveKeyMessage = (index: number) => {\n    const currentMessages = form.getValues(\"keyMessages\");\n    form.setValue(\"keyMessages\", currentMessages.filter((_, i) => i !== index));\n  };\n\n  const getCampaignStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-500\";\n      case \"generating\": return \"bg-blue-500\";\n      case \"review\": return \"bg-yellow-500\";\n      case \"active\": return \"bg-green-500\";\n      case \"completed\": return \"bg-purple-500\";\n      case \"paused\": return \"bg-orange-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const activeCampaigns = campaigns?.filter(c => c.status === \"active\") || [];\n  const draftCampaigns = campaigns?.filter(c => c.status === \"draft\") || [];\n  const reviewCampaigns = campaigns?.filter(c => c.status === \"review\") || [];\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Campaigns</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Create and manage automated content campaigns\n          </p>\n        </div>\n        <Button onClick={() => setIsCreateDialogOpen(true)}>\n          <PlusCircle className=\"w-4 h-4 mr-2\" />\n          New Campaign\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"active\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"active\">\n            Active ({activeCampaigns.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"draft\">\n            Drafts ({draftCampaigns.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"review\">\n            Review ({reviewCampaigns.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          {activeCampaigns.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Rocket className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No active campaigns</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {activeCampaigns.map((campaign) => (\n                <CampaignCard\n                  key={campaign.id}\n                  campaign={campaign}\n                  onView={() => {\n                    setSelectedCampaign(campaign);\n                    setIsPreviewOpen(true);\n                  }}\n                  onStatusChange={(status) => \n                    updateCampaignStatusMutation.mutate({ id: campaign.id, status })\n                  }\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"draft\" className=\"space-y-4\">\n          {draftCampaigns.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Edit className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No draft campaigns</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {draftCampaigns.map((campaign) => (\n                <CampaignCard\n                  key={campaign.id}\n                  campaign={campaign}\n                  onView={() => {\n                    setSelectedCampaign(campaign);\n                    setIsPreviewOpen(true);\n                  }}\n                  onGenerate={() => generateCampaignMutation.mutate(campaign.id)}\n                  onStatusChange={(status) => \n                    updateCampaignStatusMutation.mutate({ id: campaign.id, status })\n                  }\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"review\" className=\"space-y-4\">\n          {reviewCampaigns.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Eye className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No campaigns in review</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {reviewCampaigns.map((campaign) => (\n                <CampaignCard\n                  key={campaign.id}\n                  campaign={campaign}\n                  onView={() => {\n                    setSelectedCampaign(campaign);\n                    setIsPreviewOpen(true);\n                  }}\n                  onStatusChange={(status) => \n                    updateCampaignStatusMutation.mutate({ id: campaign.id, status })\n                  }\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Create Campaign Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create New Campaign</DialogTitle>\n            <DialogDescription>\n              Set up an automated campaign that generates and schedules content\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit((data) => createCampaignMutation.mutate(data))} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Campaign Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Summer Sale Campaign\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"platform\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Platform</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select platform\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Instagram\">Instagram</SelectItem>\n                          <SelectItem value=\"Facebook\">Facebook</SelectItem>\n                          <SelectItem value=\"X\">X (Twitter)</SelectItem>\n                          <SelectItem value=\"LinkedIn\">LinkedIn</SelectItem>\n                          <SelectItem value=\"TikTok\">TikTok</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe your campaign objectives...\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"businessName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Business Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Your Business\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"productName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product/Service Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Optional\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"targetAudience\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Target Audience</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Young professionals aged 25-40 interested in sustainable living...\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Describe your ideal customer demographics and interests\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"campaignGoals\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Campaign Goals</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Increase brand awareness, drive website traffic, generate leads...\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"brandTone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand Tone</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select tone\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"professional\">Professional</SelectItem>\n                          <SelectItem value=\"friendly\">Friendly</SelectItem>\n                          <SelectItem value=\"casual\">Casual</SelectItem>\n                          <SelectItem value=\"inspirational\">Inspirational</SelectItem>\n                          <SelectItem value=\"humorous\">Humorous</SelectItem>\n                          <SelectItem value=\"authoritative\">Authoritative</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"visualStyle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Visual Style</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select style\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"modern\">Modern</SelectItem>\n                          <SelectItem value=\"minimalist\">Minimalist</SelectItem>\n                          <SelectItem value=\"colorful\">Colorful</SelectItem>\n                          <SelectItem value=\"vintage\">Vintage</SelectItem>\n                          <SelectItem value=\"corporate\">Corporate</SelectItem>\n                          <SelectItem value=\"artistic\">Artistic</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"colorScheme\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Color Scheme</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Blue and white, earth tones, vibrant rainbow...\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Describe your preferred color palette\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <FormLabel>Key Messages</FormLabel>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Add a key message...\"\n                    value={keyMessageInput}\n                    onChange={(e) => setKeyMessageInput(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        handleAddKeyMessage();\n                      }\n                    }}\n                  />\n                  <Button type=\"button\" onClick={handleAddKeyMessage}>\n                    Add\n                  </Button>\n                </div>\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  {form.watch(\"keyMessages\").map((message, index) => (\n                    <Badge key={index} variant=\"secondary\">\n                      {message}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveKeyMessage(index)}\n                        className=\"ml-2 text-xs hover:text-destructive\"\n                      >\n                        ×\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"callToAction\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Call to Action</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Shop Now, Learn More, Sign Up Today...\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Start Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Campaign will run for 7 days with 2 posts per day (14 total)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createCampaignMutation.isPending}>\n                  {createCampaignMutation.isPending && (\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  )}\n                  Create Campaign\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Campaign Preview Dialog */}\n      {selectedCampaign && (\n        <CampaignPreviewDialog\n          campaign={selectedCampaign}\n          posts={campaignPosts || []}\n          isOpen={isPreviewOpen}\n          onClose={() => setIsPreviewOpen(false)}\n          onApprovePost={approvePostMutation.mutate}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface CampaignCardProps {\n  campaign: Campaign;\n  onView: () => void;\n  onGenerate?: () => void;\n  onStatusChange: (status: string) => void;\n}\n\nfunction CampaignCard({ campaign, onView, onGenerate, onStatusChange }: CampaignCardProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <CardTitle className=\"text-lg\">{campaign.name}</CardTitle>\n            <CardDescription className=\"mt-1\">\n              {campaign.platform} • {campaign.postsPerDay * 7} posts\n            </CardDescription>\n          </div>\n          <Badge className={getCampaignStatusColor(campaign.status)}>\n            {campaign.status}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          <div className=\"text-sm text-muted-foreground\">\n            {campaign.description || \"No description\"}\n          </div>\n          \n          {campaign.status === \"generating\" && (\n            <Progress value={campaign.generationProgress} className=\"h-2\" />\n          )}\n\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>Starts {format(new Date(campaign.startDate), \"MMM d\")}</span>\n            <span>{campaign.businessName}</span>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button size=\"sm\" variant=\"outline\" onClick={onView}>\n              <Eye className=\"w-4 h-4 mr-1\" />\n              View\n            </Button>\n            \n            {campaign.status === \"draft\" && onGenerate && (\n              <Button size=\"sm\" onClick={onGenerate}>\n                <Sparkles className=\"w-4 h-4 mr-1\" />\n                Generate\n              </Button>\n            )}\n            \n            {campaign.status === \"review\" && (\n              <Button size=\"sm\" onClick={() => onStatusChange(\"active\")}>\n                <Play className=\"w-4 h-4 mr-1\" />\n                Activate\n              </Button>\n            )}\n            \n            {campaign.status === \"active\" && (\n              <Button size=\"sm\" variant=\"outline\" onClick={() => onStatusChange(\"paused\")}>\n                <Pause className=\"w-4 h-4 mr-1\" />\n                Pause\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface CampaignPreviewDialogProps {\n  campaign: Campaign;\n  posts: Post[];\n  isOpen: boolean;\n  onClose: () => void;\n  onApprovePost: (postId: string) => void;\n}\n\nfunction CampaignPreviewDialog({ \n  campaign, \n  posts, \n  isOpen, \n  onClose, \n  onApprovePost \n}: CampaignPreviewDialogProps) {\n  const [editingPost, setEditingPost] = useState<string | null>(null);\n  const [editedContent, setEditedContent] = useState<{ [key: string]: string }>({});\n\n  const handleEditPost = (postId: string, content: string) => {\n    setEditingPost(postId);\n    setEditedContent({ ...editedContent, [postId]: content });\n  };\n\n  const handleSaveEdit = async (postId: string) => {\n    await apiRequest(\"PATCH\", `/api/posts/${postId}`, {\n      content: editedContent[postId],\n    });\n    setEditingPost(null);\n    queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", campaign.id, \"posts\"] });\n  };\n\n  const handleApprovePost = async (postId: string) => {\n    await apiRequest(\"PATCH\", `/api/posts/${postId}`, {\n      status: \"approved\",\n    });\n    queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", campaign.id, \"posts\"] });\n  };\n\n  const handleRejectPost = async (postId: string) => {\n    await apiRequest(\"PATCH\", `/api/posts/${postId}`, {\n      status: \"rejected\",\n    });\n    queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", campaign.id, \"posts\"] });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle>{campaign.name}</DialogTitle>\n          <DialogDescription>\n            Preview and manage campaign posts\n          </DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[60vh] pr-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {posts.map((post, index) => (\n              <div key={post.id} className=\"space-y-2\">\n                <div className=\"flex items-center justify-between px-2\">\n                  <span className=\"text-sm font-medium\">\n                    Day {Math.floor(index / 2) + 1} - Post {(index % 2) + 1}\n                  </span>\n                  {post.scheduledFor && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      {format(new Date(post.scheduledFor), \"MMM d\")}\n                    </span>\n                  )}\n                </div>\n                <PostCard\n                  post={post}\n                  showActions={true}\n                  onEdit={() => handleEditPost(post.id, post.content)}\n                  onApprove={post.status === \"pending\" ? async () => {\n                    await handleApprovePost(post.id);\n                  } : undefined}\n                  onReject={post.status === \"pending\" ? async () => {\n                    await handleRejectPost(post.id);\n                  } : undefined}\n                  compact={true}\n                />\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction getCampaignStatusColor(status: string) {\n  switch (status) {\n    case \"draft\": return \"\";\n    case \"generating\": return \"bg-blue-500\";\n    case \"review\": return \"bg-yellow-500\";\n    case \"active\": return \"bg-green-500\";\n    case \"completed\": return \"bg-purple-500\";\n    case \"paused\": return \"bg-orange-500\";\n    default: return \"\";\n  }\n}","size_bytes":28851},"client/src/pages/connect-platforms.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Instagram, Facebook, Twitter, Linkedin, \n  CheckCircle, AlertCircle, ExternalLink, Settings, Link2\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ninterface Platform {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  color: string;\n  isConnected: boolean;\n  requiresOAuth: boolean;\n  status: 'active' | 'limited' | 'unavailable';\n  description: string;\n  connectionMethod: string;\n  limitations?: string[];\n}\n\nexport default function ConnectPlatforms() {\n  const { toast } = useToast();\n  const [platforms, setPlatforms] = useState<Platform[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [connectingPlatform, setConnectingPlatform] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadPlatforms();\n  }, []);\n\n  const loadPlatforms = async () => {\n    try {\n      const response = await fetch(\"/api/platforms\", {\n        credentials: \"include\",\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        \n        // Define platform configurations with current 2025 status\n        const platformConfigs: Platform[] = [\n          {\n            id: \"instagram\",\n            name: \"Instagram\",\n            icon: <Instagram className=\"h-6 w-6\" />,\n            color: \"#E1306C\",\n            isConnected: data.some((p: any) => p.name === \"Instagram\" && p.isConnected),\n            requiresOAuth: true,\n            status: \"limited\",\n            description: \"Connect your Instagram Business account for posting and analytics\",\n            connectionMethod: \"OAuth 2.0 through Meta Developer Portal\",\n            limitations: [\n              \"Requires Instagram Business or Creator Account\",\n              \"Meta Developer account setup needed\",\n              \"Subject to review and approval\",\n              \"Posting limited by Instagram API restrictions\"\n            ]\n          },\n          {\n            id: \"facebook\",\n            name: \"Facebook\",\n            icon: <Facebook className=\"h-6 w-6\" />,\n            color: \"#1877F2\",\n            isConnected: data.some((p: any) => p.name === \"Facebook\" && p.isConnected),\n            requiresOAuth: true,\n            status: \"limited\",\n            description: \"Connect your Facebook Page for business posting\",\n            connectionMethod: \"OAuth 2.0 through Meta Business Suite\",\n            limitations: [\n              \"Requires Facebook Business Page\",\n              \"Limited to approved apps only\",\n              \"Groups API no longer available\",\n              \"Strict content moderation policies\"\n            ]\n          },\n          {\n            id: \"twitter\",\n            name: \"X (Twitter)\",\n            icon: <Twitter className=\"h-6 w-6\" />,\n            color: \"#1DA1F2\", \n            isConnected: data.some((p: any) => p.name === \"X (Twitter)\" && p.isConnected),\n            requiresOAuth: true,\n            status: \"limited\",\n            description: \"Connect your X account for tweets and engagement\",\n            connectionMethod: \"OAuth 2.0 with elevated access required\",\n            limitations: [\n              \"API access significantly restricted since 2023\",\n              \"Requires paid Twitter API subscription\",\n              \"Rate limits apply to all operations\",\n              \"Content moderation may affect posting\"\n            ]\n          },\n          {\n            id: \"linkedin\",\n            name: \"LinkedIn\",\n            icon: <Linkedin className=\"h-6 w-6\" />,\n            color: \"#0A66C2\",\n            isConnected: data.some((p: any) => p.name === \"LinkedIn\" && p.isConnected),\n            requiresOAuth: true,\n            status: \"active\",\n            description: \"Connect your LinkedIn profile or company page\",\n            connectionMethod: \"OAuth 2.0 through LinkedIn Developer Portal\",\n            limitations: [\n              \"Personal posts limited to own profile\",\n              \"Company page access requires admin rights\",\n              \"Professional content guidelines apply\"\n            ]\n          },\n          {\n            id: \"tiktok\",\n            name: \"TikTok\",\n            icon: <div className=\"h-6 w-6 bg-black rounded text-white flex items-center justify-center text-xs font-bold\">T</div>,\n            color: \"#000000\",\n            isConnected: data.some((p: any) => p.name === \"TikTok\" && p.isConnected),\n            requiresOAuth: true,\n            status: \"unavailable\",\n            description: \"TikTok API access is very limited\",\n            connectionMethod: \"Business API access by invitation only\",\n            limitations: [\n              \"No public API available\",\n              \"Business API requires special approval\",\n              \"Limited to large enterprise partners\",\n              \"Analytics access extremely restricted\"\n            ]\n          }\n        ];\n        \n        setPlatforms(platformConfigs);\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load platform connections\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleConnect = async (platform: Platform) => {\n    if (platform.status === 'unavailable') {\n      toast({\n        title: \"Platform Unavailable\",\n        description: `${platform.name} integration is not currently available due to API restrictions.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setConnectingPlatform(platform.id);\n    \n    // Simulate OAuth flow - in production, this would redirect to platform's OAuth endpoint\n    toast({\n      title: \"OAuth Setup Required\",\n      description: `To connect ${platform.name}, you'll need to set up OAuth credentials in your developer account.`,\n    });\n\n    // For demo purposes, mark as connected after delay\n    setTimeout(() => {\n      setPlatforms(prev => prev.map(p => \n        p.id === platform.id ? { ...p, isConnected: true } : p\n      ));\n      setConnectingPlatform(null);\n      toast({\n        title: \"Connection Simulated\",\n        description: `${platform.name} connection setup initiated. In production, this would complete the OAuth flow.`,\n      });\n    }, 2000);\n  };\n\n  const handleDisconnect = async (platform: Platform) => {\n    try {\n      setPlatforms(prev => prev.map(p => \n        p.id === platform.id ? { ...p, isConnected: false } : p\n      ));\n      \n      toast({\n        title: \"Disconnected\",\n        description: `${platform.name} has been disconnected from your account.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to disconnect platform\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: Platform['status']) => {\n    switch (status) {\n      case 'active':\n        return <Badge variant=\"default\" className=\"ml-2\">Available</Badge>;\n      case 'limited':\n        return <Badge variant=\"secondary\" className=\"ml-2\">Limited</Badge>;\n      case 'unavailable':\n        return <Badge variant=\"destructive\" className=\"ml-2\">Unavailable</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Connect Your Platforms</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Connect your social media accounts to enable posting and analytics across all platforms.\n        </p>\n      </div>\n\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Important:</strong> Social media platforms now require OAuth authentication for security. \n          Simple username/password connections are no longer supported by any major platform as of 2025.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {platforms.map((platform) => (\n          <Card key={platform.id} className=\"relative\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div style={{ color: platform.color }}>\n                    {platform.icon}\n                  </div>\n                  <CardTitle className=\"text-lg\">{platform.name}</CardTitle>\n                </div>\n                <div className=\"flex items-center\">\n                  {platform.isConnected ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <Link2 className=\"h-5 w-5 text-muted-foreground\" />\n                  )}\n                  {getStatusBadge(platform.status)}\n                </div>\n              </div>\n              <CardDescription>\n                {platform.description}\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                <strong>Connection Method:</strong> {platform.connectionMethod}\n              </div>\n              \n              {platform.limitations && platform.limitations.length > 0 && (\n                <div className=\"text-sm\">\n                  <strong className=\"text-yellow-600\">Limitations:</strong>\n                  <ul className=\"list-disc list-inside mt-1 space-y-1 text-muted-foreground\">\n                    {platform.limitations.map((limitation, index) => (\n                      <li key={index}>{limitation}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              <div className=\"flex space-x-2\">\n                {platform.isConnected ? (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDisconnect(platform)}\n                      className=\"flex-1\"\n                      data-testid={`button-disconnect-${platform.id}`}\n                    >\n                      Disconnect\n                    </Button>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Settings className=\"h-4 w-4\" />\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>{platform.name} Connection Settings</DialogTitle>\n                          <DialogDescription>\n                            Manage your {platform.name} connection and posting preferences.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <span>Status</span>\n                            <Badge variant=\"default\">Connected</Badge>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label>Default Posting Options</Label>\n                            <div className=\"grid grid-cols-2 gap-2\">\n                              <Button variant=\"outline\" size=\"sm\">Auto-hashtags</Button>\n                              <Button variant=\"outline\" size=\"sm\">Optimal timing</Button>\n                            </div>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </>\n                ) : (\n                  <Button\n                    onClick={() => handleConnect(platform)}\n                    disabled={connectingPlatform === platform.id || platform.status === 'unavailable'}\n                    className=\"flex-1\"\n                    style={{ backgroundColor: platform.status !== 'unavailable' ? platform.color : undefined }}\n                    data-testid={`button-connect-${platform.id}`}\n                  >\n                    {connectingPlatform === platform.id ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></div>\n                        <span>Connecting...</span>\n                      </div>\n                    ) : (\n                      <>\n                        <ExternalLink className=\"h-4 w-4 mr-2\" />\n                        {platform.status === 'unavailable' ? 'Unavailable' : 'Connect'}\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Why No Username/Password Login?</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-muted-foreground\">\n            As of 2025, all major social media platforms have discontinued username/password authentication \n            for third-party applications due to security and policy changes:\n          </p>\n          <ul className=\"list-disc list-inside space-y-2 text-sm text-muted-foreground\">\n            <li><strong>Security:</strong> OAuth 2.0 provides better security with token-based authentication</li>\n            <li><strong>Platform Policies:</strong> Platforms no longer allow password-based third-party access</li>\n            <li><strong>User Safety:</strong> Prevents apps from storing or accessing your actual passwords</li>\n            <li><strong>Compliance:</strong> Required for platform certification and continued API access</li>\n          </ul>\n          <p className=\"text-muted-foreground\">\n            Our system uses industry-standard OAuth flows to keep your accounts secure while enabling \n            seamless content management across all connected platforms.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14617},"client/src/pages/create-content.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bot, Bold, Italic, Link as LinkIcon, Image, Wand2, Target, Palette, Building2, MessageSquare, Megaphone, Sparkles, FileText, Video, ImageIcon, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport PlatformSelector from \"../components/content/platform-selector\";\nimport AiSuggestions from \"../components/content/ai-suggestions\";\nimport PlatformPreview from \"../components/content/platform-preview\";\n\nexport default function CreateContent() {\n  const [content, setContent] = useState(\"\");\n  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>([\"Instagram\", \"Facebook\"]);\n  const [scheduleOption, setScheduleOption] = useState(\"now\");\n  const [showAiSuggestions, setShowAiSuggestions] = useState(false);\n  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);\n  \n  // Enhanced AI input fields\n  const [businessName, setBusinessName] = useState(\"\");\n  const [productName, setProductName] = useState(\"\");\n  const [targetAudience, setTargetAudience] = useState(\"\");\n  const [brandTone, setBrandTone] = useState(\"professional\");\n  const [keyMessages, setKeyMessages] = useState(\"\");\n  const [callToAction, setCallToAction] = useState(\"\");\n  const [isAdvertisement, setIsAdvertisement] = useState(true);\n  const [additionalContext, setAdditionalContext] = useState(\"\");\n  \n  // Media type selection\n  const [mediaType, setMediaType] = useState<\"text\" | \"image\" | \"video\">(\"text\");\n  \n  // Visual generation fields\n  const [generateVisuals, setGenerateVisuals] = useState(false);\n  const [visualStyle, setVisualStyle] = useState(\"modern\");\n  const [colorScheme, setColorScheme] = useState(\"\");\n  const [imagePrompt, setImagePrompt] = useState(\"\");\n  const [videoDuration, setVideoDuration] = useState(15);\n  const [videoTextOverlay, setVideoTextOverlay] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: any) => {\n      return apiRequest(\"POST\", \"/api/posts\", postData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Your post has been created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      // Reset form\n      setContent(\"\");\n      setSelectedPlatforms([\"Instagram\", \"Facebook\"]);\n      setScheduleOption(\"now\");\n      setShowAiSuggestions(false);\n      setAiSuggestions([]);\n      setBusinessName(\"\");\n      setProductName(\"\");\n      setTargetAudience(\"\");\n      setKeyMessages(\"\");\n      setCallToAction(\"\");\n      setAdditionalContext(\"\");\n      setImagePrompt(\"\");\n      setColorScheme(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateAiContentMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate\", params);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Always set the text content\n      if (data.content) {\n        setContent(data.content);\n      }\n      \n      // Handle different media types\n      if (data.imageUrl) {\n        setImagePrompt(data.imagePrompt || \"\");\n      }\n      \n      let description = \"AI has created \";\n      if (data.mediaType === \"text\") {\n        description += \"text content\";\n      } else if (data.mediaType === \"image\" && data.imageUrl) {\n        description += \"text content with an image\";\n      } else if (data.mediaType === \"video\" && data.videoUrl) {\n        description += \"text content with a video\";\n      } else {\n        description += \"content\";\n      }\n      \n      toast({\n        title: \"✨ Content Generated Successfully\",\n        description: `${description} optimized for ${selectedPlatforms[0] || 'your platform'}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate AI content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!content.trim() && !businessName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter content or fill in business details for AI generation.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedPlatforms.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select at least one platform.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const status = scheduleOption === \"approval\" ? \"pending\" : \n                  scheduleOption === \"later\" ? \"scheduled\" : \"published\";\n\n    createPostMutation.mutate({\n      content,\n      platforms: selectedPlatforms,\n      status,\n      aiGenerated: true,\n      scheduledFor: scheduleOption === \"later\" ? new Date(Date.now() + 24 * 60 * 60 * 1000) : null,\n      mediaType,\n      metadata: {\n        businessName,\n        productName,\n        targetAudience,\n        brandTone,\n        keyMessages,\n        callToAction,\n        isAdvertisement,\n        visualStyle,\n        colorScheme,\n        imagePrompt,\n        videoDuration,\n        videoTextOverlay,\n      }\n    });\n  };\n\n  const handleAiGenerate = () => {\n    if (!businessName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter at least your business name to generate content.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const params: any = {\n      businessName,\n      productName,\n      targetAudience,\n      brandTone,\n      keyMessages: keyMessages.split(',').map(k => k.trim()).filter(k => k),\n      callToAction,\n      platform: selectedPlatforms[0] || 'Instagram',\n      isAdvertisement,\n      additionalContext,\n      mediaType,\n      visualStyle,\n      colorScheme,\n    };\n\n    if (mediaType === \"image\") {\n      params.generateImage = true;\n      params.imagePrompt = imagePrompt;\n    } else if (mediaType === \"video\") {\n      params.generateVideo = true;\n      params.videoDuration = videoDuration;\n      params.videoTextOverlay = videoTextOverlay;\n      params.videoPrompt = imagePrompt; // Using imagePrompt field for video description\n    }\n\n    generateAiContentMutation.mutate(params);\n  };\n\n  const handleSelectSuggestion = (suggestion: string) => {\n    setContent(suggestion);\n    setShowAiSuggestions(false);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Create Content</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Generate AI-powered content optimized for your business and target audience\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* AI Input Fields - Left Side */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-5 h-5 text-primary\" />\n                  Business Information\n                </CardTitle>\n                <CardDescription>\n                  Provide details about your business for personalized content generation\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"businessName\">Business Name *</Label>\n                    <Input\n                      id=\"businessName\"\n                      value={businessName}\n                      onChange={(e) => setBusinessName(e.target.value)}\n                      placeholder=\"e.g., Sarah's Coffee Shop\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"productName\">Product/Service</Label>\n                    <Input\n                      id=\"productName\"\n                      value={productName}\n                      onChange={(e) => setProductName(e.target.value)}\n                      placeholder=\"e.g., Organic Coffee Blend\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"targetAudience\">Target Audience</Label>\n                  <Input\n                    id=\"targetAudience\"\n                    value={targetAudience}\n                    onChange={(e) => setTargetAudience(e.target.value)}\n                    placeholder=\"e.g., Young professionals, coffee enthusiasts, eco-conscious consumers\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"brandTone\">Brand Tone</Label>\n                    <Select value={brandTone} onValueChange={setBrandTone}>\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"professional\">Professional</SelectItem>\n                        <SelectItem value=\"friendly\">Friendly & Casual</SelectItem>\n                        <SelectItem value=\"luxurious\">Luxurious & Premium</SelectItem>\n                        <SelectItem value=\"playful\">Playful & Fun</SelectItem>\n                        <SelectItem value=\"inspirational\">Inspirational</SelectItem>\n                        <SelectItem value=\"educational\">Educational</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent & Action-Oriented</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"callToAction\">Call to Action</Label>\n                    <Input\n                      id=\"callToAction\"\n                      value={callToAction}\n                      onChange={(e) => setCallToAction(e.target.value)}\n                      placeholder=\"e.g., Shop Now, Learn More, Get 20% Off\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"keyMessages\">Key Messages (comma-separated)</Label>\n                  <Textarea\n                    id=\"keyMessages\"\n                    value={keyMessages}\n                    onChange={(e) => setKeyMessages(e.target.value)}\n                    placeholder=\"e.g., Free shipping on orders over $50, Eco-friendly packaging, Award-winning quality\"\n                    className=\"mt-1 h-20\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isAdvertisement\"\n                      checked={isAdvertisement}\n                      onCheckedChange={setIsAdvertisement}\n                    />\n                    <Label htmlFor=\"isAdvertisement\" className=\"cursor-pointer\">\n                      Structure as Advertisement\n                    </Label>\n                  </div>\n                  <Badge variant={isAdvertisement ? \"default\" : \"secondary\"}>\n                    {isAdvertisement ? \"Ad Format\" : \"Organic Content\"}\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Palette className=\"w-5 h-5 text-primary\" />\n                  Media Generation\n                </CardTitle>\n                <CardDescription>\n                  Choose what type of content to generate with AI\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Media Type</Label>\n                  <RadioGroup value={mediaType} onValueChange={(value: any) => setMediaType(value)} className=\"mt-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"text\" id=\"text\" />\n                      <Label htmlFor=\"text\" className=\"flex items-center gap-2 cursor-pointer\">\n                        <FileText className=\"w-4 h-4\" />\n                        Text Only (Gemini 2.5 Flash)\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"image\" id=\"image\" />\n                      <Label htmlFor=\"image\" className=\"flex items-center gap-2 cursor-pointer\">\n                        <ImageIcon className=\"w-4 h-4\" />\n                        Text + Image (Gemini + Imagen4)\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"video\" id=\"video\" />\n                      <Label htmlFor=\"video\" className=\"flex items-center gap-2 cursor-pointer\">\n                        <Video className=\"w-4 h-4\" />\n                        Text + Video (Gemini + Veo3 Fast)\n                      </Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                {(mediaType === \"image\" || mediaType === \"video\") && (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"visualStyle\">Visual Style</Label>\n                        <Select value={visualStyle} onValueChange={setVisualStyle}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"modern\">Modern & Clean</SelectItem>\n                            <SelectItem value=\"vintage\">Vintage & Retro</SelectItem>\n                            <SelectItem value=\"minimalist\">Minimalist</SelectItem>\n                            <SelectItem value=\"bold\">Bold & Vibrant</SelectItem>\n                            <SelectItem value=\"elegant\">Elegant & Sophisticated</SelectItem>\n                            <SelectItem value=\"playful\">Playful & Colorful</SelectItem>\n                            <SelectItem value=\"professional\">Professional & Corporate</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"colorScheme\">Color Scheme</Label>\n                        <Input\n                          id=\"colorScheme\"\n                          value={colorScheme}\n                          onChange={(e) => setColorScheme(e.target.value)}\n                          placeholder=\"e.g., Blue and gold, Earth tones\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                    \n                    {mediaType === \"image\" && (\n                      <div>\n                        <Label htmlFor=\"imagePrompt\">Image Description</Label>\n                        <Textarea\n                          id=\"imagePrompt\"\n                          value={imagePrompt}\n                          onChange={(e) => setImagePrompt(e.target.value)}\n                          placeholder=\"Describe specific visual elements you want in the image...\"\n                          className=\"mt-1 h-20\"\n                        />\n                      </div>\n                    )}\n                    \n                    {mediaType === \"video\" && (\n                      <>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"videoDuration\">Video Duration (seconds)</Label>\n                            <Input\n                              id=\"videoDuration\"\n                              type=\"number\"\n                              min=\"5\"\n                              max=\"30\"\n                              value={videoDuration}\n                              onChange={(e) => setVideoDuration(parseInt(e.target.value) || 15)}\n                              className=\"mt-1\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"videoTextOverlay\">Text Overlay</Label>\n                            <Input\n                              id=\"videoTextOverlay\"\n                              value={videoTextOverlay}\n                              onChange={(e) => setVideoTextOverlay(e.target.value)}\n                              placeholder=\"e.g., Limited Time Offer\"\n                              className=\"mt-1\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"imagePrompt\">Video Scene Description</Label>\n                          <Textarea\n                            id=\"imagePrompt\"\n                            value={imagePrompt}\n                            onChange={(e) => setImagePrompt(e.target.value)}\n                            placeholder=\"Describe the scenes and visual elements for your video...\"\n                            className=\"mt-1 h-20\"\n                          />\n                        </div>\n                      </>\n                    )}\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"w-5 h-5 text-primary\" />\n                  Content Editor\n                </CardTitle>\n                <CardDescription>\n                  Edit your generated content or write from scratch\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"additionalContext\">Additional Context (Optional)</Label>\n                  <Textarea\n                    id=\"additionalContext\"\n                    value={additionalContext}\n                    onChange={(e) => setAdditionalContext(e.target.value)}\n                    placeholder=\"Any special instructions, current promotions, or specific details to include...\"\n                    className=\"mt-1 h-20\"\n                  />\n                </div>\n\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label>Generated Content</Label>\n                  <Button\n                    onClick={handleAiGenerate}\n                    disabled={generateAiContentMutation.isPending}\n                    size=\"sm\"\n                  >\n                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                    {generateAiContentMutation.isPending ? \n                      `Generating ${mediaType}...` : \n                      `Generate ${mediaType === 'text' ? 'Text' : mediaType === 'image' ? 'Text + Image' : 'Text + Video'}`\n                    }\n                  </Button>\n                </div>\n                \n                <div className=\"border border-border rounded-lg overflow-hidden\">\n                  <div className=\"bg-muted px-4 py-2 border-b border-border flex items-center space-x-2 text-sm\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                      <Bold className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                      <Italic className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                      <LinkIcon className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                      <Image className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <Textarea\n                    value={content}\n                    onChange={(e) => setContent(e.target.value)}\n                    className=\"border-0 resize-none h-40 focus-visible:ring-0\"\n                    placeholder=\"Your AI-generated content will appear here. You can also type or edit manually...\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Platform Previews - Show below content editor */}\n            {selectedPlatforms.length > 0 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Eye className=\"w-5 h-5 text-primary\" />\n                  Platform Previews\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {selectedPlatforms.map((platform) => (\n                    <PlatformPreview\n                      key={platform}\n                      platform={platform}\n                      content={content}\n                      businessName={businessName || \"Your Business\"}\n                      imageUrl={mediaType === \"image\" ? \"https://via.placeholder.com/1080x1080/9333ea/ffffff?text=AI+Generated+Image\" : undefined}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Platform Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5 text-primary\" />\n                  Target Platforms\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <PlatformSelector \n                  selectedPlatforms={selectedPlatforms}\n                  onPlatformsChange={setSelectedPlatforms}\n                />\n              </CardContent>\n            </Card>\n\n            {/* AI Suggestions */}\n            {showAiSuggestions && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>AI Suggestions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <AiSuggestions\n                    suggestions={aiSuggestions}\n                    onSelectSuggestion={handleSelectSuggestion}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Schedule Options */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Megaphone className=\"w-5 h-5 text-primary\" />\n                  Publishing Options\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <RadioGroup\n                  value={scheduleOption}\n                  onValueChange={setScheduleOption}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"now\" id=\"now\" />\n                    <Label htmlFor=\"now\">Publish Now</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"later\" id=\"later\" />\n                    <Label htmlFor=\"later\">Schedule for Later</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"approval\" id=\"approval\" />\n                    <Label htmlFor=\"approval\">Send for Approval</Label>\n                  </div>\n                </RadioGroup>\n                \n                <Button \n                  onClick={handleSubmit}\n                  disabled={createPostMutation.isPending}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  {createPostMutation.isPending ? \"Creating...\" : \"Create Post\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":25365},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Share2, \n  Heart, \n  Clock, \n  Calendar,\n  TrendingUp,\n  Users,\n  MousePointer,\n  Eye,\n  Edit,\n  CalendarPlus,\n  Wand2,\n  CheckCircle,\n  Bot,\n  BarChart3,\n  Copy\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface PlatformStatus {\n  name: string;\n  icon: string;\n  connected: boolean;\n  color: string;\n}\n\ninterface DashboardData {\n  totalPosts: number;\n  totalEngagement: number;\n  pendingApproval: number;\n  scheduledPosts: number;\n  metrics: {\n    totalReach: number;\n    engagement: number;\n    newFollowers: number;\n    clickRate: number;\n  };\n  platformPerformance: Array<{\n    platform: string;\n    followers: number;\n    engagement: number;\n    change: number;\n  }>;\n  engagementOverTime: Array<{\n    date: string;\n    value: number;\n  }>;\n  topPerformingPosts: Array<{\n    id: string;\n    platform: string;\n    content: string;\n    publishedAt: string;\n    engagement: {\n      likes: number;\n      comments: number;\n      shares: number;\n    };\n    engagementRate: number;\n  }>;\n}\n\nconst platforms: PlatformStatus[] = [\n  { name: \"Instagram\", icon: \"fab fa-instagram\", connected: true, color: \"text-pink-500\" },\n  { name: \"Facebook\", icon: \"fab fa-facebook\", connected: true, color: \"text-blue-600\" },\n  { name: \"X (Twitter)\", icon: \"fab fa-twitter\", connected: true, color: \"text-blue-400\" },\n  { name: \"TikTok\", icon: \"fab fa-tiktok\", connected: true, color: \"text-gray-800\" },\n  { name: \"LinkedIn\", icon: \"fab fa-linkedin\", connected: true, color: \"text-blue-700\" },\n];\n\nexport default function Dashboard() {\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded-xl\" />\n            ))}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-xl\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Connected Platforms Status */}\n      <section>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Connected Platforms</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n          {platforms.map((platform) => (\n            <Card key={platform.name} className=\"text-center\">\n              <CardContent className=\"p-4\">\n                <i className={`${platform.icon} text-2xl ${platform.color} mb-2`} />\n                <p className=\"text-sm font-medium text-foreground\">{platform.name}</p>\n                <p className=\"text-xs text-green-600 mt-1 flex items-center justify-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\" />\n                  Connected\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* Key Metrics */}\n      <section>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Posts This Month</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\">\n                    {dashboardData?.totalPosts || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center\">\n                  <Share2 className=\"text-blue-600 dark:text-blue-400 w-6 h-6\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                <span className=\"text-green-600 text-sm font-medium\">12%</span>\n                <span className=\"text-muted-foreground text-sm ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Engagement</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\">\n                    {dashboardData?.totalEngagement.toLocaleString() || \"0\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center\">\n                  <Heart className=\"text-green-600 dark:text-green-400 w-6 h-6\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                <span className=\"text-green-600 text-sm font-medium\">23%</span>\n                <span className=\"text-muted-foreground text-sm ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending Approval</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\">\n                    {dashboardData?.pendingApproval || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-amber-100 dark:bg-amber-900 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-amber-600 dark:text-amber-400 w-6 h-6\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <Link href=\"/approval\">\n                  <Button variant=\"link\" className=\"p-0 h-auto text-primary\">\n                    Review Now →\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Scheduled Posts</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\">\n                    {dashboardData?.scheduledPosts || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"text-purple-600 dark:text-purple-400 w-6 h-6\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4\">\n                <span className=\"text-muted-foreground text-sm\">Next: Today 3:00 PM</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Quick Actions & Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Link href=\"/create\">\n              <Button variant=\"ghost\" className=\"w-full justify-between h-auto p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Edit className=\"text-primary w-5 h-5\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <div className=\"font-medium text-foreground\">Create New Post</div>\n                    <div className=\"text-sm text-muted-foreground\">Use AI to generate content</div>\n                  </div>\n                </div>\n                <div className=\"w-5 h-5 text-muted-foreground\" />\n              </Button>\n            </Link>\n\n            <Link href=\"/calendar\">\n              <Button variant=\"ghost\" className=\"w-full justify-between h-auto p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center\">\n                    <CalendarPlus className=\"text-green-600 dark:text-green-400 w-5 h-5\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <div className=\"font-medium text-foreground\">Schedule Content</div>\n                    <div className=\"text-sm text-muted-foreground\">Plan your posting calendar</div>\n                  </div>\n                </div>\n                <div className=\"w-5 h-5 text-muted-foreground\" />\n              </Button>\n            </Link>\n\n            <Button variant=\"ghost\" className=\"w-full justify-between h-auto p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center\">\n                  <Wand2 className=\"text-purple-600 dark:text-purple-400 w-5 h-5\" />\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-medium text-foreground\">AI Content Ideas</div>\n                  <div className=\"text-sm text-muted-foreground\">Get smart suggestions</div>\n                </div>\n              </div>\n              <div className=\"w-5 h-5 text-muted-foreground\" />\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"text-green-600 dark:text-green-400 w-4 h-4\" />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"text-sm font-medium text-foreground\">Post approved and published</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\"Morning coffee specials...\" • 2 hours ago</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                <Bot className=\"text-blue-600 dark:text-blue-400 w-4 h-4\" />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"text-sm font-medium text-foreground\">AI generated 3 new content ideas</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">For your café business • 4 hours ago</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-amber-100 dark:bg-amber-900 rounded-full flex items-center justify-center\">\n                <Clock className=\"text-amber-600 dark:text-amber-400 w-4 h-4\" />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"text-sm font-medium text-foreground\">Content pending approval</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\"Weekend brunch menu...\" • 6 hours ago</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center\">\n                <Calendar className=\"text-purple-600 dark:text-purple-400 w-4 h-4\" />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"text-sm font-medium text-foreground\">5 posts scheduled for this week</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">Cross-platform campaign • Yesterday</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12692},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { \n  Sparkles, \n  Zap, \n  BarChart3, \n  Calendar,\n  CheckCircle,\n  ArrowRight,\n  Users,\n  Globe,\n  Clock,\n  Shield\n} from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted\">\n      {/* Navigation */}\n      <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-6 w-6 text-primary\" />\n              <span className=\"text-xl font-bold\">MyAiMediaMgr</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/pricing\">\n                <Button variant=\"ghost\">Pricing</Button>\n              </Link>\n              <Button asChild>\n                <a href=\"/api/login\">Sign In with Google</a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-20\">\n        <div className=\"text-center max-w-3xl mx-auto\">\n          <h1 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\">\n            AI-Powered Social Media Management for Small Businesses\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Create, schedule, and publish content across all your social media platforms with the power of Google Cloud AI. Save time, grow your audience, and focus on what matters most - your business.\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Button size=\"lg\" asChild>\n              <a href=\"/api/login\" className=\"flex items-center gap-2\">\n                Start Free Trial <ArrowRight className=\"h-4 w-4\" />\n              </a>\n            </Button>\n            <Link href=\"/pricing\">\n              <Button size=\"lg\" variant=\"outline\">View Pricing</Button>\n            </Link>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            50 free credits • No credit card required\n          </p>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">Everything You Need to Succeed</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <Sparkles className=\"h-10 w-10 text-primary mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">AI Content Generation</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Generate engaging posts, images, and videos powered by Google's Gemini AI, Imagen 4, and Veo 3.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Calendar className=\"h-10 w-10 text-primary mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">Smart Scheduling</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Plan and schedule posts weeks in advance with our intelligent calendar system.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Globe className=\"h-10 w-10 text-primary mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">Multi-Platform Publishing</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Post to Instagram, Facebook, X (Twitter), LinkedIn, and TikTok from one dashboard.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <BarChart3 className=\"h-10 w-10 text-primary mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">Analytics & Insights</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Track engagement, reach, and growth with detailed analytics for each platform.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Users className=\"h-10 w-10 text-primary mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">Team Collaboration</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Work together with approval workflows and team member management.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Shield className=\"h-10 w-10 text-primary mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">Secure & Reliable</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Enterprise-grade security with Google Cloud infrastructure and OAuth authentication.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"container mx-auto px-4 py-16 bg-muted/50\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">How It Works</h2>\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"space-y-8\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                1\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Connect Your Social Media Accounts</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Securely link your Instagram, Facebook, X, LinkedIn, and TikTok accounts in seconds.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                2\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Create Content with AI</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Generate posts, images, and videos tailored to your brand using advanced AI models.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                3\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Schedule and Publish</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Plan your content calendar and let us handle the publishing at optimal times.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                4\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Track and Optimize</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Monitor performance and get AI-powered suggestions to improve engagement.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Preview */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">Simple, Transparent Pricing</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-semibold text-lg mb-2\">Starter</h3>\n              <div className=\"text-3xl font-bold mb-4\">$29<span className=\"text-sm font-normal\">/mo</span></div>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  500 credits/month\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  5 social platforms\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  AI content generation\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-primary\">\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-semibold text-lg mb-2\">Professional</h3>\n              <div className=\"text-3xl font-bold mb-4\">$99<span className=\"text-sm font-normal\">/mo</span></div>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  2,000 credits/month\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  Unlimited platforms\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  Video generation\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-semibold text-lg mb-2\">Enterprise</h3>\n              <div className=\"text-3xl font-bold mb-4\">$299<span className=\"text-sm font-normal\">/mo</span></div>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  10,000 credits/month\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  Unlimited everything\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  Priority support\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n        <div className=\"text-center mt-8\">\n          <Link href=\"/pricing\">\n            <Button size=\"lg\" variant=\"outline\">See All Plans & Features</Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-4 py-20\">\n        <Card className=\"bg-primary text-primary-foreground\">\n          <CardContent className=\"p-12 text-center\">\n            <h2 className=\"text-3xl font-bold mb-4\">Ready to Transform Your Social Media?</h2>\n            <p className=\"text-lg mb-8 opacity-90\">\n              Join thousands of small businesses already using AI to grow their online presence.\n            </p>\n            <Button size=\"lg\" variant=\"secondary\" asChild>\n              <a href=\"/api/login\" className=\"flex items-center gap-2\">\n                Get Started Free <Zap className=\"h-4 w-4\" />\n              </a>\n            </Button>\n            <p className=\"text-sm mt-4 opacity-75\">\n              No credit card required • 50 free credits • Cancel anytime\n            </p>\n          </CardContent>\n        </Card>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n              <span className=\"font-semibold\">MyAiMediaMgr</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              © 2025 MyAiMediaMgr. Powered by Google Cloud AI.\n            </p>\n            <div className=\"flex gap-4 text-sm\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Privacy</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Terms</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Contact</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":13028},"client/src/pages/library.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Grid, List, Clock, CheckCircle, AlertCircle, Archive, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport PostCard from \"@/components/content/post-card\";\nimport type { Post } from \"@shared/schema\";\n\nexport default function Library() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [filterPlatform, setFilterPlatform] = useState(\"all\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: posts, isLoading } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      return apiRequest(\"DELETE\", `/api/posts/${postId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Post Deleted\",\n        description: \"The post has been removed from your library.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n  });\n\n  const archiveMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      return apiRequest(\"PATCH\", `/api/posts/${postId}`, { \n        status: \"archived\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Post Archived\",\n        description: \"The post has been moved to archive.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n  });\n\n  const handleEdit = (postId: string) => {\n    toast({\n      title: \"Edit Post\",\n      description: \"Opening post editor...\",\n    });\n  };\n\n  const handleDelete = (postId: string) => {\n    if (confirm(\"Are you sure you want to delete this post?\")) {\n      deleteMutation.mutate(postId);\n    }\n  };\n\n  const handleArchive = (postId: string) => {\n    archiveMutation.mutate(postId);\n  };\n\n  const handlePreview = (postId: string) => {\n    toast({\n      title: \"Preview\",\n      description: \"Opening post preview...\",\n    });\n  };\n\n  // Filter posts based on search and filters\n  const filteredPosts = posts?.filter(post => {\n    const matchesSearch = post.content.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesPlatform = filterPlatform === \"all\" || post.platforms.includes(filterPlatform);\n    const matchesStatus = filterStatus === \"all\" || post.status === filterStatus;\n    \n    return matchesSearch && matchesPlatform && matchesStatus;\n  }) || [];\n\n  // Group posts by status\n  const groupedPosts = {\n    published: filteredPosts.filter(p => p.status === \"published\"),\n    scheduled: filteredPosts.filter(p => p.status === \"scheduled\" || p.status === \"approved\"),\n    draft: filteredPosts.filter(p => p.status === \"draft\"),\n    all: filteredPosts,\n  };\n\n  const stats = {\n    total: posts?.length || 0,\n    published: posts?.filter(p => p.status === \"published\").length || 0,\n    scheduled: posts?.filter(p => p.status === \"scheduled\" || p.status === \"approved\").length || 0,\n    draft: posts?.filter(p => p.status === \"draft\").length || 0,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-muted rounded w-48\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded-xl\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Content Library</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage and organize all your social media content\n          </p>\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Posts</p>\n                <p className=\"text-2xl font-bold text-foreground mt-1\">{stats.total}</p>\n              </div>\n              <Archive className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Published</p>\n                <p className=\"text-2xl font-bold text-foreground mt-1\">{stats.published}</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Scheduled</p>\n                <p className=\"text-2xl font-bold text-foreground mt-1\">{stats.scheduled}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Drafts</p>\n                <p className=\"text-2xl font-bold text-foreground mt-1\">{stats.draft}</p>\n              </div>\n              <AlertCircle className=\"w-8 h-8 text-yellow-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Search posts...\"\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Platform Filter */}\n            <Select value={filterPlatform} onValueChange={setFilterPlatform}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"All Platforms\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Platforms</SelectItem>\n                <SelectItem value=\"Instagram\">Instagram</SelectItem>\n                <SelectItem value=\"Facebook\">Facebook</SelectItem>\n                <SelectItem value=\"X (Twitter)\">X (Twitter)</SelectItem>\n                <SelectItem value=\"LinkedIn\">LinkedIn</SelectItem>\n                <SelectItem value=\"TikTok\">TikTok</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Status Filter */}\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"published\">Published</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* View Toggle */}\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                size=\"icon\"\n                onClick={() => setViewMode(\"grid\")}\n              >\n                <Grid className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                size=\"icon\"\n                onClick={() => setViewMode(\"list\")}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content Tabs */}\n      <Tabs defaultValue=\"all\">\n        <TabsList>\n          <TabsTrigger value=\"all\">All ({groupedPosts.all.length})</TabsTrigger>\n          <TabsTrigger value=\"published\">Published ({groupedPosts.published.length})</TabsTrigger>\n          <TabsTrigger value=\"scheduled\">Scheduled ({groupedPosts.scheduled.length})</TabsTrigger>\n          <TabsTrigger value=\"draft\">Drafts ({groupedPosts.draft.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"mt-6\">\n          {groupedPosts.all.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Archive className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium text-muted-foreground\">\n                  No posts found\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Try adjusting your search or filters\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className={`grid ${viewMode === \"grid\" ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" : \"grid-cols-1\"} gap-6`}>\n              {groupedPosts.all.map((post) => (\n                <PostCard\n                  key={post.id}\n                  post={post}\n                  showActions={true}\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  onPreview={handlePreview}\n                  compact={viewMode === \"list\"}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"published\" className=\"mt-6\">\n          {groupedPosts.published.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <CheckCircle className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium text-muted-foreground\">\n                  No published posts\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className={`grid ${viewMode === \"grid\" ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" : \"grid-cols-1\"} gap-6`}>\n              {groupedPosts.published.map((post) => (\n                <PostCard\n                  key={post.id}\n                  post={post}\n                  showActions={true}\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  onPreview={handlePreview}\n                  compact={viewMode === \"list\"}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"scheduled\" className=\"mt-6\">\n          {groupedPosts.scheduled.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Clock className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium text-muted-foreground\">\n                  No scheduled posts\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className={`grid ${viewMode === \"grid\" ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" : \"grid-cols-1\"} gap-6`}>\n              {groupedPosts.scheduled.map((post) => (\n                <PostCard\n                  key={post.id}\n                  post={post}\n                  showActions={true}\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  onPreview={handlePreview}\n                  compact={viewMode === \"list\"}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"draft\" className=\"mt-6\">\n          {groupedPosts.draft.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <AlertCircle className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium text-muted-foreground\">\n                  No draft posts\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className={`grid ${viewMode === \"grid\" ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" : \"grid-cols-1\"} gap-6`}>\n              {groupedPosts.draft.map((post) => (\n                <PostCard\n                  key={post.id}\n                  post={post}\n                  showActions={true}\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  onPreview={handlePreview}\n                  compact={viewMode === \"list\"}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13887},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Sparkles, Zap, Crown, Building2, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  displayName: string;\n  monthlyPrice: string;\n  yearlyPrice: string;\n  creditsPerMonth: number;\n  features: string[];\n  maxPlatforms: number;\n  analyticsAccess: boolean;\n  aiSuggestions: boolean;\n  prioritySupport: boolean;\n  teamMembers: number;\n  videoGeneration: boolean;\n  popular?: boolean;\n}\n\n// Credit cost breakdown\nconst CREDIT_COSTS = {\n  textPost: 1,\n  aiTextGeneration: 5,\n  imageGeneration: 50,\n  videoGeneration: 500,\n};\n\nexport default function Pricing() {\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n  const { data: user } = useQuery<{ subscriptionId?: string }>({ \n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    enabled: false // Don't automatically fetch user data\n  });\n  const { data: plans = [], isLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/subscription-plans\"],\n  });\n\n  const handleSubscribe = (planId: string) => {\n    // Navigate to Stripe payment page with plan details\n    navigate(`/subscribe?plan=${planId}&cycle=${billingCycle}`);\n  };\n\n  const getPlanIcon = (planId: string) => {\n    switch (planId) {\n      case \"free\":\n        return <Star className=\"w-5 h-5\" />;\n      case \"starter\":\n        return <Sparkles className=\"w-5 h-5\" />;\n      case \"professional\":\n        return <Zap className=\"w-5 h-5\" />;\n      case \"enterprise\":\n        return <Crown className=\"w-5 h-5\" />;\n      default:\n        return <Building2 className=\"w-5 h-5\" />;\n    }\n  };\n\n  const formatPrice = (price: string) => {\n    return parseFloat(price).toFixed(0);\n  };\n\n  // Add popular flag to professional plan\n  const enhancedPlans = plans.map(plan => ({\n    ...plan,\n    popular: plan.id === \"professional\",\n  }));\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold mb-4\">Choose Your Plan</h1>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Scale your social media presence with AI-powered content generation and management\n        </p>\n        \n        {/* Billing Cycle Toggle */}\n        <div className=\"mt-6 flex items-center justify-center gap-4\">\n          <Button\n            variant={billingCycle === 'monthly' ? 'default' : 'outline'}\n            onClick={() => setBillingCycle('monthly')}\n            size=\"sm\"\n            data-testid=\"button-monthly\"\n          >\n            Monthly\n          </Button>\n          <Button\n            variant={billingCycle === 'yearly' ? 'default' : 'outline'}\n            onClick={() => setBillingCycle('yearly')}\n            size=\"sm\"\n            data-testid=\"button-yearly\"\n          >\n            Yearly (Save 20%)\n          </Button>\n        </div>\n        \n        {/* Credit Calculator */}\n        <div className=\"mt-8 p-6 bg-muted/50 rounded-lg max-w-3xl mx-auto\">\n          <h3 className=\"font-semibold mb-3\">Credit Usage Guide</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-2xl\">{CREDIT_COSTS.textPost}</div>\n              <div className=\"text-muted-foreground\">Text Post</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-2xl\">{CREDIT_COSTS.aiTextGeneration}</div>\n              <div className=\"text-muted-foreground\">AI Text</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-2xl\">{CREDIT_COSTS.imageGeneration}</div>\n              <div className=\"text-muted-foreground\">Image</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-2xl\">{CREDIT_COSTS.videoGeneration}</div>\n              <div className=\"text-muted-foreground\">Video (8s)</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Pricing Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-7xl mx-auto\">\n        {enhancedPlans.map((plan) => (\n          <Card \n            key={plan.id}\n            className={cn(\n              \"relative flex flex-col\",\n              plan.popular && \"border-primary shadow-lg scale-105\"\n            )}\n          >\n            {plan.popular && (\n              <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                Most Popular\n              </Badge>\n            )}\n            \n            <CardHeader>\n              <div className=\"flex items-center gap-2 mb-2\">\n                {getPlanIcon(plan.id)}\n                <CardTitle>{plan.displayName}</CardTitle>\n              </div>\n              <div className=\"mt-4\">\n                <span className=\"text-3xl font-bold\">\n                  ${billingCycle === 'monthly' ? \n                    formatPrice(plan.monthlyPrice.toString()) : \n                    formatPrice(plan.yearlyPrice.toString())}\n                </span>\n                <span className=\"text-muted-foreground\">\n                  /{billingCycle === 'monthly' ? 'month' : 'year'}\n                </span>\n              </div>\n              <CardDescription>\n                {plan.creditsPerMonth.toLocaleString()} credits/month\n                {billingCycle === 'yearly' && (\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    Save 20%\n                  </Badge>\n                )}\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"flex-1\">\n              <ul className=\"space-y-2\">\n                {plan.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <Check className=\"w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-sm\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              {/* Usage Examples */}\n              <div className=\"mt-6 p-3 bg-muted/50 rounded text-xs\">\n                <div className=\"font-semibold mb-1\">Monthly capacity:</div>\n                <div className=\"space-y-1 text-muted-foreground\">\n                  <div>• {Math.floor(plan.creditsPerMonth / CREDIT_COSTS.textPost)} text posts</div>\n                  <div>• {Math.floor(plan.creditsPerMonth / CREDIT_COSTS.aiTextGeneration)} AI generations</div>\n                  {plan.creditsPerMonth >= CREDIT_COSTS.imageGeneration && (\n                    <div>• {Math.floor(plan.creditsPerMonth / CREDIT_COSTS.imageGeneration)} images</div>\n                  )}\n                  {plan.videoGeneration && (\n                    <div>• {Math.floor(plan.creditsPerMonth / CREDIT_COSTS.videoGeneration)} videos</div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n\n            <CardFooter>\n              <Button \n                className=\"w-full\" \n                variant={plan.popular ? \"default\" : \"outline\"}\n                onClick={() => handleSubscribe(plan.id)}\n                disabled={user?.subscriptionId === plan.id}\n                data-testid={`button-subscribe-${plan.id}`}\n              >\n                {user?.subscriptionId === plan.id ? \"Current Plan\" : \n                 plan.id === \"free\" ? \"Start 7-Day Free Trial\" : \"Subscribe Now\"}\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n\n      {/* Additional Information */}\n      <div className=\"mt-16 max-w-4xl mx-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Frequently Asked Questions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-1\">What are credits?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Credits are used for content generation and platform features. Different actions consume different amounts of credits based on computational cost.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-1\">Do unused credits roll over?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                No, credits reset each month. We recommend choosing a plan that matches your typical monthly usage.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-1\">Can I change plans anytime?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Yes! You can upgrade or downgrade your plan at any time. Changes take effect immediately and are prorated.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-1\">What payment methods do you accept?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                We accept all major credit cards and debit cards through our secure Stripe payment processor.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-1\">Is there a free trial?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Yes! The Free plan includes a 7-day trial with full access. You'll need to provide a valid credit card, but won't be charged during the trial period.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enterprise CTA */}\n      <div className=\"mt-12 text-center p-8 bg-gradient-to-r from-primary/10 to-primary/5 rounded-lg\">\n        <h2 className=\"text-2xl font-bold mb-3\">Need a Custom Solution?</h2>\n        <p className=\"text-muted-foreground mb-6 max-w-2xl mx-auto\">\n          Get custom credit packages, dedicated support, and enterprise features tailored to your business needs.\n        </p>\n        <Button size=\"lg\" variant=\"outline\">\n          Contact Sales\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":10747},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  User, \n  Building, \n  Palette, \n  Bell, \n  Shield, \n  Link as LinkIcon,\n  CheckCircle,\n  AlertCircle,\n  Settings as SettingsIcon\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User as UserType, Platform } from \"@shared/schema\";\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: user } = useQuery<UserType>({\n    queryKey: [\"/api/user\"],\n  });\n\n  const { data: platforms } = useQuery<Platform[]>({\n    queryKey: [\"/api/platforms\"],\n  });\n\n  const [profileData, setProfileData] = useState({\n    fullName: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() : \"\",\n    businessName: user?.businessName || \"\",\n    avatar: user?.profileImageUrl || \"\",\n  });\n\n  const [brandSettings, setBrandSettings] = useState({\n    brandColors: {\n      primary: \"#3b82f6\",\n      secondary: \"#64748b\",\n      accent: \"#f59e0b\",\n    },\n    toneOfVoice: \"friendly\",\n    brandKeywords: \"\",\n    logoUrl: \"\",\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    pushNotifications: true,\n    weeklyReports: true,\n    approvalReminders: true,\n    publishingAlerts: true,\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"PATCH\", \"/api/user\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n  });\n\n  const connectPlatformMutation = useMutation({\n    mutationFn: async (platformName: string) => {\n      return apiRequest(\"POST\", \"/api/platforms/connect\", { platform: platformName });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Platform connected successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/platforms\"] });\n    },\n  });\n\n  const handleProfileUpdate = () => {\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    const iconMap: { [key: string]: string } = {\n      \"Instagram\": \"fab fa-instagram text-pink-500\",\n      \"Facebook\": \"fab fa-facebook text-blue-600\",\n      \"X (Twitter)\": \"fab fa-twitter text-blue-400\",\n      \"TikTok\": \"fab fa-tiktok text-gray-800\",\n      \"LinkedIn\": \"fab fa-linkedin text-blue-700\",\n    };\n    return iconMap[platform] || \"fab fa-share text-gray-500\";\n  };\n\n  const allPlatforms = [\n    { name: \"Instagram\", description: \"Connect your Instagram business account\" },\n    { name: \"Facebook\", description: \"Connect your Facebook page\" },\n    { name: \"X (Twitter)\", description: \"Connect your Twitter account\" },\n    { name: \"TikTok\", description: \"Connect your TikTok business account\" },\n    { name: \"LinkedIn\", description: \"Connect your LinkedIn company page\" },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <SettingsIcon className=\"w-5 h-5\" />\n              <span>Settings</span>\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Configure your account and platform settings\n            </p>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n                <TabsTrigger value=\"platforms\">Platforms</TabsTrigger>\n                <TabsTrigger value=\"brand\">Brand</TabsTrigger>\n                <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n              </TabsList>\n\n              <div className=\"mt-6\">\n                {/* Profile Settings */}\n                <TabsContent value=\"profile\" className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"w-5 h-5 text-muted-foreground\" />\n                      <h3 className=\"text-lg font-semibold\">Personal Information</h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"fullName\">Full Name</Label>\n                        <Input\n                          id=\"fullName\"\n                          value={profileData.fullName}\n                          onChange={(e) => setProfileData({ ...profileData, fullName: e.target.value })}\n                          placeholder=\"Enter your full name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"businessName\">Business Name</Label>\n                        <Input\n                          id=\"businessName\"\n                          value={profileData.businessName}\n                          onChange={(e) => setProfileData({ ...profileData, businessName: e.target.value })}\n                          placeholder=\"Enter your business name\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"avatar\">Profile Picture URL</Label>\n                      <Input\n                        id=\"avatar\"\n                        value={profileData.avatar}\n                        onChange={(e) => setProfileData({ ...profileData, avatar: e.target.value })}\n                        placeholder=\"Enter profile picture URL\"\n                      />\n                    </div>\n\n                    <Button onClick={handleProfileUpdate} disabled={updateProfileMutation.isPending}>\n                      {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                    </Button>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Shield className=\"w-5 h-5 text-muted-foreground\" />\n                      <h3 className=\"text-lg font-semibold\">Security</h3>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <Button variant=\"outline\">Change Password</Button>\n                      <Button variant=\"outline\">Two-Factor Authentication</Button>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* Platform Settings */}\n                <TabsContent value=\"platforms\" className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <LinkIcon className=\"w-5 h-5 text-muted-foreground\" />\n                    <h3 className=\"text-lg font-semibold\">Connected Platforms</h3>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {allPlatforms.map((platform) => {\n                      const connectedPlatform = platforms?.find(p => p.name === platform.name);\n                      const isConnected = connectedPlatform?.isConnected;\n\n                      return (\n                        <div\n                          key={platform.name}\n                          className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <i className={getPlatformIcon(platform.name)} />\n                            <div>\n                              <p className=\"font-medium text-foreground\">{platform.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{platform.description}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            {isConnected ? (\n                              <>\n                                <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Connected\n                                </Badge>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  Disconnect\n                                </Button>\n                              </>\n                            ) : (\n                              <>\n                                <Badge variant=\"outline\" className=\"bg-gray-50 text-gray-700 border-gray-200\">\n                                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                                  Not Connected\n                                </Badge>\n                                <Button \n                                  size=\"sm\"\n                                  onClick={() => connectPlatformMutation.mutate(platform.name)}\n                                  disabled={connectPlatformMutation.isPending}\n                                >\n                                  Connect\n                                </Button>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </TabsContent>\n\n                {/* Brand Settings */}\n                <TabsContent value=\"brand\" className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Palette className=\"w-5 h-5 text-muted-foreground\" />\n                    <h3 className=\"text-lg font-semibold\">Brand Guidelines</h3>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium\">Brand Colors</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"primaryColor\">Primary Color</Label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input\n                              id=\"primaryColor\"\n                              type=\"color\"\n                              value={brandSettings.brandColors.primary}\n                              onChange={(e) => setBrandSettings({\n                                ...brandSettings,\n                                brandColors: { ...brandSettings.brandColors, primary: e.target.value }\n                              })}\n                              className=\"w-16 h-10\"\n                            />\n                            <Input\n                              value={brandSettings.brandColors.primary}\n                              onChange={(e) => setBrandSettings({\n                                ...brandSettings,\n                                brandColors: { ...brandSettings.brandColors, primary: e.target.value }\n                              })}\n                              placeholder=\"#3b82f6\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"secondaryColor\">Secondary Color</Label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input\n                              id=\"secondaryColor\"\n                              type=\"color\"\n                              value={brandSettings.brandColors.secondary}\n                              onChange={(e) => setBrandSettings({\n                                ...brandSettings,\n                                brandColors: { ...brandSettings.brandColors, secondary: e.target.value }\n                              })}\n                              className=\"w-16 h-10\"\n                            />\n                            <Input\n                              value={brandSettings.brandColors.secondary}\n                              onChange={(e) => setBrandSettings({\n                                ...brandSettings,\n                                brandColors: { ...brandSettings.brandColors, secondary: e.target.value }\n                              })}\n                              placeholder=\"#64748b\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"accentColor\">Accent Color</Label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input\n                              id=\"accentColor\"\n                              type=\"color\"\n                              value={brandSettings.brandColors.accent}\n                              onChange={(e) => setBrandSettings({\n                                ...brandSettings,\n                                brandColors: { ...brandSettings.brandColors, accent: e.target.value }\n                              })}\n                              className=\"w-16 h-10\"\n                            />\n                            <Input\n                              value={brandSettings.brandColors.accent}\n                              onChange={(e) => setBrandSettings({\n                                ...brandSettings,\n                                brandColors: { ...brandSettings.brandColors, accent: e.target.value }\n                              })}\n                              placeholder=\"#f59e0b\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"logoUrl\">Logo URL</Label>\n                      <Input\n                        id=\"logoUrl\"\n                        value={brandSettings.logoUrl}\n                        onChange={(e) => setBrandSettings({ ...brandSettings, logoUrl: e.target.value })}\n                        placeholder=\"Enter your logo URL\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"brandKeywords\">Brand Keywords</Label>\n                      <Textarea\n                        id=\"brandKeywords\"\n                        value={brandSettings.brandKeywords}\n                        onChange={(e) => setBrandSettings({ ...brandSettings, brandKeywords: e.target.value })}\n                        placeholder=\"Enter keywords that represent your brand (e.g., coffee, cozy, local, artisan)\"\n                        rows={3}\n                      />\n                    </div>\n\n                    <Button>Save Brand Settings</Button>\n                  </div>\n                </TabsContent>\n\n                {/* Notification Settings */}\n                <TabsContent value=\"notifications\" className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Bell className=\"w-5 h-5 text-muted-foreground\" />\n                    <h3 className=\"text-lg font-semibold\">Notification Preferences</h3>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Email Notifications</p>\n                          <p className=\"text-sm text-muted-foreground\">Receive email updates about your account</p>\n                        </div>\n                        <Switch\n                          checked={notificationSettings.emailNotifications}\n                          onCheckedChange={(checked) => \n                            setNotificationSettings({ ...notificationSettings, emailNotifications: checked })\n                          }\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Push Notifications</p>\n                          <p className=\"text-sm text-muted-foreground\">Get push notifications on your device</p>\n                        </div>\n                        <Switch\n                          checked={notificationSettings.pushNotifications}\n                          onCheckedChange={(checked) => \n                            setNotificationSettings({ ...notificationSettings, pushNotifications: checked })\n                          }\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Weekly Reports</p>\n                          <p className=\"text-sm text-muted-foreground\">Receive weekly performance summaries</p>\n                        </div>\n                        <Switch\n                          checked={notificationSettings.weeklyReports}\n                          onCheckedChange={(checked) => \n                            setNotificationSettings({ ...notificationSettings, weeklyReports: checked })\n                          }\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Approval Reminders</p>\n                          <p className=\"text-sm text-muted-foreground\">Get notified when content needs approval</p>\n                        </div>\n                        <Switch\n                          checked={notificationSettings.approvalReminders}\n                          onCheckedChange={(checked) => \n                            setNotificationSettings({ ...notificationSettings, approvalReminders: checked })\n                          }\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Publishing Alerts</p>\n                          <p className=\"text-sm text-muted-foreground\">Get alerts when posts are published</p>\n                        </div>\n                        <Switch\n                          checked={notificationSettings.publishingAlerts}\n                          onCheckedChange={(checked) => \n                            setNotificationSettings({ ...notificationSettings, publishingAlerts: checked })\n                          }\n                        />\n                      </div>\n                    </div>\n\n                    <Button>Save Notification Settings</Button>\n                  </div>\n                </TabsContent>\n              </div>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19955},"client/src/pages/subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Loader2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\ninterface SubscriptionPlan {\n  id: string;\n  displayName: string;\n  monthlyPrice: number;\n  yearlyPrice: number;\n  creditsPerMonth: number;\n  features: string[];\n  stripePriceId?: string;\n}\n\nconst SubscribeForm = ({ plan, billingCycle }: { plan: SubscriptionPlan; billingCycle: 'monthly' | 'yearly' }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [, navigate] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/subscription-success`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-subscribe\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || !elements || isProcessing}\n        className=\"w-full\"\n        size=\"lg\"\n        data-testid=\"button-submit-payment\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          `Start ${plan.id === 'free' ? 'Free Trial' : 'Subscription'}`\n        )}\n      </Button>\n      {plan.id === 'free' && (\n        <p className=\"text-sm text-muted-foreground text-center\">\n          7-day free trial • Cancel anytime • No charges during trial\n        </p>\n      )}\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [selectedPlan, setSelectedPlan] = useState<SubscriptionPlan | null>(null);\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n  const [plans, setPlans] = useState<SubscriptionPlan[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    // Get plan from URL params\n    const params = new URLSearchParams(window.location.search);\n    const planId = params.get('plan') || 'starter';\n    const cycle = params.get('cycle') as 'monthly' | 'yearly' || 'monthly';\n    setBillingCycle(cycle);\n\n    // Fetch available plans\n    apiRequest(\"GET\", \"/api/subscription-plans\")\n      .then((res) => res.json())\n      .then((data) => {\n        setPlans(data);\n        const plan = data.find((p: SubscriptionPlan) => p.id === planId);\n        if (plan) {\n          setSelectedPlan(plan);\n          // Create subscription intent\n          return apiRequest(\"POST\", \"/api/create-subscription\", {\n            planId: plan.id,\n            billingCycle: cycle\n          });\n        }\n        throw new Error(\"Invalid plan selected\");\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else if (data.message === \"Already subscribed\") {\n          toast({\n            title: \"Already Subscribed\",\n            description: \"You already have an active subscription\",\n          });\n          navigate(\"/dashboard\");\n        }\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error setting up subscription:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load subscription options\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading || !clientSecret || !selectedPlan) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-background to-muted/20\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" data-testid=\"loader-subscribe\"/>\n      </div>\n    );\n  }\n\n  const price = billingCycle === 'monthly' ? selectedPlan.monthlyPrice : selectedPlan.yearlyPrice;\n  const savings = billingCycle === 'yearly' ? \n    (parseFloat(selectedPlan.monthlyPrice.toString()) * 12 - parseFloat(selectedPlan.yearlyPrice.toString())) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted/20 py-12\">\n      <div className=\"container max-w-2xl mx-auto px-4\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-2\">Complete Your Subscription</h1>\n          <p className=\"text-muted-foreground\">\n            {selectedPlan.id === 'free' ? \n              'Start your 7-day free trial with full access' : \n              'Secure payment powered by Stripe'\n            }\n          </p>\n        </div>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-2xl\">{selectedPlan.displayName}</CardTitle>\n                <CardDescription>\n                  {billingCycle === 'monthly' ? 'Monthly' : 'Yearly'} Billing\n                  {billingCycle === 'yearly' && savings > 0 && (\n                    <Badge className=\"ml-2\" variant=\"secondary\">\n                      Save ${savings.toFixed(0)}/year\n                    </Badge>\n                  )}\n                </CardDescription>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-3xl font-bold\">${price}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  per {billingCycle === 'monthly' ? 'month' : 'year'}\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 mb-6\">\n              <div className=\"font-semibold text-sm text-muted-foreground mb-2\">\n                Included in your plan:\n              </div>\n              {selectedPlan.features.map((feature, index) => (\n                <div key={index} className=\"flex items-center\" data-testid={`feature-${index}`}>\n                  <Check className=\"h-4 w-4 text-green-500 mr-2 flex-shrink-0\" />\n                  <span className=\"text-sm\">{feature}</span>\n                </div>\n              ))}\n              <div className=\"flex items-center pt-2\">\n                <Check className=\"h-4 w-4 text-green-500 mr-2 flex-shrink-0\" />\n                <span className=\"text-sm font-semibold\">\n                  {selectedPlan.creditsPerMonth.toLocaleString()} AI credits per month\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Information</CardTitle>\n            <CardDescription>\n              Enter your payment details below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Elements stripe={stripePromise} options={{ clientSecret }}>\n              <SubscribeForm plan={selectedPlan} billingCycle={billingCycle} />\n            </Elements>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-8 text-center text-sm text-muted-foreground\">\n          <p>Your payment info is secure and encrypted.</p>\n          <p>You can cancel or change your subscription anytime.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8295},"client/src/pages/subscription-success.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, ArrowRight, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SubscriptionSuccess() {\n  const [, navigate] = useLocation();\n  const [isVerifying, setIsVerifying] = useState(true);\n  const [subscriptionDetails, setSubscriptionDetails] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Verify payment status with backend\n    const params = new URLSearchParams(window.location.search);\n    const paymentIntent = params.get('payment_intent');\n    const clientSecret = params.get('payment_intent_client_secret');\n\n    if (paymentIntent) {\n      apiRequest(\"POST\", \"/api/verify-subscription\", {\n        paymentIntent,\n        clientSecret\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.success) {\n            setSubscriptionDetails(data.subscription);\n            toast({\n              title: \"Welcome aboard!\",\n              description: \"Your subscription is now active\",\n            });\n          } else {\n            throw new Error(data.message || \"Verification failed\");\n          }\n          setIsVerifying(false);\n        })\n        .catch((error) => {\n          console.error(\"Verification error:\", error);\n          toast({\n            title: \"Verification Failed\",\n            description: \"Please contact support if you were charged\",\n            variant: \"destructive\",\n          });\n          setIsVerifying(false);\n        });\n    } else {\n      // No payment intent, just show success\n      setIsVerifying(false);\n    }\n  }, []);\n\n  if (isVerifying) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-background to-muted/20\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col items-center space-y-4\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              <p className=\"text-muted-foreground\">Verifying your subscription...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted/20 flex items-center justify-center py-12\">\n      <div className=\"container max-w-2xl mx-auto px-4\">\n        <Card className=\"border-green-200 dark:border-green-900\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"h-10 w-10 text-green-600 dark:text-green-400\" />\n            </div>\n            <CardTitle className=\"text-3xl\">Payment Successful!</CardTitle>\n            <CardDescription className=\"text-lg mt-2\">\n              Your subscription is now active\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {subscriptionDetails && (\n              <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Plan:</span>\n                  <span className=\"font-semibold\">{subscriptionDetails.planName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Billing Cycle:</span>\n                  <span className=\"font-semibold capitalize\">{subscriptionDetails.billingCycle}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Credits Available:</span>\n                  <span className=\"font-semibold\">{subscriptionDetails.credits}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Next Billing Date:</span>\n                  <span className=\"font-semibold\">\n                    {new Date(subscriptionDetails.nextBillingDate).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-lg\">What's Next?</h3>\n              <ul className=\"space-y-2\">\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Your AI credits have been added to your account</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">You can now create unlimited campaigns</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">Access to all premium features is enabled</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm\">You'll receive a receipt via email shortly</span>\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n              <Button \n                onClick={() => navigate(\"/dashboard\")}\n                className=\"flex-1\"\n                size=\"lg\"\n                data-testid=\"button-go-dashboard\"\n              >\n                Go to Dashboard\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n              <Button \n                onClick={() => navigate(\"/campaigns/new\")}\n                variant=\"outline\"\n                className=\"flex-1\"\n                size=\"lg\"\n                data-testid=\"button-create-campaign\"\n              >\n                Create First Campaign\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          <p>Need help? Contact our support team at support@myaimediamgr.com</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6634},"client/src/components/content/ai-suggestions.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bot } from \"lucide-react\";\n\ninterface AiSuggestionsProps {\n  suggestions: string[];\n  onSelectSuggestion: (suggestion: string) => void;\n}\n\nexport default function AiSuggestions({ suggestions, onSelectSuggestion }: AiSuggestionsProps) {\n  return (\n    <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n            <Bot className=\"text-blue-600 dark:text-blue-400 w-4 h-4\" />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">AI Content Suggestions</h4>\n            <div className=\"space-y-2\">\n              {suggestions.map((suggestion, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"w-full text-left justify-start h-auto p-3 bg-white dark:bg-gray-800 border-blue-200 dark:border-blue-700 hover:bg-blue-25 dark:hover:bg-blue-900\"\n                  onClick={() => onSelectSuggestion(suggestion)}\n                >\n                  <p className=\"text-sm text-gray-800 dark:text-gray-200 whitespace-normal\">\n                    {suggestion}\n                  </p>\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1610},"client/src/components/content/approval-item.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, Edit, X, Check, Bot, Image, Video } from \"lucide-react\";\nimport type { Post } from \"@shared/schema\";\n\ninterface ApprovalItemProps {\n  post: Post;\n  onApprove: () => void;\n  onReject: () => void;\n  isProcessing: boolean;\n}\n\nexport default function ApprovalItem({ post, onApprove, onReject, isProcessing }: ApprovalItemProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-amber-50 text-amber-700 border-amber-200\";\n      case \"approved\":\n        return \"bg-green-50 text-green-700 border-green-200\";\n      case \"rejected\":\n        return \"bg-red-50 text-red-700 border-red-200\";\n      default:\n        return \"bg-gray-50 text-gray-700 border-gray-200\";\n    }\n  };\n\n  const formatTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const postDate = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - postDate.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours === 1) return \"1 hour ago\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    if (diffInHours < 48) return \"Yesterday\";\n    return `${Math.floor(diffInHours / 24)} days ago`;\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    const iconMap: { [key: string]: string } = {\n      \"Instagram\": \"fab fa-instagram text-pink-500\",\n      \"Facebook\": \"fab fa-facebook text-blue-600\",\n      \"X (Twitter)\": \"fab fa-twitter text-blue-400\",\n      \"TikTok\": \"fab fa-tiktok text-gray-800\",\n      \"LinkedIn\": \"fab fa-linkedin text-blue-700\",\n    };\n    return iconMap[platform] || \"fab fa-share text-gray-500\";\n  };\n\n  return (\n    <Card className={`border-2 ${post.status === \"pending\" ? \"border-amber-200 bg-amber-50/30\" : \"\"}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex space-x-1\">\n              {post.platforms.map((platform) => (\n                <i key={platform} className={getPlatformIcon(platform)} />\n              ))}\n            </div>\n            <div>\n              <p className=\"font-medium text-foreground\">\n                {post.content.slice(0, 30)}...\n              </p>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span>Created {formatTimeAgo(post.createdAt!)}</span>\n                {post.aiGenerated && (\n                  <>\n                    <span>•</span>\n                    <div className=\"flex items-center space-x-1\">\n                      <Bot className=\"w-3 h-3\" />\n                      <span>AI Generated</span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <Badge variant=\"outline\" className={getStatusColor(post.status)}>\n            {post.status.charAt(0).toUpperCase() + post.status.slice(1)}\n          </Badge>\n        </div>\n\n        <div className=\"mb-4\">\n          <p className=\"text-foreground mb-2\">{post.content}</p>\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            {post.mediaUrls && post.mediaUrls.length > 0 && (\n              <span className=\"flex items-center space-x-1\">\n                {post.mediaUrls[0].includes('video') ? (\n                  <>\n                    <Video className=\"w-4 h-4\" />\n                    <span>Video attached</span>\n                  </>\n                ) : (\n                  <>\n                    <Image className=\"w-4 h-4\" />\n                    <span>Image attached</span>\n                  </>\n                )}\n              </span>\n            )}\n            {post.scheduledFor && (\n              <>\n                <span>•</span>\n                <span>\n                  Scheduled for: {new Date(post.scheduledFor).toLocaleDateString('en-US', {\n                    weekday: 'short',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                  })}\n                </span>\n              </>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"link\" size=\"sm\" className=\"p-0 h-auto\">\n              <Eye className=\"w-4 h-4 mr-1\" />\n              Preview\n            </Button>\n            <Button variant=\"link\" size=\"sm\" className=\"p-0 h-auto\">\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit\n            </Button>\n          </div>\n          \n          {post.status === \"pending\" && (\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onReject}\n                disabled={isProcessing}\n                className=\"text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n              >\n                <X className=\"w-4 h-4 mr-1\" />\n                Reject\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={onApprove}\n                disabled={isProcessing}\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                <Check className=\"w-4 h-4 mr-1\" />\n                Approve & Schedule\n              </Button>\n            </div>\n          )}\n\n          {post.status === \"rejected\" && post.rejectionReason && (\n            <div className=\"text-sm text-destructive\">\n              Rejected: {post.rejectionReason}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5885},"client/src/components/content/content-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight, Plus } from \"lucide-react\";\nimport type { Post } from \"@shared/schema\";\n\ninterface ContentCalendarProps {\n  posts: Post[];\n  onDateSelect?: (date: Date) => void;\n  onPostClick?: (post: Post) => void;\n  onCreatePost?: () => void;\n}\n\nexport default function ContentCalendar({ \n  posts, \n  onDateSelect, \n  onPostClick, \n  onCreatePost \n}: ContentCalendarProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (direction === 'prev') {\n      newDate.setMonth(currentDate.getMonth() - 1);\n    } else {\n      newDate.setMonth(currentDate.getMonth() + 1);\n    }\n    setCurrentDate(newDate);\n  };\n\n  const getDaysInMonth = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add all days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(day);\n    }\n    \n    return days;\n  };\n\n  const getPostsForDay = (day: number) => {\n    return posts.filter(post => {\n      const postDate = new Date(post.scheduledFor || post.publishedAt!);\n      return postDate.getDate() === day &&\n             postDate.getMonth() === currentDate.getMonth() &&\n             postDate.getFullYear() === currentDate.getFullYear();\n    });\n  };\n\n  const getPlatformColor = (platform: string) => {\n    const colorMap: { [key: string]: string } = {\n      \"Instagram\": \"bg-pink-500\",\n      \"Facebook\": \"bg-blue-600\", \n      \"X (Twitter)\": \"bg-blue-400\",\n      \"TikTok\": \"bg-gray-800\",\n      \"LinkedIn\": \"bg-blue-700\",\n    };\n    return colorMap[platform] || \"bg-gray-500\";\n  };\n\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const today = new Date();\n  const isToday = (day: number) => {\n    return today.getDate() === day && \n           today.getMonth() === currentDate.getMonth() && \n           today.getFullYear() === currentDate.getFullYear();\n  };\n\n  const days = getDaysInMonth(currentDate);\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Content Calendar</CardTitle>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => navigateMonth('prev')}>\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <span className=\"font-medium text-foreground min-w-[120px] text-center\">\n                {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n              </span>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => navigateMonth('next')}>\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            {onCreatePost && (\n              <Button onClick={onCreatePost}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Schedule Post\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {/* Calendar Grid */}\n        <div className=\"grid grid-cols-7 gap-px bg-border rounded-lg overflow-hidden\">\n          {/* Calendar header */}\n          {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n            <div key={day} className=\"bg-muted p-3 text-center text-sm font-medium text-muted-foreground\">\n              {day}\n            </div>\n          ))}\n          \n          {/* Calendar days */}\n          {days.map((day, index) => (\n            <div\n              key={index}\n              className={`bg-card p-2 h-24 text-sm relative cursor-pointer hover:bg-muted/50 transition-colors ${\n                day && isToday(day) ? \"bg-blue-50 dark:bg-blue-950\" : \"\"\n              }`}\n              onClick={() => day && onDateSelect && onDateSelect(new Date(currentDate.getFullYear(), currentDate.getMonth(), day))}\n            >\n              {day && (\n                <>\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className={`font-medium text-xs ${\n                      isToday(day) ? \"text-blue-600 dark:text-blue-400\" : \"text-foreground\"\n                    }`}>\n                      {day}\n                    </span>\n                    {isToday(day) && (\n                      <Badge variant=\"outline\" className=\"text-xs px-1 py-0 h-4 bg-blue-100 text-blue-600 border-blue-200\">\n                        Today\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-1\">\n                    {getPostsForDay(day).slice(0, 2).map((post) => (\n                      <div\n                        key={post.id}\n                        className=\"text-xs p-1 bg-primary/10 rounded border-l-2 border-primary cursor-pointer hover:bg-primary/20 transition-colors\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onPostClick && onPostClick(post);\n                        }}\n                      >\n                        <div className=\"flex items-center space-x-1 mb-1\">\n                          {post.platforms.slice(0, 3).map((platform) => (\n                            <div\n                              key={platform}\n                              className={`w-2 h-2 rounded-full ${getPlatformColor(platform)}`}\n                            />\n                          ))}\n                          {post.scheduledFor && (\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(post.scheduledFor).toLocaleTimeString('en-US', { \n                                hour: 'numeric', \n                                minute: '2-digit' \n                              })}\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"line-clamp-2 text-foreground/80\">\n                          {post.content.slice(0, 40)}...\n                        </p>\n                      </div>\n                    ))}\n                    \n                    {getPostsForDay(day).length > 2 && (\n                      <div className=\"text-xs text-muted-foreground text-center py-1\">\n                        +{getPostsForDay(day).length - 2} more\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Legend */}\n        <div className=\"mt-4 flex items-center justify-center space-x-6 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-blue-600 rounded-full\" />\n            <span className=\"text-muted-foreground\">Facebook</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-pink-500 rounded-full\" />\n            <span className=\"text-muted-foreground\">Instagram</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-blue-400 rounded-full\" />\n            <span className=\"text-muted-foreground\">X (Twitter)</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-blue-700 rounded-full\" />\n            <span className=\"text-muted-foreground\">LinkedIn</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-gray-800 rounded-full\" />\n            <span className=\"text-muted-foreground\">TikTok</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8418},"client/src/components/content/content-editor.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Bold, \n  Italic, \n  Link as LinkIcon, \n  Image, \n  Video,\n  Hash,\n  AtSign,\n  Smile,\n  Paperclip\n} from \"lucide-react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\ninterface ContentEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  maxLength?: number;\n  showToolbar?: boolean;\n  showCharacterCount?: boolean;\n}\n\nconst emojis = [\"😀\", \"😂\", \"❤️\", \"👍\", \"🔥\", \"💯\", \"✨\", \"🎉\", \"☕\", \"🥐\", \"🌟\", \"💪\"];\n\nexport default function ContentEditor({ \n  value, \n  onChange, \n  placeholder = \"What's on your mind?\",\n  maxLength = 2200,\n  showToolbar = true,\n  showCharacterCount = true\n}: ContentEditorProps) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n\n  const insertText = (textToInsert: string, cursorOffset: number = 0) => {\n    if (!textareaRef.current) return;\n\n    const textarea = textareaRef.current;\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const newValue = value.substring(0, start) + textToInsert + value.substring(end);\n    \n    onChange(newValue);\n    \n    // Set cursor position after insert\n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + textToInsert.length + cursorOffset, start + textToInsert.length + cursorOffset);\n    }, 0);\n  };\n\n  const wrapSelectedText = (before: string, after: string = before) => {\n    if (!textareaRef.current) return;\n\n    const textarea = textareaRef.current;\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = value.substring(start, end);\n    \n    if (selectedText) {\n      const newText = before + selectedText + after;\n      const newValue = value.substring(0, start) + newText + value.substring(end);\n      onChange(newValue);\n      \n      setTimeout(() => {\n        textarea.focus();\n        textarea.setSelectionRange(start + before.length, start + before.length + selectedText.length);\n      }, 0);\n    } else {\n      insertText(before + after, -after.length);\n    }\n  };\n\n  const handleEmojiClick = (emoji: string) => {\n    insertText(emoji);\n    setShowEmojiPicker(false);\n  };\n\n  const characterCount = value.length;\n  const isNearLimit = characterCount > maxLength * 0.8;\n  const isOverLimit = characterCount > maxLength;\n\n  return (\n    <div className=\"space-y-2\">\n      {showToolbar && (\n        <div className=\"flex items-center space-x-2 p-3 bg-muted border border-border rounded-t-lg\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => wrapSelectedText(\"**\")}\n            className=\"h-8 w-8 p-0\"\n          >\n            <Bold className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => wrapSelectedText(\"*\")}\n            className=\"h-8 w-8 p-0\"\n          >\n            <Italic className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => wrapSelectedText(\"[\", \"](https://)\")}\n            className=\"h-8 w-8 p-0\"\n          >\n            <LinkIcon className=\"w-4 h-4\" />\n          </Button>\n          \n          <div className=\"w-px h-6 bg-border\" />\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => insertText(\"#\")}\n            className=\"h-8 w-8 p-0\"\n          >\n            <Hash className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => insertText(\"@\")}\n            className=\"h-8 w-8 p-0\"\n          >\n            <AtSign className=\"w-4 h-4\" />\n          </Button>\n          \n          <Popover open={showEmojiPicker} onOpenChange={setShowEmojiPicker}>\n            <PopoverTrigger asChild>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <Smile className=\"w-4 h-4\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-64 p-2\">\n              <div className=\"grid grid-cols-6 gap-1\">\n                {emojis.map((emoji) => (\n                  <Button\n                    key={emoji}\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleEmojiClick(emoji)}\n                    className=\"h-8 w-8 p-0 text-lg\"\n                  >\n                    {emoji}\n                  </Button>\n                ))}\n              </div>\n            </PopoverContent>\n          </Popover>\n          \n          <div className=\"w-px h-6 bg-border\" />\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n          >\n            <Image className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n          >\n            <Video className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n          >\n            <Paperclip className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      )}\n      \n      <div className=\"relative\">\n        <Textarea\n          ref={textareaRef}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder={placeholder}\n          className={`resize-none min-h-[120px] ${showToolbar ? 'rounded-t-none' : ''} ${\n            isOverLimit ? 'border-destructive focus-visible:ring-destructive' : ''\n          }`}\n        />\n        \n        {showCharacterCount && (\n          <div className={`absolute bottom-2 right-2 text-xs ${\n            isOverLimit ? 'text-destructive' : \n            isNearLimit ? 'text-amber-600' : \n            'text-muted-foreground'\n          }`}>\n            {characterCount}/{maxLength}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6560},"client/src/components/content/platform-preview.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Heart, MessageSquare, Share2, Bookmark, Send, ThumbsUp, Repeat, MoreHorizontal } from \"lucide-react\";\n\ninterface PlatformPreviewProps {\n  platform: string;\n  content: string;\n  businessName?: string;\n  imageUrl?: string;\n}\n\nexport default function PlatformPreview({ platform, content, businessName = \"Your Business\", imageUrl }: PlatformPreviewProps) {\n  const getCharacterLimit = (platform: string) => {\n    switch (platform) {\n      case \"X (Twitter)\":\n        return 280;\n      case \"Instagram\":\n        return 2200;\n      case \"Facebook\":\n        return 63206;\n      case \"LinkedIn\":\n        return 3000;\n      case \"TikTok\":\n        return 2200;\n      default:\n        return 2200;\n    }\n  };\n\n  const characterLimit = getCharacterLimit(platform);\n  const isOverLimit = content.length > characterLimit;\n\n  if (platform === \"Instagram\") {\n    return (\n      <Card className=\"overflow-hidden\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarFallback>{businessName[0]}</AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-semibold\">{businessName.toLowerCase().replace(/\\s+/g, '_')}</p>\n                <p className=\"text-xs text-muted-foreground\">Sponsored</p>\n              </div>\n            </div>\n            <MoreHorizontal className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n        </CardHeader>\n        <div className=\"aspect-square bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900 dark:to-pink-900 relative\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Post\" className=\"w-full h-full object-cover\" />\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <p className=\"text-muted-foreground\">Image Preview</p>\n            </div>\n          )}\n        </div>\n        <CardContent className=\"pt-3\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-4\">\n              <Heart className=\"h-6 w-6\" />\n              <MessageSquare className=\"h-6 w-6\" />\n              <Send className=\"h-6 w-6\" />\n            </div>\n            <Bookmark className=\"h-6 w-6\" />\n          </div>\n          <p className=\"text-sm font-semibold mb-1\">1,234 likes</p>\n          <p className=\"text-sm\">\n            <span className=\"font-semibold\">{businessName.toLowerCase().replace(/\\s+/g, '_')}</span>{' '}\n            {content || \"Your Instagram content will appear here...\"}\n          </p>\n          {isOverLimit && (\n            <Badge variant=\"destructive\" className=\"mt-2\">\n              {content.length}/{characterLimit} characters\n            </Badge>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (platform === \"Facebook\") {\n    return (\n      <Card className=\"overflow-hidden\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarFallback>{businessName[0]}</AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"text-sm font-semibold\">{businessName}</p>\n              <p className=\"text-xs text-muted-foreground\">Sponsored · Just now · 🌐</p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <p className=\"text-sm mb-3\">{content || \"Your Facebook content will appear here...\"}</p>\n          {imageUrl && (\n            <div className=\"aspect-video bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-lg mb-3\">\n              <img src={imageUrl} alt=\"Post\" className=\"w-full h-full object-cover rounded-lg\" />\n            </div>\n          )}\n          <div className=\"flex items-center justify-between py-2 border-t border-b\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"flex -space-x-1\">\n                <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                  <ThumbsUp className=\"w-3 h-3 text-white\" />\n                </div>\n                <div className=\"w-5 h-5 rounded-full bg-red-500 flex items-center justify-center\">\n                  <Heart className=\"w-3 h-3 text-white\" />\n                </div>\n              </div>\n              <span className=\"text-xs text-muted-foreground ml-1\">324</span>\n            </div>\n            <div className=\"flex gap-3 text-xs text-muted-foreground\">\n              <span>45 comments</span>\n              <span>12 shares</span>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-around pt-2\">\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-4 py-2 rounded\">\n              <ThumbsUp className=\"h-4 w-4\" />\n              Like\n            </button>\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-4 py-2 rounded\">\n              <MessageSquare className=\"h-4 w-4\" />\n              Comment\n            </button>\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-4 py-2 rounded\">\n              <Share2 className=\"h-4 w-4\" />\n              Share\n            </button>\n          </div>\n          {isOverLimit && (\n            <Badge variant=\"destructive\" className=\"mt-2\">\n              {content.length}/{characterLimit} characters\n            </Badge>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (platform === \"X (Twitter)\") {\n    return (\n      <Card className=\"overflow-hidden\">\n        <CardContent className=\"pt-4\">\n          <div className=\"flex gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarFallback>{businessName[0]}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-1\">\n                <p className=\"text-sm font-semibold\">{businessName}</p>\n                <Badge variant=\"secondary\" className=\"text-xs px-1\">Ad</Badge>\n                <p className=\"text-sm text-muted-foreground\">@{businessName.toLowerCase().replace(/\\s+/g, '')} · now</p>\n              </div>\n              <p className=\"text-sm mt-1\">{content || \"Your tweet will appear here...\"}</p>\n              {imageUrl && (\n                <div className=\"mt-3 aspect-video bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 rounded-xl overflow-hidden\">\n                  <img src={imageUrl} alt=\"Post\" className=\"w-full h-full object-cover\" />\n                </div>\n              )}\n              <div className=\"flex items-center justify-between mt-3\">\n                <button className=\"flex items-center gap-1 text-muted-foreground hover:text-blue-500\">\n                  <MessageSquare className=\"h-4 w-4\" />\n                  <span className=\"text-xs\">12</span>\n                </button>\n                <button className=\"flex items-center gap-1 text-muted-foreground hover:text-green-500\">\n                  <Repeat className=\"h-4 w-4\" />\n                  <span className=\"text-xs\">34</span>\n                </button>\n                <button className=\"flex items-center gap-1 text-muted-foreground hover:text-red-500\">\n                  <Heart className=\"h-4 w-4\" />\n                  <span className=\"text-xs\">156</span>\n                </button>\n                <button className=\"flex items-center gap-1 text-muted-foreground hover:text-blue-500\">\n                  <Share2 className=\"h-4 w-4\" />\n                </button>\n              </div>\n              {isOverLimit && (\n                <Badge variant=\"destructive\" className=\"mt-2\">\n                  {content.length}/{characterLimit} characters\n                </Badge>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (platform === \"LinkedIn\") {\n    return (\n      <Card className=\"overflow-hidden\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarFallback>{businessName[0]}</AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-semibold\">{businessName}</p>\n                <p className=\"text-xs text-muted-foreground\">10,234 followers</p>\n                <p className=\"text-xs text-muted-foreground\">Promoted · 1h · 🌐</p>\n              </div>\n            </div>\n            <MoreHorizontal className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <p className=\"text-sm whitespace-pre-wrap\">{content || \"Your LinkedIn content will appear here...\"}</p>\n          {imageUrl && (\n            <div className=\"mt-3 aspect-video bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 rounded-lg overflow-hidden\">\n              <img src={imageUrl} alt=\"Post\" className=\"w-full h-full object-cover\" />\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 mt-3 text-xs text-muted-foreground\">\n            <div className=\"flex -space-x-1\">\n              <div className=\"w-4 h-4 rounded-full bg-blue-500\" />\n              <div className=\"w-4 h-4 rounded-full bg-red-500\" />\n              <div className=\"w-4 h-4 rounded-full bg-green-500\" />\n            </div>\n            <span>234 reactions · 45 comments · 12 reposts</span>\n          </div>\n          <div className=\"flex items-center justify-around mt-3 pt-3 border-t\">\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-3 py-2 rounded\">\n              <ThumbsUp className=\"h-4 w-4\" />\n              Like\n            </button>\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-3 py-2 rounded\">\n              <MessageSquare className=\"h-4 w-4\" />\n              Comment\n            </button>\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-3 py-2 rounded\">\n              <Repeat className=\"h-4 w-4\" />\n              Repost\n            </button>\n            <button className=\"flex items-center gap-2 text-sm text-muted-foreground hover:bg-muted px-3 py-2 rounded\">\n              <Send className=\"h-4 w-4\" />\n              Send\n            </button>\n          </div>\n          {isOverLimit && (\n            <Badge variant=\"destructive\" className=\"mt-2\">\n              {content.length}/{characterLimit} characters\n            </Badge>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (platform === \"TikTok\") {\n    return (\n      <Card className=\"overflow-hidden bg-black text-white\">\n        <div className=\"aspect-[9/16] relative bg-gradient-to-br from-pink-500 to-purple-500\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Post\" className=\"w-full h-full object-cover\" />\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <p className=\"text-white/70\">Video Preview</p>\n            </div>\n          )}\n          <div className=\"absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Avatar className=\"h-8 w-8 ring-2 ring-white\">\n                <AvatarFallback>{businessName[0]}</AvatarFallback>\n              </Avatar>\n              <p className=\"text-sm font-semibold\">@{businessName.toLowerCase().replace(/\\s+/g, '')}</p>\n              <Badge variant=\"secondary\" className=\"text-xs\">Sponsored</Badge>\n            </div>\n            <p className=\"text-sm\">{content || \"Your TikTok caption will appear here...\"}</p>\n            <p className=\"text-xs mt-2 text-white/70\">🎵 Original Sound - {businessName}</p>\n          </div>\n          <div className=\"absolute right-4 bottom-20 flex flex-col items-center gap-4\">\n            <button className=\"flex flex-col items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-white/20 backdrop-blur flex items-center justify-center\">\n                <Heart className=\"h-5 w-5\" />\n              </div>\n              <span className=\"text-xs mt-1\">32.4K</span>\n            </button>\n            <button className=\"flex flex-col items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-white/20 backdrop-blur flex items-center justify-center\">\n                <MessageSquare className=\"h-5 w-5\" />\n              </div>\n              <span className=\"text-xs mt-1\">892</span>\n            </button>\n            <button className=\"flex flex-col items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-white/20 backdrop-blur flex items-center justify-center\">\n                <Share2 className=\"h-5 w-5\" />\n              </div>\n              <span className=\"text-xs mt-1\">Share</span>\n            </button>\n          </div>\n        </div>\n        {isOverLimit && (\n          <div className=\"p-2\">\n            <Badge variant=\"destructive\">\n              {content.length}/{characterLimit} characters\n            </Badge>\n          </div>\n        )}\n      </Card>\n    );\n  }\n\n  // Default preview\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-sm font-semibold\">{platform} Preview</h3>\n          {isOverLimit && (\n            <Badge variant=\"destructive\">\n              {content.length}/{characterLimit} characters\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm\">{content || `Your ${platform} content will appear here...`}</p>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14149},"client/src/components/content/platform-selector.tsx":{"content":"import { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface PlatformSelectorProps {\n  selectedPlatforms: string[];\n  onPlatformsChange: (platforms: string[]) => void;\n}\n\nconst platforms = [\n  { name: \"Instagram\", icon: \"fab fa-instagram\", color: \"text-pink-500\" },\n  { name: \"Facebook\", icon: \"fab fa-facebook\", color: \"text-blue-600\" },\n  { name: \"X (Twitter)\", icon: \"fab fa-twitter\", color: \"text-blue-400\" },\n  { name: \"TikTok\", icon: \"fab fa-tiktok\", color: \"text-gray-800\" },\n  { name: \"LinkedIn\", icon: \"fab fa-linkedin\", color: \"text-blue-700\" },\n];\n\nexport default function PlatformSelector({ selectedPlatforms, onPlatformsChange }: PlatformSelectorProps) {\n  const handlePlatformChange = (platform: string, checked: boolean) => {\n    if (checked) {\n      onPlatformsChange([...selectedPlatforms, platform]);\n    } else {\n      onPlatformsChange(selectedPlatforms.filter(p => p !== platform));\n    }\n  };\n\n  return (\n    <div>\n      <Label className=\"text-base font-medium mb-3 block\">Select Platforms</Label>\n      <div className=\"flex flex-wrap gap-4\">\n        {platforms.map((platform) => (\n          <div key={platform.name} className=\"flex items-center space-x-2\">\n            <Checkbox\n              id={platform.name}\n              checked={selectedPlatforms.includes(platform.name)}\n              onCheckedChange={(checked) => handlePlatformChange(platform.name, checked as boolean)}\n            />\n            <Label\n              htmlFor={platform.name}\n              className=\"flex items-center space-x-2 cursor-pointer\"\n            >\n              <i className={`${platform.icon} ${platform.color}`} />\n              <span className=\"text-sm text-foreground\">{platform.name}</span>\n            </Label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1836},"client/src/components/content/post-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Heart, MessageSquare, Share2, Clock, Calendar, CheckCircle, XCircle, Edit, Trash2, Eye } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Post } from \"@shared/schema\";\n\ninterface PostCardProps {\n  post: Post;\n  showActions?: boolean;\n  onApprove?: (postId: string) => void;\n  onReject?: (postId: string) => void;\n  onEdit?: (postId: string) => void;\n  onDelete?: (postId: string) => void;\n  onPreview?: (postId: string) => void;\n  compact?: boolean;\n}\n\nexport default function PostCard({\n  post,\n  showActions = false,\n  onApprove,\n  onReject,\n  onEdit,\n  onDelete,\n  onPreview,\n  compact = false,\n}: PostCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"published\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"scheduled\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"draft\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    const platformMap: Record<string, string> = {\n      \"Instagram\": \"fab fa-instagram text-pink-500\",\n      \"Facebook\": \"fab fa-facebook text-blue-600\",\n      \"X (Twitter)\": \"fab fa-twitter text-blue-400\",\n      \"LinkedIn\": \"fab fa-linkedin text-blue-700\",\n      \"TikTok\": \"fab fa-tiktok text-gray-800 dark:text-gray-200\",\n    };\n    return platformMap[platform] || \"fas fa-globe text-gray-500\";\n  };\n\n  return (\n    <Card className={`overflow-hidden transition-all hover:shadow-lg ${compact ? '' : ''}`}>\n      {/* Image Display */}\n      {post.imageUrl && (\n        <div className=\"relative w-full aspect-square bg-gray-100 dark:bg-gray-800 overflow-hidden\">\n          <img\n            src={post.imageUrl}\n            alt=\"Post media\"\n            className=\"w-full h-full object-cover\"\n            onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.src = `https://via.placeholder.com/1080x1080/9333ea/ffffff?text=${encodeURIComponent(post.platforms[0] || 'Social Media Post')}`;\n            }}\n          />\n          {post.videoUrl && (\n            <div className=\"absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded-full flex items-center gap-1 text-xs\">\n              <i className=\"fas fa-play\" />\n              Video\n            </div>\n          )}\n          {post.aiGenerated && (\n            <div className=\"absolute top-2 left-2 bg-purple-600/90 text-white px-2 py-1 rounded-full text-xs flex items-center gap-1\">\n              <i className=\"fas fa-robot\" />\n              AI Generated\n            </div>\n          )}\n        </div>\n      )}\n\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            {/* Status Badge */}\n            <Badge className={`${getStatusColor(post.status)} mb-2`}>\n              {post.status.charAt(0).toUpperCase() + post.status.slice(1)}\n            </Badge>\n            \n            {/* Platforms */}\n            <div className=\"flex items-center gap-2 mb-2\">\n              {post.platforms.map((platform) => (\n                <div key={platform} className=\"flex items-center gap-1\">\n                  <i className={getPlatformIcon(platform)} />\n                  {!compact && <span className=\"text-xs text-muted-foreground\">{platform}</span>}\n                </div>\n              ))}\n            </div>\n\n            {/* Schedule Info */}\n            {post.scheduledFor && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-2\">\n                <Calendar className=\"w-3 h-3\" />\n                Scheduled for {new Date(post.scheduledFor).toLocaleDateString()}\n              </div>\n            )}\n\n            {/* Published Info */}\n            {post.publishedAt && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-2\">\n                <CheckCircle className=\"w-3 h-3\" />\n                Published {formatDistanceToNow(new Date(post.publishedAt), { addSuffix: true })}\n              </div>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        {/* Content Preview */}\n        <p className={`text-sm text-foreground ${compact ? 'line-clamp-2' : 'line-clamp-3'} mb-4`}>\n          {post.content}\n        </p>\n\n        {/* Engagement Metrics */}\n        {post.engagementData && (\n          <div className=\"flex items-center gap-4 mb-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Heart className=\"w-4 h-4 text-red-500\" />\n              <span>{post.engagementData.likes}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <MessageSquare className=\"w-4 h-4 text-blue-500\" />\n              <span>{post.engagementData.comments}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Share2 className=\"w-4 h-4 text-green-500\" />\n              <span>{post.engagementData.shares}</span>\n            </div>\n            {post.engagementData.reach && (\n              <div className=\"flex items-center gap-1\">\n                <Eye className=\"w-4 h-4 text-purple-500\" />\n                <span>{post.engagementData.reach}</span>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        {showActions && (\n          <div className=\"flex items-center gap-2 pt-3 border-t border-border\">\n            {post.status === \"pending\" && (\n              <>\n                {onApprove && (\n                  <Button\n                    onClick={() => onApprove(post.id)}\n                    size=\"sm\"\n                    className=\"flex-1\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                    Approve\n                  </Button>\n                )}\n                {onReject && (\n                  <Button\n                    onClick={() => onReject(post.id)}\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    className=\"flex-1\"\n                  >\n                    <XCircle className=\"w-4 h-4 mr-1\" />\n                    Reject\n                  </Button>\n                )}\n              </>\n            )}\n            \n            {onEdit && (\n              <Button\n                onClick={() => onEdit(post.id)}\n                size=\"sm\"\n                variant=\"outline\"\n              >\n                <Edit className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {onPreview && (\n              <Button\n                onClick={() => onPreview(post.id)}\n                size=\"sm\"\n                variant=\"outline\"\n              >\n                <Eye className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {onDelete && (\n              <Button\n                onClick={() => onDelete(post.id)}\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"text-destructive\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7849},"client/src/components/layout/header.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Bell, Plus, Coins, LogOut, User as UserIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nconst pageData = {\n  \"/\": {\n    title: \"Dashboard\",\n    subtitle: \"Welcome back! Here's your social media overview.\"\n  },\n  \"/create\": {\n    title: \"Create Content\",\n    subtitle: \"Create engaging posts with AI assistance\"\n  },\n  \"/calendar\": {\n    title: \"Content Calendar\",\n    subtitle: \"View and manage your scheduled posts\"\n  },\n  \"/approval\": {\n    title: \"Approval Queue\",\n    subtitle: \"Review and approve content before publishing\"\n  },\n  \"/analytics\": {\n    title: \"Analytics\",\n    subtitle: \"Track your social media performance across all platforms\"\n  },\n  \"/library\": {\n    title: \"Content Library\",\n    subtitle: \"Manage all your content drafts and published posts\"\n  },\n  \"/campaigns\": {\n    title: \"Campaigns\",\n    subtitle: \"Manage your social media campaigns\"\n  },\n  \"/pricing\": {\n    title: \"Pricing Plans\",\n    subtitle: \"Choose the perfect plan for your business\"\n  },\n  \"/settings\": {\n    title: \"Settings\",\n    subtitle: \"Configure your account and platform settings\"\n  }\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const { user } = useAuth() as { user: User | null | undefined; isLoading: boolean; isAuthenticated: boolean };\n  const currentPage = pageData[location as keyof typeof pageData] || pageData[\"/\"];\n\n  const getInitials = (firstName?: string | null, lastName?: string | null, email?: string | null) => {\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (email) {\n      return email.substring(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const getSubscriptionBadgeColor = (status?: string | null) => {\n    switch (status) {\n      case \"free\":\n        return \"secondary\";\n      case \"trial\":\n        return \"outline\";\n      case \"active\":\n        return \"default\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">{currentPage.title}</h2>\n          <p className=\"text-sm text-muted-foreground mt-1\">{currentPage.subtitle}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Credits Display */}\n          {user && (\n            <div className=\"flex items-center gap-2 px-3 py-1.5 bg-muted rounded-md\">\n              <Coins className=\"h-4 w-4 text-primary\" />\n              <span className=\"text-sm font-medium\">{user.credits || 0} credits</span>\n              <Badge variant={getSubscriptionBadgeColor(user.subscriptionStatus)} className=\"text-xs\">\n                {user.subscriptionStatus === \"free\" ? \"Free\" : \n                 user.subscriptionStatus === \"trial\" ? \"Trial\" : \n                 user.subscriptionStatus === \"active\" ? \"Pro\" : \n                 user.subscriptionStatus || \"Free\"}\n              </Badge>\n            </div>\n          )}\n\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n            <Bell className=\"h-5 w-5\" />\n            <span className=\"absolute top-0 right-0 w-2 h-2 bg-destructive rounded-full\" />\n          </Button>\n\n          {/* Quick Create */}\n          <Button>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Quick Create\n          </Button>\n\n          {/* User Menu */}\n          {user && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\">\n                  <Avatar className=\"h-9 w-9\">\n                    <AvatarImage src={user.profileImageUrl || undefined} alt=\"User\" />\n                    <AvatarFallback>\n                      {getInitials(user.firstName, user.lastName, user.email)}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\">\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    {user.firstName && user.lastName && (\n                      <p className=\"text-sm font-medium\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                    )}\n                    {user.email && (\n                      <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                    )}\n                  </div>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <UserIcon className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"cursor-pointer\" onClick={() => window.location.href = \"/pricing\"}>\n                  <Coins className=\"mr-2 h-4 w-4\" />\n                  <span>Upgrade Plan</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem \n                  className=\"cursor-pointer text-destructive focus:text-destructive\"\n                  onClick={() => window.location.href = \"/api/logout\"}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6121},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  PlusCircle, \n  Calendar, \n  CheckCircle, \n  BarChart3, \n  FolderOpen, \n  Settings,\n  Bot,\n  Rocket,\n  Link2\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Post, User } from \"@shared/schema\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Create Content\", href: \"/create\", icon: PlusCircle },\n  { name: \"Campaigns\", href: \"/campaigns\", icon: Rocket },\n  { name: \"Connect Platforms\", href: \"/connect-platforms\", icon: Link2 },\n  { name: \"Content Calendar\", href: \"/calendar\", icon: Calendar },\n  { name: \"Approval Queue\", href: \"/approval\", icon: CheckCircle, badge: true },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Content Library\", href: \"/library\", icon: FolderOpen },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  \n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n  });\n\n  const { data: pendingPosts } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\", \"pending\"],\n  });\n\n  return (\n    <aside className=\"w-64 bg-card shadow-lg flex flex-col\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Bot className=\"text-primary-foreground w-5 h-5\" />\n          </div>\n          <h1 className=\"text-xl font-bold text-foreground\">MyAiMediaMgr</h1>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-4 py-3 text-sm font-medium rounded-lg transition-colors cursor-pointer\",\n                  isActive\n                    ? \"bg-accent text-accent-foreground border border-border\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n              >\n                <item.icon className=\"w-5 h-5\" />\n                <span>{item.name}</span>\n                {item.badge && pendingPosts && pendingPosts.length > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-auto bg-amber-100 text-amber-800\">\n                    {pendingPosts.length}\n                  </Badge>\n                )}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n      \n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <img \n            src={user?.profileImageUrl || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=40&h=40&fit=crop\"} \n            alt=\"User profile\" \n            className=\"w-10 h-10 rounded-full object-cover\" \n          />\n          <div>\n            <p className=\"text-sm font-medium text-foreground\">\n              {user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email : \"Loading...\"}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {user?.businessName || \"Business Owner\"}\n            </p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3581},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}